
################################################################
# This is a generated script based on design: design_1
#
# Though there are limitations about the generated script,
# the main purpose of this utility is to make learning
# IP Integrator Tcl commands easier.
################################################################

namespace eval _tcl {
proc get_script_folder {} {
   set script_path [file normalize [info script]]
   set script_folder [file dirname $script_path]
   return $script_folder
}
}
variable script_folder
set script_folder [_tcl::get_script_folder]

################################################################
# Check if script is running in correct Vivado version.
################################################################
set scripts_vivado_version 2020.2
set current_vivado_version [version -short]

if { [string first $scripts_vivado_version $current_vivado_version] == -1 } {
   puts ""
   catch {common::send_gid_msg -ssname BD::TCL -id 2041 -severity "ERROR" "This script was generated using Vivado <$scripts_vivado_version> and is being run in <$current_vivado_version> of Vivado. Please run the script in Vivado <$scripts_vivado_version> then open the design in Vivado <$current_vivado_version>. Upgrade the design by running \"Tools => Report => Report IP Status...\", then run write_bd_tcl to create an updated script."}

   return 1
}

################################################################
# START
################################################################

# To test this script, run the following commands from Vivado Tcl console:
# source design_1_script.tcl


# The design that will be created by this Tcl script contains the following 
# module references:
# param_mux, pl_sysref, splitter_4bit, splitter_dac_trigen_sel, splitter_trig, and_gate, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, data_split, data_split, data_split, data_split, data_split, data_split, merger_2, data_split, data_split, merger_2, data_split, data_split, arbitary_wave_gen, flip_flop, gaussian_gen1, merger1, mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, data_split, data_split, data_split, data_split, data_split, data_split, merger_2, data_split, data_split, merger_2, data_split, data_split, arbitary_wave_gen, flip_flop, gaussian_gen1, merger1, mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, data_split, data_split, data_split, data_split, data_split, data_split, merger_2, data_split, data_split, merger_2, data_split, data_split, arbitary_wave_gen, flip_flop, gaussian_gen1, merger1, mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, flip_flop, merger, param_mux, data_split, data_split, data_split, data_split, data_split, data_split, merger_2, data_split, data_split, merger_2, data_split, data_split, arbitary_wave_gen, flip_flop, gaussian_gen1, merger1, mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, adc_trigger, and_gate, and_gate, adc_trigger, and_gate, and_gate, adc_trigger, and_gate, and_gate, adc_trigger, and_gate, and_gate, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, splitter_dac, splitter_dac, splitter_dac, splitter_dac, merger1, param_mux, param_mux, merger1, param_mux, param_mux, merger1, param_mux, param_mux, merger1, param_mux, param_mux, merger1, param_mux, param_mux, merger1, param_mux, param_mux, merger1, param_mux, param_mux, merger1, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, param_mux, splitter_coeff, trigger_gen_pkg, trigger_gen_pkg, trigger_gen_pkg, trigger_gen_pkg, data_splitter, data_splitter, data_splitter, data_splitter, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, data_splitter, data_splitter, data_splitter, data_splitter, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, data_splitter, data_splitter, data_splitter, data_splitter, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, data_splitter, data_splitter, data_splitter, data_splitter, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, booth_multiplier, divider1, param_mux, param_mux, param_mux, param_mux, sgn_extension, sgn_extension, and_gate, and_gate, booth_mul_with_pipelining, booth_mul_with_pipelining, booth_mul_with_pipelining, booth_mul_with_pipelining, cos_thetha, main_output, merger_2, not_gate, param_mux, param_mux, sgn_extension, sgn_extension, sgn_extension, sgn_extension, sin_thetha, thetha_for_sin_cos1, param_mux, param_mux, param_mux, param_mux, sgn_extension, sgn_extension, and_gate, and_gate, booth_mul_with_pipelining, booth_mul_with_pipelining, booth_mul_with_pipelining, booth_mul_with_pipelining, cos_thetha, main_output, merger_2, not_gate, param_mux, param_mux, sgn_extension, sgn_extension, sgn_extension, sgn_extension, sin_thetha, thetha_for_sin_cos1, param_mux, param_mux, param_mux, param_mux, sgn_extension, sgn_extension, and_gate, and_gate, booth_mul_with_pipelining, booth_mul_with_pipelining, booth_mul_with_pipelining, booth_mul_with_pipelining, cos_thetha, main_output, merger_2, not_gate, param_mux, param_mux, sgn_extension, sgn_extension, sgn_extension, sgn_extension, sin_thetha, thetha_for_sin_cos1, param_mux, param_mux, param_mux, param_mux, sgn_extension, sgn_extension, and_gate, and_gate, booth_mul_with_pipelining, booth_mul_with_pipelining, booth_mul_with_pipelining, booth_mul_with_pipelining, cos_thetha, main_output, merger_2, not_gate, param_mux, param_mux, sgn_extension, sgn_extension, sgn_extension, sgn_extension, sin_thetha, thetha_for_sin_cos1, iir_order3, mvng_avg_fil, iir_order3, mvng_avg_fil, iir_order3, mvng_avg_fil, iir_order3, mvng_avg_fil, iir_order3, mvng_avg_fil, iir_order3, mvng_avg_fil, iir_order3, mvng_avg_fil, iir_order3, mvng_avg_fil

# Please add the sources of those modules before sourcing this Tcl script.

# If there is no project opened, this script will create a
# project, but make sure you do not have an existing project
# <./myproj/project_1.xpr> in the current working folder.

set list_projs [get_projects -quiet]
if { $list_projs eq "" } {
   create_project project_1 myproj -part xczu28dr-ffvg1517-2-e
   set_property BOARD_PART xilinx.com:zcu111:part0:1.2 [current_project]
}


# CHANGE DESIGN NAME HERE
variable design_name
set design_name design_1

# If you do not already have an existing IP Integrator design open,
# you can create a design using the following command:
#    create_bd_design $design_name

# Creating design if needed
set errMsg ""
set nRet 0

set cur_design [current_bd_design -quiet]
set list_cells [get_bd_cells -quiet]

if { ${design_name} eq "" } {
   # USE CASES:
   #    1) Design_name not set

   set errMsg "Please set the variable <design_name> to a non-empty value."
   set nRet 1

} elseif { ${cur_design} ne "" && ${list_cells} eq "" } {
   # USE CASES:
   #    2): Current design opened AND is empty AND names same.
   #    3): Current design opened AND is empty AND names diff; design_name NOT in project.
   #    4): Current design opened AND is empty AND names diff; design_name exists in project.

   if { $cur_design ne $design_name } {
      common::send_gid_msg -ssname BD::TCL -id 2001 -severity "INFO" "Changing value of <design_name> from <$design_name> to <$cur_design> since current design is empty."
      set design_name [get_property NAME $cur_design]
   }
   common::send_gid_msg -ssname BD::TCL -id 2002 -severity "INFO" "Constructing design in IPI design <$cur_design>..."

} elseif { ${cur_design} ne "" && $list_cells ne "" && $cur_design eq $design_name } {
   # USE CASES:
   #    5) Current design opened AND has components AND same names.

   set errMsg "Design <$design_name> already exists in your project, please set the variable <design_name> to another value."
   set nRet 1
} elseif { [get_files -quiet ${design_name}.bd] ne "" } {
   # USE CASES: 
   #    6) Current opened design, has components, but diff names, design_name exists in project.
   #    7) No opened design, design_name exists in project.

   set errMsg "Design <$design_name> already exists in your project, please set the variable <design_name> to another value."
   set nRet 2

} else {
   # USE CASES:
   #    8) No opened design, design_name not in project.
   #    9) Current opened design, has components, but diff names, design_name not in project.

   common::send_gid_msg -ssname BD::TCL -id 2003 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

   create_bd_design $design_name

   common::send_gid_msg -ssname BD::TCL -id 2004 -severity "INFO" "Making design <$design_name> as current_bd_design."
   current_bd_design $design_name

}

common::send_gid_msg -ssname BD::TCL -id 2005 -severity "INFO" "Currently the variable <design_name> is equal to \"$design_name\"."

if { $nRet != 0 } {
   catch {common::send_gid_msg -ssname BD::TCL -id 2006 -severity "ERROR" $errMsg}
   return $nRet
}

##################################################################
# DESIGN PROCs
##################################################################


# Hierarchical cell: filter_mav_Q
proc create_hier_cell_filter_mav_Q_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_filter_mav_Q_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -type clk clk_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_1
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_1
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_1
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_1
  create_bd_pin -dir I -from 15 -to 0 coeff_b_1
  create_bd_pin -dir O -from 39 -to 0 data_out_0
  create_bd_pin -dir O -from 0 -to 0 data_out_1
  create_bd_pin -dir I data_valid_0
  create_bd_pin -dir O -from 39 -to 0 filter_op_0
  create_bd_pin -dir I -from 15 -to 0 ip_sample_0
  create_bd_pin -dir O op_valid_0
  create_bd_pin -dir I -from 1 -to 0 sel_0

  # Create instance: constant_rst_last_lpf, and set properties
  set constant_rst_last_lpf [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_last_lpf ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_last_lpf

  # Create instance: constant_rst_mav, and set properties
  set constant_rst_mav [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_mav ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_mav

  # Create instance: iir_order3_0, and set properties
  set block_name iir_order3
  set block_cell_name iir_order3_0
  if { [catch {set iir_order3_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $iir_order3_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: mvng_avg_fil_0, and set properties
  set block_name mvng_avg_fil
  set block_cell_name mvng_avg_fil_0
  if { [catch {set mvng_avg_fil_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mvng_avg_fil_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net clk_0_1 [get_bd_pins clk_0] [get_bd_pins iir_order3_0/clk] [get_bd_pins mvng_avg_fil_0/clk]
  connect_bd_net -net coeff_a2b_1_1 [get_bd_pins coeff_a2b_1] [get_bd_pins iir_order3_0/coeff_a2b]
  connect_bd_net -net coeff_a3b_1_1 [get_bd_pins coeff_a3b_1] [get_bd_pins iir_order3_0/coeff_a3b]
  connect_bd_net -net coeff_a4_1_1 [get_bd_pins coeff_a4_1] [get_bd_pins iir_order3_0/coeff_a4]
  connect_bd_net -net coeff_ab_1_1 [get_bd_pins coeff_ab_1] [get_bd_pins iir_order3_0/coeff_ab]
  connect_bd_net -net coeff_b_1_1 [get_bd_pins coeff_b_1] [get_bd_pins iir_order3_0/coeff_b]
  connect_bd_net -net constant_rst_last_lpf_dout [get_bd_pins constant_rst_last_lpf/dout] [get_bd_pins iir_order3_0/last] [get_bd_pins iir_order3_0/reset]
  connect_bd_net -net constant_rst_mav_dout [get_bd_pins constant_rst_mav/dout] [get_bd_pins mvng_avg_fil_0/rst]
  connect_bd_net -net data_valid_0_1 [get_bd_pins data_valid_0] [get_bd_pins iir_order3_0/data_valid]
  connect_bd_net -net ip_sample_0_1 [get_bd_pins ip_sample_0] [get_bd_pins iir_order3_0/ip_sample]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins filter_op_0] [get_bd_pins mvng_avg_fil_0/filter_op]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins op_valid_0] [get_bd_pins mvng_avg_fil_0/op_valid]
  connect_bd_net -net param_mux_3_fildata_data_out [get_bd_pins data_out_0] [get_bd_pins iir_order3_0/lpf] [get_bd_pins mvng_avg_fil_0/filter_ip]
  connect_bd_net -net param_mux_3_filvalid_data_out [get_bd_pins data_out_1] [get_bd_pins iir_order3_0/out_valid] [get_bd_pins mvng_avg_fil_0/data_valid]
  connect_bd_net -net sel_0_1 [get_bd_pins sel_0] [get_bd_pins iir_order3_0/order]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: filter_mav_I
proc create_hier_cell_filter_mav_I_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_filter_mav_I_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -type clk clk_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_1
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_1
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_1
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_1
  create_bd_pin -dir I -from 15 -to 0 coeff_b_1
  create_bd_pin -dir O -from 39 -to 0 data_out_0
  create_bd_pin -dir O -from 0 -to 0 data_out_1
  create_bd_pin -dir I data_valid_0
  create_bd_pin -dir O -from 39 -to 0 filter_op_0
  create_bd_pin -dir I -from 15 -to 0 ip_sample_0
  create_bd_pin -dir O op_valid_0
  create_bd_pin -dir I -from 1 -to 0 sel_0

  # Create instance: constant_rst_last_lpf, and set properties
  set constant_rst_last_lpf [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_last_lpf ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_last_lpf

  # Create instance: constant_rst_mav, and set properties
  set constant_rst_mav [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_mav ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_mav

  # Create instance: iir_order3_0, and set properties
  set block_name iir_order3
  set block_cell_name iir_order3_0
  if { [catch {set iir_order3_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $iir_order3_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: mvng_avg_fil_0, and set properties
  set block_name mvng_avg_fil
  set block_cell_name mvng_avg_fil_0
  if { [catch {set mvng_avg_fil_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mvng_avg_fil_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net clk_0_1 [get_bd_pins clk_0] [get_bd_pins iir_order3_0/clk] [get_bd_pins mvng_avg_fil_0/clk]
  connect_bd_net -net coeff_a2b_1_1 [get_bd_pins coeff_a2b_1] [get_bd_pins iir_order3_0/coeff_a2b]
  connect_bd_net -net coeff_a3b_1_1 [get_bd_pins coeff_a3b_1] [get_bd_pins iir_order3_0/coeff_a3b]
  connect_bd_net -net coeff_a4_1_1 [get_bd_pins coeff_a4_1] [get_bd_pins iir_order3_0/coeff_a4]
  connect_bd_net -net coeff_ab_1_1 [get_bd_pins coeff_ab_1] [get_bd_pins iir_order3_0/coeff_ab]
  connect_bd_net -net coeff_b_1_1 [get_bd_pins coeff_b_1] [get_bd_pins iir_order3_0/coeff_b]
  connect_bd_net -net constant_rst_last_lpf_dout [get_bd_pins constant_rst_last_lpf/dout] [get_bd_pins iir_order3_0/last] [get_bd_pins iir_order3_0/reset]
  connect_bd_net -net constant_rst_mav_dout [get_bd_pins constant_rst_mav/dout] [get_bd_pins mvng_avg_fil_0/rst]
  connect_bd_net -net data_valid_0_1 [get_bd_pins data_valid_0] [get_bd_pins iir_order3_0/data_valid]
  connect_bd_net -net ip_sample_0_1 [get_bd_pins ip_sample_0] [get_bd_pins iir_order3_0/ip_sample]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins filter_op_0] [get_bd_pins mvng_avg_fil_0/filter_op]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins op_valid_0] [get_bd_pins mvng_avg_fil_0/op_valid]
  connect_bd_net -net param_mux_3_fildata_data_out [get_bd_pins data_out_0] [get_bd_pins iir_order3_0/lpf] [get_bd_pins mvng_avg_fil_0/filter_ip]
  connect_bd_net -net param_mux_3_filvalid_data_out [get_bd_pins data_out_1] [get_bd_pins iir_order3_0/out_valid] [get_bd_pins mvng_avg_fil_0/data_valid]
  connect_bd_net -net sel_0_1 [get_bd_pins sel_0] [get_bd_pins iir_order3_0/order]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: filter_mav_Q
proc create_hier_cell_filter_mav_Q_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_filter_mav_Q_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -type clk clk_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_2
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_2
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_2
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_2
  create_bd_pin -dir I -from 15 -to 0 coeff_b_2
  create_bd_pin -dir O -from 39 -to 0 data_out_0
  create_bd_pin -dir O -from 0 -to 0 data_out_1
  create_bd_pin -dir I data_valid_0
  create_bd_pin -dir O -from 39 -to 0 filter_op_0
  create_bd_pin -dir I -from 15 -to 0 ip_sample_0
  create_bd_pin -dir O op_valid_0
  create_bd_pin -dir I -from 1 -to 0 sel_0

  # Create instance: constant_rst_last_lpf, and set properties
  set constant_rst_last_lpf [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_last_lpf ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_last_lpf

  # Create instance: constant_rst_mav, and set properties
  set constant_rst_mav [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_mav ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_mav

  # Create instance: iir_order3_0, and set properties
  set block_name iir_order3
  set block_cell_name iir_order3_0
  if { [catch {set iir_order3_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $iir_order3_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: mvng_avg_fil_0, and set properties
  set block_name mvng_avg_fil
  set block_cell_name mvng_avg_fil_0
  if { [catch {set mvng_avg_fil_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mvng_avg_fil_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net clk_0_1 [get_bd_pins clk_0] [get_bd_pins iir_order3_0/clk] [get_bd_pins mvng_avg_fil_0/clk]
  connect_bd_net -net coeff_a2b_2_1 [get_bd_pins coeff_a2b_2] [get_bd_pins iir_order3_0/coeff_a2b]
  connect_bd_net -net coeff_a3b_2_1 [get_bd_pins coeff_a3b_2] [get_bd_pins iir_order3_0/coeff_a3b]
  connect_bd_net -net coeff_a4_2_1 [get_bd_pins coeff_a4_2] [get_bd_pins iir_order3_0/coeff_a4]
  connect_bd_net -net coeff_ab_2_1 [get_bd_pins coeff_ab_2] [get_bd_pins iir_order3_0/coeff_ab]
  connect_bd_net -net coeff_b_2_1 [get_bd_pins coeff_b_2] [get_bd_pins iir_order3_0/coeff_b]
  connect_bd_net -net constant_rst_last_lpf_dout [get_bd_pins constant_rst_last_lpf/dout] [get_bd_pins iir_order3_0/last] [get_bd_pins iir_order3_0/reset]
  connect_bd_net -net constant_rst_mav_dout [get_bd_pins constant_rst_mav/dout] [get_bd_pins mvng_avg_fil_0/rst]
  connect_bd_net -net data_valid_0_1 [get_bd_pins data_valid_0] [get_bd_pins iir_order3_0/data_valid]
  connect_bd_net -net ip_sample_0_1 [get_bd_pins ip_sample_0] [get_bd_pins iir_order3_0/ip_sample]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins filter_op_0] [get_bd_pins mvng_avg_fil_0/filter_op]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins op_valid_0] [get_bd_pins mvng_avg_fil_0/op_valid]
  connect_bd_net -net param_mux_3_fildata_data_out [get_bd_pins data_out_0] [get_bd_pins iir_order3_0/lpf] [get_bd_pins mvng_avg_fil_0/filter_ip]
  connect_bd_net -net param_mux_3_filvalid_data_out [get_bd_pins data_out_1] [get_bd_pins iir_order3_0/out_valid] [get_bd_pins mvng_avg_fil_0/data_valid]
  connect_bd_net -net sel_0_1 [get_bd_pins sel_0] [get_bd_pins iir_order3_0/order]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: filter_mav_I
proc create_hier_cell_filter_mav_I_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_filter_mav_I_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -type clk clk_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_2
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_2
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_2
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_2
  create_bd_pin -dir I -from 15 -to 0 coeff_b_2
  create_bd_pin -dir O -from 39 -to 0 data_out_0
  create_bd_pin -dir O -from 0 -to 0 data_out_1
  create_bd_pin -dir I data_valid_0
  create_bd_pin -dir O -from 39 -to 0 filter_op_0
  create_bd_pin -dir I -from 15 -to 0 ip_sample_0
  create_bd_pin -dir O op_valid_0
  create_bd_pin -dir I -from 1 -to 0 sel_0

  # Create instance: constant_rst_last_lpf, and set properties
  set constant_rst_last_lpf [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_last_lpf ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_last_lpf

  # Create instance: constant_rst_mav, and set properties
  set constant_rst_mav [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_mav ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_mav

  # Create instance: iir_order3_0, and set properties
  set block_name iir_order3
  set block_cell_name iir_order3_0
  if { [catch {set iir_order3_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $iir_order3_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: mvng_avg_fil_0, and set properties
  set block_name mvng_avg_fil
  set block_cell_name mvng_avg_fil_0
  if { [catch {set mvng_avg_fil_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mvng_avg_fil_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net clk_0_1 [get_bd_pins clk_0] [get_bd_pins iir_order3_0/clk] [get_bd_pins mvng_avg_fil_0/clk]
  connect_bd_net -net coeff_a2b_2_1 [get_bd_pins coeff_a2b_2] [get_bd_pins iir_order3_0/coeff_a2b]
  connect_bd_net -net coeff_a3b_2_1 [get_bd_pins coeff_a3b_2] [get_bd_pins iir_order3_0/coeff_a3b]
  connect_bd_net -net coeff_a4_2_1 [get_bd_pins coeff_a4_2] [get_bd_pins iir_order3_0/coeff_a4]
  connect_bd_net -net coeff_ab_2_1 [get_bd_pins coeff_ab_2] [get_bd_pins iir_order3_0/coeff_ab]
  connect_bd_net -net coeff_b_2_1 [get_bd_pins coeff_b_2] [get_bd_pins iir_order3_0/coeff_b]
  connect_bd_net -net constant_rst_last_lpf_dout [get_bd_pins constant_rst_last_lpf/dout] [get_bd_pins iir_order3_0/last] [get_bd_pins iir_order3_0/reset]
  connect_bd_net -net constant_rst_mav_dout [get_bd_pins constant_rst_mav/dout] [get_bd_pins mvng_avg_fil_0/rst]
  connect_bd_net -net data_valid_0_1 [get_bd_pins data_valid_0] [get_bd_pins iir_order3_0/data_valid]
  connect_bd_net -net ip_sample_0_1 [get_bd_pins ip_sample_0] [get_bd_pins iir_order3_0/ip_sample]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins filter_op_0] [get_bd_pins mvng_avg_fil_0/filter_op]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins op_valid_0] [get_bd_pins mvng_avg_fil_0/op_valid]
  connect_bd_net -net param_mux_3_fildata_data_out [get_bd_pins data_out_0] [get_bd_pins iir_order3_0/lpf] [get_bd_pins mvng_avg_fil_0/filter_ip]
  connect_bd_net -net param_mux_3_filvalid_data_out [get_bd_pins data_out_1] [get_bd_pins iir_order3_0/out_valid] [get_bd_pins mvng_avg_fil_0/data_valid]
  connect_bd_net -net sel_0_1 [get_bd_pins sel_0] [get_bd_pins iir_order3_0/order]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: filter_mav_Q
proc create_hier_cell_filter_mav_Q_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_filter_mav_Q_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -type clk clk_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_3
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_3
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_3
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_3
  create_bd_pin -dir I -from 15 -to 0 coeff_b_3
  create_bd_pin -dir O -from 39 -to 0 data_out_0
  create_bd_pin -dir O -from 0 -to 0 data_out_1
  create_bd_pin -dir I data_valid_0
  create_bd_pin -dir O -from 39 -to 0 filter_op_0
  create_bd_pin -dir I -from 15 -to 0 ip_sample_0
  create_bd_pin -dir O op_valid_0
  create_bd_pin -dir I -from 1 -to 0 sel_0

  # Create instance: constant_rst_last_lpf, and set properties
  set constant_rst_last_lpf [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_last_lpf ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_last_lpf

  # Create instance: constant_rst_mav, and set properties
  set constant_rst_mav [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_mav ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_mav

  # Create instance: iir_order3_0, and set properties
  set block_name iir_order3
  set block_cell_name iir_order3_0
  if { [catch {set iir_order3_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $iir_order3_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: mvng_avg_fil_0, and set properties
  set block_name mvng_avg_fil
  set block_cell_name mvng_avg_fil_0
  if { [catch {set mvng_avg_fil_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mvng_avg_fil_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net clk_0_1 [get_bd_pins clk_0] [get_bd_pins iir_order3_0/clk] [get_bd_pins mvng_avg_fil_0/clk]
  connect_bd_net -net coeff_a2b_3_1 [get_bd_pins coeff_a2b_3] [get_bd_pins iir_order3_0/coeff_a2b]
  connect_bd_net -net coeff_a3b_3_1 [get_bd_pins coeff_a3b_3] [get_bd_pins iir_order3_0/coeff_a3b]
  connect_bd_net -net coeff_a4_3_1 [get_bd_pins coeff_a4_3] [get_bd_pins iir_order3_0/coeff_a4]
  connect_bd_net -net coeff_ab_3_1 [get_bd_pins coeff_ab_3] [get_bd_pins iir_order3_0/coeff_ab]
  connect_bd_net -net coeff_b_3_1 [get_bd_pins coeff_b_3] [get_bd_pins iir_order3_0/coeff_b]
  connect_bd_net -net constant_rst_last_lpf_dout [get_bd_pins constant_rst_last_lpf/dout] [get_bd_pins iir_order3_0/last] [get_bd_pins iir_order3_0/reset]
  connect_bd_net -net constant_rst_mav_dout [get_bd_pins constant_rst_mav/dout] [get_bd_pins mvng_avg_fil_0/rst]
  connect_bd_net -net data_valid_0_1 [get_bd_pins data_valid_0] [get_bd_pins iir_order3_0/data_valid]
  connect_bd_net -net ip_sample_0_1 [get_bd_pins ip_sample_0] [get_bd_pins iir_order3_0/ip_sample]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins filter_op_0] [get_bd_pins mvng_avg_fil_0/filter_op]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins op_valid_0] [get_bd_pins mvng_avg_fil_0/op_valid]
  connect_bd_net -net param_mux_3_fildata_data_out [get_bd_pins data_out_0] [get_bd_pins iir_order3_0/lpf] [get_bd_pins mvng_avg_fil_0/filter_ip]
  connect_bd_net -net param_mux_3_filvalid_data_out [get_bd_pins data_out_1] [get_bd_pins iir_order3_0/out_valid] [get_bd_pins mvng_avg_fil_0/data_valid]
  connect_bd_net -net sel_0_1 [get_bd_pins sel_0] [get_bd_pins iir_order3_0/order]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: filter_mav_I
proc create_hier_cell_filter_mav_I_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_filter_mav_I_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -type clk clk_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_3
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_3
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_3
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_3
  create_bd_pin -dir I -from 15 -to 0 coeff_b_3
  create_bd_pin -dir O -from 39 -to 0 data_out_0
  create_bd_pin -dir O -from 0 -to 0 data_out_1
  create_bd_pin -dir I data_valid_0
  create_bd_pin -dir O -from 39 -to 0 filter_op_0
  create_bd_pin -dir I -from 15 -to 0 ip_sample_0
  create_bd_pin -dir O op_valid_0
  create_bd_pin -dir I -from 1 -to 0 sel_0

  # Create instance: constant_rst_last_lpf, and set properties
  set constant_rst_last_lpf [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_last_lpf ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_last_lpf

  # Create instance: constant_rst_mav, and set properties
  set constant_rst_mav [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_mav ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_mav

  # Create instance: iir_order3_0, and set properties
  set block_name iir_order3
  set block_cell_name iir_order3_0
  if { [catch {set iir_order3_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $iir_order3_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: mvng_avg_fil_0, and set properties
  set block_name mvng_avg_fil
  set block_cell_name mvng_avg_fil_0
  if { [catch {set mvng_avg_fil_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mvng_avg_fil_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net clk_0_1 [get_bd_pins clk_0] [get_bd_pins iir_order3_0/clk] [get_bd_pins mvng_avg_fil_0/clk]
  connect_bd_net -net coeff_a2b_3_1 [get_bd_pins coeff_a2b_3] [get_bd_pins iir_order3_0/coeff_a2b]
  connect_bd_net -net coeff_a3b_3_1 [get_bd_pins coeff_a3b_3] [get_bd_pins iir_order3_0/coeff_a3b]
  connect_bd_net -net coeff_a4_3_1 [get_bd_pins coeff_a4_3] [get_bd_pins iir_order3_0/coeff_a4]
  connect_bd_net -net coeff_ab_3_1 [get_bd_pins coeff_ab_3] [get_bd_pins iir_order3_0/coeff_ab]
  connect_bd_net -net coeff_b_3_1 [get_bd_pins coeff_b_3] [get_bd_pins iir_order3_0/coeff_b]
  connect_bd_net -net constant_rst_last_lpf_dout [get_bd_pins constant_rst_last_lpf/dout] [get_bd_pins iir_order3_0/last] [get_bd_pins iir_order3_0/reset]
  connect_bd_net -net constant_rst_mav_dout [get_bd_pins constant_rst_mav/dout] [get_bd_pins mvng_avg_fil_0/rst]
  connect_bd_net -net data_valid_0_1 [get_bd_pins data_valid_0] [get_bd_pins iir_order3_0/data_valid]
  connect_bd_net -net ip_sample_0_1 [get_bd_pins ip_sample_0] [get_bd_pins iir_order3_0/ip_sample]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins filter_op_0] [get_bd_pins mvng_avg_fil_0/filter_op]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins op_valid_0] [get_bd_pins mvng_avg_fil_0/op_valid]
  connect_bd_net -net param_mux_3_fildata_data_out [get_bd_pins data_out_0] [get_bd_pins iir_order3_0/lpf] [get_bd_pins mvng_avg_fil_0/filter_ip]
  connect_bd_net -net param_mux_3_filvalid_data_out [get_bd_pins data_out_1] [get_bd_pins iir_order3_0/out_valid] [get_bd_pins mvng_avg_fil_0/data_valid]
  connect_bd_net -net sel_0_1 [get_bd_pins sel_0] [get_bd_pins iir_order3_0/order]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: filter_mav_Q
proc create_hier_cell_filter_mav_Q { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_filter_mav_Q() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -type clk clk_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_0
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_0
  create_bd_pin -dir I -from 15 -to 0 coeff_b_0
  create_bd_pin -dir O -from 39 -to 0 data_out_0
  create_bd_pin -dir O -from 0 -to 0 data_out_1
  create_bd_pin -dir I data_valid_0
  create_bd_pin -dir O -from 39 -to 0 filter_op_0
  create_bd_pin -dir I -from 15 -to 0 ip_sample_0
  create_bd_pin -dir O op_valid_0
  create_bd_pin -dir I -from 1 -to 0 sel_0

  # Create instance: constant_rst_last_lpf, and set properties
  set constant_rst_last_lpf [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_last_lpf ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_last_lpf

  # Create instance: constant_rst_mav, and set properties
  set constant_rst_mav [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_mav ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_mav

  # Create instance: iir_order3_0, and set properties
  set block_name iir_order3
  set block_cell_name iir_order3_0
  if { [catch {set iir_order3_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $iir_order3_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: mvng_avg_fil_0, and set properties
  set block_name mvng_avg_fil
  set block_cell_name mvng_avg_fil_0
  if { [catch {set mvng_avg_fil_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mvng_avg_fil_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net clk_0_1 [get_bd_pins clk_0] [get_bd_pins iir_order3_0/clk] [get_bd_pins mvng_avg_fil_0/clk]
  connect_bd_net -net coeff_a2b_0_1 [get_bd_pins coeff_a2b_0] [get_bd_pins iir_order3_0/coeff_a2b]
  connect_bd_net -net coeff_a3b_0_1 [get_bd_pins coeff_a3b_0] [get_bd_pins iir_order3_0/coeff_a3b]
  connect_bd_net -net coeff_a4_0_1 [get_bd_pins coeff_a4_0] [get_bd_pins iir_order3_0/coeff_a4]
  connect_bd_net -net coeff_ab_0_1 [get_bd_pins coeff_ab_0] [get_bd_pins iir_order3_0/coeff_ab]
  connect_bd_net -net coeff_b_0_1 [get_bd_pins coeff_b_0] [get_bd_pins iir_order3_0/coeff_b]
  connect_bd_net -net constant_rst_last_lpf_dout [get_bd_pins constant_rst_last_lpf/dout] [get_bd_pins iir_order3_0/last] [get_bd_pins iir_order3_0/reset]
  connect_bd_net -net constant_rst_mav_dout [get_bd_pins constant_rst_mav/dout] [get_bd_pins mvng_avg_fil_0/rst]
  connect_bd_net -net data_valid_0_1 [get_bd_pins data_valid_0] [get_bd_pins iir_order3_0/data_valid]
  connect_bd_net -net ip_sample_0_1 [get_bd_pins ip_sample_0] [get_bd_pins iir_order3_0/ip_sample]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins filter_op_0] [get_bd_pins mvng_avg_fil_0/filter_op]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins op_valid_0] [get_bd_pins mvng_avg_fil_0/op_valid]
  connect_bd_net -net param_mux_3_fildata_data_out [get_bd_pins data_out_0] [get_bd_pins iir_order3_0/lpf] [get_bd_pins mvng_avg_fil_0/filter_ip]
  connect_bd_net -net param_mux_3_filvalid_data_out [get_bd_pins data_out_1] [get_bd_pins iir_order3_0/out_valid] [get_bd_pins mvng_avg_fil_0/data_valid]
  connect_bd_net -net sel_0_1 [get_bd_pins sel_0] [get_bd_pins iir_order3_0/order]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: filter_mav_I
proc create_hier_cell_filter_mav_I { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_filter_mav_I() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -type clk clk_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_0
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_0
  create_bd_pin -dir I -from 15 -to 0 coeff_b_0
  create_bd_pin -dir O -from 39 -to 0 data_out_0
  create_bd_pin -dir O -from 0 -to 0 data_out_1
  create_bd_pin -dir I data_valid_0
  create_bd_pin -dir O -from 39 -to 0 filter_op_0
  create_bd_pin -dir I -from 15 -to 0 ip_sample_0
  create_bd_pin -dir O op_valid_0
  create_bd_pin -dir I -from 1 -to 0 sel_0

  # Create instance: constant_rst_last_lpf, and set properties
  set constant_rst_last_lpf [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_last_lpf ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_last_lpf

  # Create instance: constant_rst_mav, and set properties
  set constant_rst_mav [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_rst_mav ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $constant_rst_mav

  # Create instance: iir_order3_0, and set properties
  set block_name iir_order3
  set block_cell_name iir_order3_0
  if { [catch {set iir_order3_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $iir_order3_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: mvng_avg_fil_0, and set properties
  set block_name mvng_avg_fil
  set block_cell_name mvng_avg_fil_0
  if { [catch {set mvng_avg_fil_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mvng_avg_fil_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net clk_0_1 [get_bd_pins clk_0] [get_bd_pins iir_order3_0/clk] [get_bd_pins mvng_avg_fil_0/clk]
  connect_bd_net -net coeff_a2b_0_1 [get_bd_pins coeff_a2b_0] [get_bd_pins iir_order3_0/coeff_a2b]
  connect_bd_net -net coeff_a3b_0_1 [get_bd_pins coeff_a3b_0] [get_bd_pins iir_order3_0/coeff_a3b]
  connect_bd_net -net coeff_a4_0_1 [get_bd_pins coeff_a4_0] [get_bd_pins iir_order3_0/coeff_a4]
  connect_bd_net -net coeff_ab_0_1 [get_bd_pins coeff_ab_0] [get_bd_pins iir_order3_0/coeff_ab]
  connect_bd_net -net coeff_b_0_1 [get_bd_pins coeff_b_0] [get_bd_pins iir_order3_0/coeff_b]
  connect_bd_net -net constant_rst_last_lpf_dout [get_bd_pins constant_rst_last_lpf/dout] [get_bd_pins iir_order3_0/last] [get_bd_pins iir_order3_0/reset]
  connect_bd_net -net constant_rst_mav_dout [get_bd_pins constant_rst_mav/dout] [get_bd_pins mvng_avg_fil_0/rst]
  connect_bd_net -net data_valid_0_1 [get_bd_pins data_valid_0] [get_bd_pins iir_order3_0/data_valid]
  connect_bd_net -net ip_sample_0_1 [get_bd_pins ip_sample_0] [get_bd_pins iir_order3_0/ip_sample]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins filter_op_0] [get_bd_pins mvng_avg_fil_0/filter_op]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins op_valid_0] [get_bd_pins mvng_avg_fil_0/op_valid]
  connect_bd_net -net param_mux_3_fildata_data_out [get_bd_pins data_out_0] [get_bd_pins iir_order3_0/lpf] [get_bd_pins mvng_avg_fil_0/filter_ip]
  connect_bd_net -net param_mux_3_filvalid_data_out [get_bd_pins data_out_1] [get_bd_pins iir_order3_0/out_valid] [get_bd_pins mvng_avg_fil_0/data_valid]
  connect_bd_net -net sel_0_1 [get_bd_pins sel_0] [get_bd_pins iir_order3_0/order]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: R_Theta
proc create_hier_cell_R_Theta_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_R_Theta_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir O -from 127 -to 0 Data_out_6
  create_bd_pin -dir O -from 39 -to 0 I_mul_out
  create_bd_pin -dir O -from 39 -to 0 I_mul_out1
  create_bd_pin -dir O -from 39 -to 0 I_out
  create_bd_pin -dir O -from 60 -to 0 O1
  create_bd_pin -dir O -from 60 -to 0 O2
  create_bd_pin -dir O -from 39 -to 0 Q_out
  create_bd_pin -dir I a_0
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir O -from 19 -to 0 cos_thetha
  create_bd_pin -dir O -from 19 -to 0 cos_thetha1
  create_bd_pin -dir O cos_thetha_valid_out
  create_bd_pin -dir O cos_thetha_valid_out1
  create_bd_pin -dir O -from 63 -to 0 data_out
  create_bd_pin -dir O -from 63 -to 0 data_out1
  create_bd_pin -dir I data_out_2
  create_bd_pin -dir I data_out_3
  create_bd_pin -dir I -from 39 -to 0 data_out_4
  create_bd_pin -dir I -from 39 -to 0 data_out_5
  create_bd_pin -dir O main_valid
  create_bd_pin -dir O -from 59 -to 0 mul_output
  create_bd_pin -dir O -from 59 -to 0 mul_output1
  create_bd_pin -dir O -from 59 -to 0 mul_output2
  create_bd_pin -dir O -from 59 -to 0 mul_output3
  create_bd_pin -dir O mul_output_valid
  create_bd_pin -dir O mul_output_valid1
  create_bd_pin -dir O mul_output_valid2
  create_bd_pin -dir O mul_output_valid3
  create_bd_pin -dir I -from 1 -to 0 qubit_in
  create_bd_pin -dir O -from 1 -to 0 qubit_out
  create_bd_pin -dir I -from 23 -to 0 thetha_3
  create_bd_pin -dir O -from 23 -to 0 thetha_cos
  create_bd_pin -dir O -from 23 -to 0 thetha_sin
  create_bd_pin -dir O thetha_valid_out
  create_bd_pin -dir O -from 63 -to 0 y
  create_bd_pin -dir O -from 63 -to 0 y1
  create_bd_pin -dir O -from 63 -to 0 y2
  create_bd_pin -dir O -from 63 -to 0 y3

  # Create instance: ICos, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name ICos
  if { [catch {set ICos [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ICos eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $ICos

  # Create instance: ISin, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name ISin
  if { [catch {set ISin [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ISin eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $ISin

  # Create instance: QCos, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name QCos
  if { [catch {set QCos [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $QCos eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $QCos

  # Create instance: QSin, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name QSin
  if { [catch {set QSin [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $QSin eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $QSin

  # Create instance: cos_thetha_0, and set properties
  set block_name cos_thetha
  set block_cell_name cos_thetha_0
  if { [catch {set cos_thetha_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $cos_thetha_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $cos_thetha_0

  # Create instance: main_output_0, and set properties
  set block_name main_output
  set block_cell_name main_output_0
  if { [catch {set main_output_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $main_output_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $main_output_0

  # Create instance: merger_2_0, and set properties
  set block_name merger_2
  set block_cell_name merger_2_0
  if { [catch {set merger_2_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger_2_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N0 {64} \
   CONFIG.N1 {64} \
 ] $merger_2_0

  # Create instance: not_gate_0, and set properties
  set block_name not_gate
  set block_cell_name not_gate_0
  if { [catch {set not_gate_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $not_gate_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: rotbypass_mux_I, and set properties
  set block_name param_mux
  set block_cell_name rotbypass_mux_I
  if { [catch {set rotbypass_mux_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $rotbypass_mux_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $rotbypass_mux_I

  # Create instance: rotbypass_mux_Q, and set properties
  set block_name param_mux
  set block_cell_name rotbypass_mux_Q
  if { [catch {set rotbypass_mux_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $rotbypass_mux_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $rotbypass_mux_Q

  # Create instance: sgn_extension_rot_I, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rot_I
  if { [catch {set sgn_extension_rot_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rot_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {61} \
   CONFIG.OW {64} \
 ] $sgn_extension_rot_I

  # Create instance: sgn_extension_rot_Q, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rot_Q
  if { [catch {set sgn_extension_rot_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rot_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {61} \
   CONFIG.OW {64} \
 ] $sgn_extension_rot_Q

  # Create instance: sgn_extension_rotbypass_I, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rotbypass_I
  if { [catch {set sgn_extension_rotbypass_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rotbypass_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {40} \
   CONFIG.OW {64} \
 ] $sgn_extension_rotbypass_I

  # Create instance: sgn_extension_rotbypass_Q, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rotbypass_Q
  if { [catch {set sgn_extension_rotbypass_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rotbypass_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {40} \
   CONFIG.OW {64} \
 ] $sgn_extension_rotbypass_Q

  # Create instance: sin_thetha_0, and set properties
  set block_name sin_thetha
  set block_cell_name sin_thetha_0
  if { [catch {set sin_thetha_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sin_thetha_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $sin_thetha_0

  # Create instance: thetha_for_sin_cos1_0, and set properties
  set block_name thetha_for_sin_cos1
  set block_cell_name thetha_for_sin_cos1_0
  if { [catch {set thetha_for_sin_cos1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $thetha_for_sin_cos1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $thetha_for_sin_cos1_0

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $xlconstant_0

  # Create port connections
  connect_bd_net -net ICos_mul_output [get_bd_pins mul_output] [get_bd_pins ICos/mul_output] [get_bd_pins main_output_0/I_cos]
  connect_bd_net -net ICos_mul_output_valid [get_bd_pins mul_output_valid] [get_bd_pins ICos/mul_output_valid] [get_bd_pins main_output_0/I_cos_valid]
  connect_bd_net -net ISin_mul_output [get_bd_pins mul_output2] [get_bd_pins ISin/mul_output] [get_bd_pins main_output_0/I_sin]
  connect_bd_net -net ISin_mul_output_valid [get_bd_pins mul_output_valid2] [get_bd_pins ISin/mul_output_valid] [get_bd_pins main_output_0/I_sin_valid]
  connect_bd_net -net QCos_mul_output [get_bd_pins mul_output1] [get_bd_pins QCos/mul_output] [get_bd_pins main_output_0/Q_cos]
  connect_bd_net -net QCos_mul_output_valid [get_bd_pins mul_output_valid1] [get_bd_pins QCos/mul_output_valid] [get_bd_pins main_output_0/Q_cos_valid]
  connect_bd_net -net QSin_mul_output [get_bd_pins mul_output3] [get_bd_pins QSin/mul_output] [get_bd_pins main_output_0/Q_sin]
  connect_bd_net -net QSin_mul_output_valid [get_bd_pins mul_output_valid3] [get_bd_pins QSin/mul_output_valid] [get_bd_pins main_output_0/Q_sin_valid]
  connect_bd_net -net a_0_1 [get_bd_pins a_0] [get_bd_pins not_gate_0/a] [get_bd_pins rotbypass_mux_I/sel] [get_bd_pins rotbypass_mux_Q/sel]
  connect_bd_net -net arctan_enable_0_1 [get_bd_pins ICos/mul_enable] [get_bd_pins ISin/mul_enable] [get_bd_pins QCos/mul_enable] [get_bd_pins QSin/mul_enable] [get_bd_pins cos_thetha_0/cos_thetha_enable] [get_bd_pins not_gate_0/out1] [get_bd_pins sin_thetha_0/cos_thetha_enable]
  connect_bd_net -net cos_thetha_0_I_mul_out [get_bd_pins I_mul_out] [get_bd_pins ICos/Iin] [get_bd_pins ISin/Iin] [get_bd_pins cos_thetha_0/I_mul_out]
  connect_bd_net -net cos_thetha_0_cos_thetha [get_bd_pins cos_thetha] [get_bd_pins ICos/cos_thethain] [get_bd_pins QCos/cos_thethain] [get_bd_pins cos_thetha_0/cos_thetha]
  connect_bd_net -net cos_thetha_0_cos_thetha_valid_out [get_bd_pins cos_thetha_valid_out] [get_bd_pins ICos/cos_valid] [get_bd_pins QCos/cos_valid] [get_bd_pins cos_thetha_0/cos_thetha_valid_out]
  connect_bd_net -net fir_bypass_mux_I1_data_out [get_bd_pins data_out_2] [get_bd_pins thetha_for_sin_cos1_0/I_valid]
  connect_bd_net -net fir_bypass_mux_I_data_out [get_bd_pins data_out_5] [get_bd_pins sgn_extension_rotbypass_I/a] [get_bd_pins thetha_for_sin_cos1_0/I_in]
  connect_bd_net -net fir_bypass_mux_Q1_data_out [get_bd_pins data_out_3] [get_bd_pins thetha_for_sin_cos1_0/Q_valid]
  connect_bd_net -net fir_bypass_mux_Q_data_out [get_bd_pins data_out_4] [get_bd_pins sgn_extension_rotbypass_Q/a] [get_bd_pins thetha_for_sin_cos1_0/Q_in]
  connect_bd_net -net main_output_0_O1 [get_bd_pins O1] [get_bd_pins main_output_0/O1] [get_bd_pins sgn_extension_rot_I/a]
  connect_bd_net -net main_output_0_O2 [get_bd_pins O2] [get_bd_pins main_output_0/O2] [get_bd_pins sgn_extension_rot_Q/a]
  connect_bd_net -net main_output_0_main_valid [get_bd_pins main_valid] [get_bd_pins main_output_0/main_valid]
  connect_bd_net -net merger_2_0_Data_out [get_bd_pins Data_out_6] [get_bd_pins merger_2_0/Data_out]
  connect_bd_net -net qubit_in_1 [get_bd_pins qubit_in] [get_bd_pins thetha_for_sin_cos1_0/qubit_in]
  connect_bd_net -net rotbypass_mux_I_data_out [get_bd_pins data_out] [get_bd_pins merger_2_0/L] [get_bd_pins rotbypass_mux_I/data_out]
  connect_bd_net -net rotbypass_mux_Q_data_out [get_bd_pins data_out1] [get_bd_pins merger_2_0/U] [get_bd_pins rotbypass_mux_Q/data_out]
  connect_bd_net -net sgn_extension_rot_I_y [get_bd_pins y] [get_bd_pins rotbypass_mux_I/data2] [get_bd_pins sgn_extension_rot_I/y]
  connect_bd_net -net sgn_extension_rot_Q_y [get_bd_pins y2] [get_bd_pins rotbypass_mux_Q/data2] [get_bd_pins sgn_extension_rot_Q/y]
  connect_bd_net -net sgn_extension_rotbypass_I_y [get_bd_pins y1] [get_bd_pins rotbypass_mux_I/data1] [get_bd_pins sgn_extension_rotbypass_I/y]
  connect_bd_net -net sgn_extension_rotbypass_Q_y [get_bd_pins y3] [get_bd_pins rotbypass_mux_Q/data1] [get_bd_pins sgn_extension_rotbypass_Q/y]
  connect_bd_net -net sin_thetha_0_I_mul_out [get_bd_pins I_mul_out1] [get_bd_pins QCos/Iin] [get_bd_pins QSin/Iin] [get_bd_pins sin_thetha_0/I_mul_out]
  connect_bd_net -net sin_thetha_0_cos_thetha [get_bd_pins cos_thetha1] [get_bd_pins ISin/cos_thethain] [get_bd_pins QSin/cos_thethain] [get_bd_pins sin_thetha_0/cos_thetha]
  connect_bd_net -net sin_thetha_0_cos_thetha_valid_out [get_bd_pins cos_thetha_valid_out1] [get_bd_pins ISin/cos_valid] [get_bd_pins QSin/cos_valid] [get_bd_pins sin_thetha_0/cos_thetha_valid_out]
  connect_bd_net -net thetha_3_1 [get_bd_pins thetha_3] [get_bd_pins thetha_for_sin_cos1_0/thetha]
  connect_bd_net -net thetha_for_sin_cos1_0_I_out [get_bd_pins I_out] [get_bd_pins cos_thetha_0/I_m] [get_bd_pins thetha_for_sin_cos1_0/I_out]
  connect_bd_net -net thetha_for_sin_cos1_0_Q_out [get_bd_pins Q_out] [get_bd_pins sin_thetha_0/I_m] [get_bd_pins thetha_for_sin_cos1_0/Q_out]
  connect_bd_net -net thetha_for_sin_cos1_0_qubit_out [get_bd_pins qubit_out] [get_bd_pins cos_thetha_0/qubit] [get_bd_pins sin_thetha_0/qubit] [get_bd_pins thetha_for_sin_cos1_0/qubit_out]
  connect_bd_net -net thetha_for_sin_cos1_0_thetha_cos [get_bd_pins thetha_cos] [get_bd_pins cos_thetha_0/thetha] [get_bd_pins thetha_for_sin_cos1_0/thetha_cos]
  connect_bd_net -net thetha_for_sin_cos1_0_thetha_sin [get_bd_pins thetha_sin] [get_bd_pins sin_thetha_0/thetha] [get_bd_pins thetha_for_sin_cos1_0/thetha_sin]
  connect_bd_net -net thetha_for_sin_cos1_0_thetha_valid_out [get_bd_pins thetha_valid_out] [get_bd_pins cos_thetha_0/valid] [get_bd_pins sin_thetha_0/valid] [get_bd_pins thetha_for_sin_cos1_0/thetha_valid_out]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins ICos/clk] [get_bd_pins ISin/clk] [get_bd_pins QCos/clk] [get_bd_pins QSin/clk] [get_bd_pins cos_thetha_0/clk] [get_bd_pins main_output_0/clk] [get_bd_pins sin_thetha_0/clk] [get_bd_pins thetha_for_sin_cos1_0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins ICos/rst] [get_bd_pins ISin/rst] [get_bd_pins QCos/rst] [get_bd_pins QSin/rst] [get_bd_pins cos_thetha_0/rst] [get_bd_pins main_output_0/rst] [get_bd_pins sin_thetha_0/rst] [get_bd_pins thetha_for_sin_cos1_0/rst] [get_bd_pins xlconstant_0/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Filtering
proc create_hier_cell_Filtering_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Filtering_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 63 -to 0 I
  create_bd_pin -dir I -from 63 -to 0 Q
  create_bd_pin -dir I a
  create_bd_pin -dir I b
  create_bd_pin -dir I b1
  create_bd_pin -dir I -type clk clk_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_1
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_1
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_1
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_1
  create_bd_pin -dir I -from 15 -to 0 coeff_b_1
  create_bd_pin -dir O -from 39 -to 0 data_out_0
  create_bd_pin -dir O -from 39 -to 0 data_out_0_0
  create_bd_pin -dir O -from 0 -to 0 data_out_1
  create_bd_pin -dir O -from 0 -to 0 data_out_1_0
  create_bd_pin -dir O -from 0 -to 0 data_out_2
  create_bd_pin -dir O -from 0 -to 0 data_out_3
  create_bd_pin -dir O -from 39 -to 0 data_out_4
  create_bd_pin -dir O -from 39 -to 0 data_out_5
  create_bd_pin -dir O -from 39 -to 0 filter_op_0
  create_bd_pin -dir O -from 39 -to 0 filter_op_0_0
  create_bd_pin -dir O op_valid_0
  create_bd_pin -dir O op_valid_0_0
  create_bd_pin -dir I sel
  create_bd_pin -dir I -from 1 -to 0 sel_0

  # Create instance: filter_mav_I
  create_hier_cell_filter_mav_I_3 $hier_obj filter_mav_I

  # Create instance: filter_mav_Q
  create_hier_cell_filter_mav_Q_3 $hier_obj filter_mav_Q

  # Create instance: fir_bypass_mux_I, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_I
  if { [catch {set fir_bypass_mux_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $fir_bypass_mux_I

  # Create instance: fir_bypass_mux_I1, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_I1
  if { [catch {set fir_bypass_mux_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $fir_bypass_mux_I1

  # Create instance: fir_bypass_mux_Q, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_Q
  if { [catch {set fir_bypass_mux_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $fir_bypass_mux_Q

  # Create instance: fir_bypass_mux_Q1, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_Q1
  if { [catch {set fir_bypass_mux_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $fir_bypass_mux_Q1

  # Create instance: sgn_extension_bypass_I, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_bypass_I
  if { [catch {set sgn_extension_bypass_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_bypass_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: sgn_extension_bypass_Q, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_bypass_Q
  if { [catch {set sgn_extension_bypass_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_bypass_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: slice_I, and set properties
  set slice_I [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 slice_I ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {15} \
   CONFIG.DIN_WIDTH {64} \
   CONFIG.DOUT_WIDTH {16} \
 ] $slice_I

  # Create instance: slice_Q, and set properties
  set slice_Q [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 slice_Q ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {15} \
   CONFIG.DIN_WIDTH {64} \
   CONFIG.DOUT_WIDTH {16} \
 ] $slice_Q

  # Create instance: trigger_valid_I, and set properties
  set block_name and_gate
  set block_cell_name trigger_valid_I
  if { [catch {set trigger_valid_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $trigger_valid_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: trigger_valid_Q, and set properties
  set block_name and_gate
  set block_cell_name trigger_valid_Q
  if { [catch {set trigger_valid_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $trigger_valid_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net coeff_a2b_1_1 [get_bd_pins coeff_a2b_1] [get_bd_pins filter_mav_I/coeff_a2b_1] [get_bd_pins filter_mav_Q/coeff_a2b_1]
  connect_bd_net -net coeff_a3b_1_1 [get_bd_pins coeff_a3b_1] [get_bd_pins filter_mav_I/coeff_a3b_1] [get_bd_pins filter_mav_Q/coeff_a3b_1]
  connect_bd_net -net coeff_a4_1_1 [get_bd_pins coeff_a4_1] [get_bd_pins filter_mav_I/coeff_a4_1] [get_bd_pins filter_mav_Q/coeff_a4_1]
  connect_bd_net -net coeff_ab_1_1 [get_bd_pins coeff_ab_1] [get_bd_pins filter_mav_I/coeff_ab_1] [get_bd_pins filter_mav_Q/coeff_ab_1]
  connect_bd_net -net coeff_b_1_1 [get_bd_pins coeff_b_1] [get_bd_pins filter_mav_I/coeff_b_1] [get_bd_pins filter_mav_Q/coeff_b_1]
  connect_bd_net -net data_valid_0_1 [get_bd_pins filter_mav_I/data_valid_0] [get_bd_pins fir_bypass_mux_I1/data1] [get_bd_pins trigger_valid_I/out1]
  connect_bd_net -net data_valid_0_2 [get_bd_pins filter_mav_Q/data_valid_0] [get_bd_pins fir_bypass_mux_Q1/data1] [get_bd_pins trigger_valid_Q/out1]
  connect_bd_net -net filter_mav_Q_data_out_0 [get_bd_pins data_out_0_0] [get_bd_pins filter_mav_Q/data_out_0]
  connect_bd_net -net filter_mav_Q_data_out_1 [get_bd_pins data_out_1_0] [get_bd_pins filter_mav_Q/data_out_1]
  connect_bd_net -net filter_mav_Q_filter_op_0 [get_bd_pins filter_op_0_0] [get_bd_pins filter_mav_Q/filter_op_0] [get_bd_pins fir_bypass_mux_Q/data2]
  connect_bd_net -net filter_mav_Q_op_valid_0 [get_bd_pins op_valid_0_0] [get_bd_pins filter_mav_Q/op_valid_0] [get_bd_pins fir_bypass_mux_Q1/data2]
  connect_bd_net -net filter_mav_data_out_0 [get_bd_pins data_out_0] [get_bd_pins filter_mav_I/data_out_0]
  connect_bd_net -net filter_mav_data_out_1 [get_bd_pins data_out_1] [get_bd_pins filter_mav_I/data_out_1]
  connect_bd_net -net fir_bypass_mux_I1_data_out [get_bd_pins data_out_2] [get_bd_pins fir_bypass_mux_I1/data_out]
  connect_bd_net -net fir_bypass_mux_I_data_out [get_bd_pins data_out_5] [get_bd_pins fir_bypass_mux_I/data_out]
  connect_bd_net -net fir_bypass_mux_Q1_data_out [get_bd_pins data_out_3] [get_bd_pins fir_bypass_mux_Q1/data_out]
  connect_bd_net -net fir_bypass_mux_Q_data_out [get_bd_pins data_out_4] [get_bd_pins fir_bypass_mux_Q/data_out]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins filter_op_0] [get_bd_pins filter_mav_I/filter_op_0] [get_bd_pins fir_bypass_mux_I/data2]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins op_valid_0] [get_bd_pins filter_mav_I/op_valid_0] [get_bd_pins fir_bypass_mux_I1/data2]
  connect_bd_net -net param_mux_0_data_out [get_bd_pins a] [get_bd_pins trigger_valid_I/a] [get_bd_pins trigger_valid_Q/a]
  connect_bd_net -net sel_0 [get_bd_pins sel] [get_bd_pins fir_bypass_mux_I/sel] [get_bd_pins fir_bypass_mux_I1/sel] [get_bd_pins fir_bypass_mux_Q/sel] [get_bd_pins fir_bypass_mux_Q1/sel]
  connect_bd_net -net sel_0_1 [get_bd_pins sel_0] [get_bd_pins filter_mav_I/sel_0] [get_bd_pins filter_mav_Q/sel_0]
  connect_bd_net -net sgn_extension_I_y [get_bd_pins fir_bypass_mux_I/data1] [get_bd_pins sgn_extension_bypass_I/y]
  connect_bd_net -net sgn_extension_bypass_Q_y [get_bd_pins fir_bypass_mux_Q/data1] [get_bd_pins sgn_extension_bypass_Q/y]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk_0] [get_bd_pins filter_mav_I/clk_0] [get_bd_pins filter_mav_Q/clk_0]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tdata [get_bd_pins I] [get_bd_pins slice_I/Din]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tvalid [get_bd_pins b1] [get_bd_pins trigger_valid_I/b]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tdata [get_bd_pins Q] [get_bd_pins slice_Q/Din]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tvalid [get_bd_pins b] [get_bd_pins trigger_valid_Q/b]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins filter_mav_I/ip_sample_0] [get_bd_pins sgn_extension_bypass_I/a] [get_bd_pins slice_I/Dout]
  connect_bd_net -net xlslice_1_Dout [get_bd_pins filter_mav_Q/ip_sample_0] [get_bd_pins sgn_extension_bypass_Q/a] [get_bd_pins slice_Q/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: R_Theta
proc create_hier_cell_R_Theta_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_R_Theta_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir O -from 127 -to 0 Data_out_6
  create_bd_pin -dir O -from 39 -to 0 I_mul_out
  create_bd_pin -dir O -from 39 -to 0 I_mul_out1
  create_bd_pin -dir O -from 39 -to 0 I_out
  create_bd_pin -dir O -from 60 -to 0 O1
  create_bd_pin -dir O -from 60 -to 0 O2
  create_bd_pin -dir O -from 39 -to 0 Q_out
  create_bd_pin -dir I a_0
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir O -from 19 -to 0 cos_thetha
  create_bd_pin -dir O -from 19 -to 0 cos_thetha1
  create_bd_pin -dir O cos_thetha_valid_out
  create_bd_pin -dir O cos_thetha_valid_out1
  create_bd_pin -dir O -from 63 -to 0 data_out
  create_bd_pin -dir O -from 63 -to 0 data_out1
  create_bd_pin -dir I data_out_2
  create_bd_pin -dir I data_out_3
  create_bd_pin -dir I -from 39 -to 0 data_out_4
  create_bd_pin -dir I -from 39 -to 0 data_out_5
  create_bd_pin -dir O main_valid
  create_bd_pin -dir O -from 59 -to 0 mul_output
  create_bd_pin -dir O -from 59 -to 0 mul_output1
  create_bd_pin -dir O -from 59 -to 0 mul_output2
  create_bd_pin -dir O -from 59 -to 0 mul_output3
  create_bd_pin -dir O mul_output_valid
  create_bd_pin -dir O mul_output_valid1
  create_bd_pin -dir O mul_output_valid2
  create_bd_pin -dir O mul_output_valid3
  create_bd_pin -dir I -from 1 -to 0 qubit_in
  create_bd_pin -dir O -from 1 -to 0 qubit_out
  create_bd_pin -dir I -from 23 -to 0 thetha_1
  create_bd_pin -dir O -from 23 -to 0 thetha_cos
  create_bd_pin -dir O -from 23 -to 0 thetha_sin
  create_bd_pin -dir O thetha_valid_out
  create_bd_pin -dir O -from 63 -to 0 y
  create_bd_pin -dir O -from 63 -to 0 y1
  create_bd_pin -dir O -from 63 -to 0 y2
  create_bd_pin -dir O -from 63 -to 0 y3

  # Create instance: ICos, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name ICos
  if { [catch {set ICos [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ICos eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $ICos

  # Create instance: ISin, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name ISin
  if { [catch {set ISin [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ISin eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $ISin

  # Create instance: QCos, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name QCos
  if { [catch {set QCos [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $QCos eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $QCos

  # Create instance: QSin, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name QSin
  if { [catch {set QSin [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $QSin eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $QSin

  # Create instance: cos_thetha_0, and set properties
  set block_name cos_thetha
  set block_cell_name cos_thetha_0
  if { [catch {set cos_thetha_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $cos_thetha_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $cos_thetha_0

  # Create instance: main_output_0, and set properties
  set block_name main_output
  set block_cell_name main_output_0
  if { [catch {set main_output_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $main_output_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $main_output_0

  # Create instance: merger_2_0, and set properties
  set block_name merger_2
  set block_cell_name merger_2_0
  if { [catch {set merger_2_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger_2_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N0 {64} \
   CONFIG.N1 {64} \
 ] $merger_2_0

  # Create instance: not_gate_0, and set properties
  set block_name not_gate
  set block_cell_name not_gate_0
  if { [catch {set not_gate_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $not_gate_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: rotbypass_mux_I, and set properties
  set block_name param_mux
  set block_cell_name rotbypass_mux_I
  if { [catch {set rotbypass_mux_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $rotbypass_mux_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $rotbypass_mux_I

  # Create instance: rotbypass_mux_Q, and set properties
  set block_name param_mux
  set block_cell_name rotbypass_mux_Q
  if { [catch {set rotbypass_mux_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $rotbypass_mux_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $rotbypass_mux_Q

  # Create instance: sgn_extension_rot_I, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rot_I
  if { [catch {set sgn_extension_rot_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rot_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {61} \
   CONFIG.OW {64} \
 ] $sgn_extension_rot_I

  # Create instance: sgn_extension_rot_Q, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rot_Q
  if { [catch {set sgn_extension_rot_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rot_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {61} \
   CONFIG.OW {64} \
 ] $sgn_extension_rot_Q

  # Create instance: sgn_extension_rotbypass_I, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rotbypass_I
  if { [catch {set sgn_extension_rotbypass_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rotbypass_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {40} \
   CONFIG.OW {64} \
 ] $sgn_extension_rotbypass_I

  # Create instance: sgn_extension_rotbypass_Q, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rotbypass_Q
  if { [catch {set sgn_extension_rotbypass_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rotbypass_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {40} \
   CONFIG.OW {64} \
 ] $sgn_extension_rotbypass_Q

  # Create instance: sin_thetha_0, and set properties
  set block_name sin_thetha
  set block_cell_name sin_thetha_0
  if { [catch {set sin_thetha_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sin_thetha_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $sin_thetha_0

  # Create instance: thetha_for_sin_cos1_0, and set properties
  set block_name thetha_for_sin_cos1
  set block_cell_name thetha_for_sin_cos1_0
  if { [catch {set thetha_for_sin_cos1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $thetha_for_sin_cos1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $thetha_for_sin_cos1_0

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $xlconstant_0

  # Create port connections
  connect_bd_net -net ICos_mul_output [get_bd_pins mul_output] [get_bd_pins ICos/mul_output] [get_bd_pins main_output_0/I_cos]
  connect_bd_net -net ICos_mul_output_valid [get_bd_pins mul_output_valid] [get_bd_pins ICos/mul_output_valid] [get_bd_pins main_output_0/I_cos_valid]
  connect_bd_net -net ISin_mul_output [get_bd_pins mul_output2] [get_bd_pins ISin/mul_output] [get_bd_pins main_output_0/I_sin]
  connect_bd_net -net ISin_mul_output_valid [get_bd_pins mul_output_valid2] [get_bd_pins ISin/mul_output_valid] [get_bd_pins main_output_0/I_sin_valid]
  connect_bd_net -net QCos_mul_output [get_bd_pins mul_output1] [get_bd_pins QCos/mul_output] [get_bd_pins main_output_0/Q_cos]
  connect_bd_net -net QCos_mul_output_valid [get_bd_pins mul_output_valid1] [get_bd_pins QCos/mul_output_valid] [get_bd_pins main_output_0/Q_cos_valid]
  connect_bd_net -net QSin_mul_output [get_bd_pins mul_output3] [get_bd_pins QSin/mul_output] [get_bd_pins main_output_0/Q_sin]
  connect_bd_net -net QSin_mul_output_valid [get_bd_pins mul_output_valid3] [get_bd_pins QSin/mul_output_valid] [get_bd_pins main_output_0/Q_sin_valid]
  connect_bd_net -net a_0_1 [get_bd_pins a_0] [get_bd_pins not_gate_0/a] [get_bd_pins rotbypass_mux_I/sel] [get_bd_pins rotbypass_mux_Q/sel]
  connect_bd_net -net arctan_enable_0_1 [get_bd_pins ICos/mul_enable] [get_bd_pins ISin/mul_enable] [get_bd_pins QCos/mul_enable] [get_bd_pins QSin/mul_enable] [get_bd_pins cos_thetha_0/cos_thetha_enable] [get_bd_pins not_gate_0/out1] [get_bd_pins sin_thetha_0/cos_thetha_enable]
  connect_bd_net -net cos_thetha_0_I_mul_out [get_bd_pins I_mul_out] [get_bd_pins ICos/Iin] [get_bd_pins ISin/Iin] [get_bd_pins cos_thetha_0/I_mul_out]
  connect_bd_net -net cos_thetha_0_cos_thetha [get_bd_pins cos_thetha] [get_bd_pins ICos/cos_thethain] [get_bd_pins QCos/cos_thethain] [get_bd_pins cos_thetha_0/cos_thetha]
  connect_bd_net -net cos_thetha_0_cos_thetha_valid_out [get_bd_pins cos_thetha_valid_out] [get_bd_pins ICos/cos_valid] [get_bd_pins QCos/cos_valid] [get_bd_pins cos_thetha_0/cos_thetha_valid_out]
  connect_bd_net -net fir_bypass_mux_I1_data_out [get_bd_pins data_out_2] [get_bd_pins thetha_for_sin_cos1_0/I_valid]
  connect_bd_net -net fir_bypass_mux_I_data_out [get_bd_pins data_out_5] [get_bd_pins sgn_extension_rotbypass_I/a] [get_bd_pins thetha_for_sin_cos1_0/I_in]
  connect_bd_net -net fir_bypass_mux_Q1_data_out [get_bd_pins data_out_3] [get_bd_pins thetha_for_sin_cos1_0/Q_valid]
  connect_bd_net -net fir_bypass_mux_Q_data_out [get_bd_pins data_out_4] [get_bd_pins sgn_extension_rotbypass_Q/a] [get_bd_pins thetha_for_sin_cos1_0/Q_in]
  connect_bd_net -net main_output_0_O1 [get_bd_pins O1] [get_bd_pins main_output_0/O1] [get_bd_pins sgn_extension_rot_I/a]
  connect_bd_net -net main_output_0_O2 [get_bd_pins O2] [get_bd_pins main_output_0/O2] [get_bd_pins sgn_extension_rot_Q/a]
  connect_bd_net -net main_output_0_main_valid [get_bd_pins main_valid] [get_bd_pins main_output_0/main_valid]
  connect_bd_net -net merger_2_0_Data_out [get_bd_pins Data_out_6] [get_bd_pins merger_2_0/Data_out]
  connect_bd_net -net qubit_in_1 [get_bd_pins qubit_in] [get_bd_pins thetha_for_sin_cos1_0/qubit_in]
  connect_bd_net -net rotbypass_mux_I_data_out [get_bd_pins data_out] [get_bd_pins merger_2_0/L] [get_bd_pins rotbypass_mux_I/data_out]
  connect_bd_net -net rotbypass_mux_Q_data_out [get_bd_pins data_out1] [get_bd_pins merger_2_0/U] [get_bd_pins rotbypass_mux_Q/data_out]
  connect_bd_net -net sgn_extension_rot_I_y [get_bd_pins y] [get_bd_pins rotbypass_mux_I/data2] [get_bd_pins sgn_extension_rot_I/y]
  connect_bd_net -net sgn_extension_rot_Q_y [get_bd_pins y2] [get_bd_pins rotbypass_mux_Q/data2] [get_bd_pins sgn_extension_rot_Q/y]
  connect_bd_net -net sgn_extension_rotbypass_I_y [get_bd_pins y1] [get_bd_pins rotbypass_mux_I/data1] [get_bd_pins sgn_extension_rotbypass_I/y]
  connect_bd_net -net sgn_extension_rotbypass_Q_y [get_bd_pins y3] [get_bd_pins rotbypass_mux_Q/data1] [get_bd_pins sgn_extension_rotbypass_Q/y]
  connect_bd_net -net sin_thetha_0_I_mul_out [get_bd_pins I_mul_out1] [get_bd_pins QCos/Iin] [get_bd_pins QSin/Iin] [get_bd_pins sin_thetha_0/I_mul_out]
  connect_bd_net -net sin_thetha_0_cos_thetha [get_bd_pins cos_thetha1] [get_bd_pins ISin/cos_thethain] [get_bd_pins QSin/cos_thethain] [get_bd_pins sin_thetha_0/cos_thetha]
  connect_bd_net -net sin_thetha_0_cos_thetha_valid_out [get_bd_pins cos_thetha_valid_out1] [get_bd_pins ISin/cos_valid] [get_bd_pins QSin/cos_valid] [get_bd_pins sin_thetha_0/cos_thetha_valid_out]
  connect_bd_net -net thetha_1_1 [get_bd_pins thetha_1] [get_bd_pins thetha_for_sin_cos1_0/thetha]
  connect_bd_net -net thetha_for_sin_cos1_0_I_out [get_bd_pins I_out] [get_bd_pins cos_thetha_0/I_m] [get_bd_pins thetha_for_sin_cos1_0/I_out]
  connect_bd_net -net thetha_for_sin_cos1_0_Q_out [get_bd_pins Q_out] [get_bd_pins sin_thetha_0/I_m] [get_bd_pins thetha_for_sin_cos1_0/Q_out]
  connect_bd_net -net thetha_for_sin_cos1_0_qubit_out [get_bd_pins qubit_out] [get_bd_pins cos_thetha_0/qubit] [get_bd_pins sin_thetha_0/qubit] [get_bd_pins thetha_for_sin_cos1_0/qubit_out]
  connect_bd_net -net thetha_for_sin_cos1_0_thetha_cos [get_bd_pins thetha_cos] [get_bd_pins cos_thetha_0/thetha] [get_bd_pins thetha_for_sin_cos1_0/thetha_cos]
  connect_bd_net -net thetha_for_sin_cos1_0_thetha_sin [get_bd_pins thetha_sin] [get_bd_pins sin_thetha_0/thetha] [get_bd_pins thetha_for_sin_cos1_0/thetha_sin]
  connect_bd_net -net thetha_for_sin_cos1_0_thetha_valid_out [get_bd_pins thetha_valid_out] [get_bd_pins cos_thetha_0/valid] [get_bd_pins sin_thetha_0/valid] [get_bd_pins thetha_for_sin_cos1_0/thetha_valid_out]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins ICos/clk] [get_bd_pins ISin/clk] [get_bd_pins QCos/clk] [get_bd_pins QSin/clk] [get_bd_pins cos_thetha_0/clk] [get_bd_pins main_output_0/clk] [get_bd_pins sin_thetha_0/clk] [get_bd_pins thetha_for_sin_cos1_0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins ICos/rst] [get_bd_pins ISin/rst] [get_bd_pins QCos/rst] [get_bd_pins QSin/rst] [get_bd_pins cos_thetha_0/rst] [get_bd_pins main_output_0/rst] [get_bd_pins sin_thetha_0/rst] [get_bd_pins thetha_for_sin_cos1_0/rst] [get_bd_pins xlconstant_0/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Filtering
proc create_hier_cell_Filtering_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Filtering_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 63 -to 0 I
  create_bd_pin -dir I -from 63 -to 0 Q
  create_bd_pin -dir I a
  create_bd_pin -dir I b
  create_bd_pin -dir I b1
  create_bd_pin -dir I -type clk clk_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_2
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_2
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_2
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_2
  create_bd_pin -dir I -from 15 -to 0 coeff_b_2
  create_bd_pin -dir O -from 39 -to 0 data_out_0
  create_bd_pin -dir O -from 39 -to 0 data_out_0_0
  create_bd_pin -dir O -from 0 -to 0 data_out_1
  create_bd_pin -dir O -from 0 -to 0 data_out_1_0
  create_bd_pin -dir O -from 0 -to 0 data_out_2
  create_bd_pin -dir O -from 0 -to 0 data_out_3
  create_bd_pin -dir O -from 39 -to 0 data_out_4
  create_bd_pin -dir O -from 39 -to 0 data_out_5
  create_bd_pin -dir O -from 39 -to 0 filter_op_0
  create_bd_pin -dir O -from 39 -to 0 filter_op_0_0
  create_bd_pin -dir O op_valid_0
  create_bd_pin -dir O op_valid_0_0
  create_bd_pin -dir I sel
  create_bd_pin -dir I -from 1 -to 0 sel_0

  # Create instance: filter_mav_I
  create_hier_cell_filter_mav_I_2 $hier_obj filter_mav_I

  # Create instance: filter_mav_Q
  create_hier_cell_filter_mav_Q_2 $hier_obj filter_mav_Q

  # Create instance: fir_bypass_mux_I, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_I
  if { [catch {set fir_bypass_mux_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $fir_bypass_mux_I

  # Create instance: fir_bypass_mux_I1, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_I1
  if { [catch {set fir_bypass_mux_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $fir_bypass_mux_I1

  # Create instance: fir_bypass_mux_Q, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_Q
  if { [catch {set fir_bypass_mux_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $fir_bypass_mux_Q

  # Create instance: fir_bypass_mux_Q1, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_Q1
  if { [catch {set fir_bypass_mux_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $fir_bypass_mux_Q1

  # Create instance: sgn_extension_bypass_I, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_bypass_I
  if { [catch {set sgn_extension_bypass_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_bypass_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: sgn_extension_bypass_Q, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_bypass_Q
  if { [catch {set sgn_extension_bypass_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_bypass_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: slice_I, and set properties
  set slice_I [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 slice_I ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {15} \
   CONFIG.DIN_WIDTH {64} \
   CONFIG.DOUT_WIDTH {16} \
 ] $slice_I

  # Create instance: slice_Q, and set properties
  set slice_Q [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 slice_Q ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {15} \
   CONFIG.DIN_WIDTH {64} \
   CONFIG.DOUT_WIDTH {16} \
 ] $slice_Q

  # Create instance: trigger_valid_I, and set properties
  set block_name and_gate
  set block_cell_name trigger_valid_I
  if { [catch {set trigger_valid_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $trigger_valid_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: trigger_valid_Q, and set properties
  set block_name and_gate
  set block_cell_name trigger_valid_Q
  if { [catch {set trigger_valid_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $trigger_valid_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net coeff_a2b_2_1 [get_bd_pins coeff_a2b_2] [get_bd_pins filter_mav_I/coeff_a2b_2] [get_bd_pins filter_mav_Q/coeff_a2b_2]
  connect_bd_net -net coeff_a3b_2_1 [get_bd_pins coeff_a3b_2] [get_bd_pins filter_mav_I/coeff_a3b_2] [get_bd_pins filter_mav_Q/coeff_a3b_2]
  connect_bd_net -net coeff_a4_2_1 [get_bd_pins coeff_a4_2] [get_bd_pins filter_mav_I/coeff_a4_2] [get_bd_pins filter_mav_Q/coeff_a4_2]
  connect_bd_net -net coeff_ab_2_1 [get_bd_pins coeff_ab_2] [get_bd_pins filter_mav_I/coeff_ab_2] [get_bd_pins filter_mav_Q/coeff_ab_2]
  connect_bd_net -net coeff_b_2_1 [get_bd_pins coeff_b_2] [get_bd_pins filter_mav_I/coeff_b_2] [get_bd_pins filter_mav_Q/coeff_b_2]
  connect_bd_net -net data_valid_0_1 [get_bd_pins filter_mav_I/data_valid_0] [get_bd_pins fir_bypass_mux_I1/data1] [get_bd_pins trigger_valid_I/out1]
  connect_bd_net -net data_valid_0_2 [get_bd_pins filter_mav_Q/data_valid_0] [get_bd_pins fir_bypass_mux_Q1/data1] [get_bd_pins trigger_valid_Q/out1]
  connect_bd_net -net filter_mav_Q_data_out_0 [get_bd_pins data_out_0_0] [get_bd_pins filter_mav_Q/data_out_0]
  connect_bd_net -net filter_mav_Q_data_out_1 [get_bd_pins data_out_1_0] [get_bd_pins filter_mav_Q/data_out_1]
  connect_bd_net -net filter_mav_Q_filter_op_0 [get_bd_pins filter_op_0_0] [get_bd_pins filter_mav_Q/filter_op_0] [get_bd_pins fir_bypass_mux_Q/data2]
  connect_bd_net -net filter_mav_Q_op_valid_0 [get_bd_pins op_valid_0_0] [get_bd_pins filter_mav_Q/op_valid_0] [get_bd_pins fir_bypass_mux_Q1/data2]
  connect_bd_net -net filter_mav_data_out_0 [get_bd_pins data_out_0] [get_bd_pins filter_mav_I/data_out_0]
  connect_bd_net -net filter_mav_data_out_1 [get_bd_pins data_out_1] [get_bd_pins filter_mav_I/data_out_1]
  connect_bd_net -net fir_bypass_mux_I1_data_out [get_bd_pins data_out_2] [get_bd_pins fir_bypass_mux_I1/data_out]
  connect_bd_net -net fir_bypass_mux_I_data_out [get_bd_pins data_out_5] [get_bd_pins fir_bypass_mux_I/data_out]
  connect_bd_net -net fir_bypass_mux_Q1_data_out [get_bd_pins data_out_3] [get_bd_pins fir_bypass_mux_Q1/data_out]
  connect_bd_net -net fir_bypass_mux_Q_data_out [get_bd_pins data_out_4] [get_bd_pins fir_bypass_mux_Q/data_out]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins filter_op_0] [get_bd_pins filter_mav_I/filter_op_0] [get_bd_pins fir_bypass_mux_I/data2]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins op_valid_0] [get_bd_pins filter_mav_I/op_valid_0] [get_bd_pins fir_bypass_mux_I1/data2]
  connect_bd_net -net param_mux_0_data_out [get_bd_pins a] [get_bd_pins trigger_valid_I/a] [get_bd_pins trigger_valid_Q/a]
  connect_bd_net -net sel_0 [get_bd_pins sel] [get_bd_pins fir_bypass_mux_I/sel] [get_bd_pins fir_bypass_mux_I1/sel] [get_bd_pins fir_bypass_mux_Q/sel] [get_bd_pins fir_bypass_mux_Q1/sel]
  connect_bd_net -net sel_0_1 [get_bd_pins sel_0] [get_bd_pins filter_mav_I/sel_0] [get_bd_pins filter_mav_Q/sel_0]
  connect_bd_net -net sgn_extension_I_y [get_bd_pins fir_bypass_mux_I/data1] [get_bd_pins sgn_extension_bypass_I/y]
  connect_bd_net -net sgn_extension_bypass_Q_y [get_bd_pins fir_bypass_mux_Q/data1] [get_bd_pins sgn_extension_bypass_Q/y]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk_0] [get_bd_pins filter_mav_I/clk_0] [get_bd_pins filter_mav_Q/clk_0]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tdata [get_bd_pins I] [get_bd_pins slice_I/Din]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tvalid [get_bd_pins b1] [get_bd_pins trigger_valid_I/b]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tdata [get_bd_pins Q] [get_bd_pins slice_Q/Din]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tvalid [get_bd_pins b] [get_bd_pins trigger_valid_Q/b]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins filter_mav_I/ip_sample_0] [get_bd_pins sgn_extension_bypass_I/a] [get_bd_pins slice_I/Dout]
  connect_bd_net -net xlslice_1_Dout [get_bd_pins filter_mav_Q/ip_sample_0] [get_bd_pins sgn_extension_bypass_Q/a] [get_bd_pins slice_Q/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: R_Theta
proc create_hier_cell_R_Theta_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_R_Theta_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir O -from 127 -to 0 Data_out_6
  create_bd_pin -dir O -from 39 -to 0 I_mul_out
  create_bd_pin -dir O -from 39 -to 0 I_mul_out1
  create_bd_pin -dir O -from 39 -to 0 I_out
  create_bd_pin -dir O -from 60 -to 0 O1
  create_bd_pin -dir O -from 60 -to 0 O2
  create_bd_pin -dir O -from 39 -to 0 Q_out
  create_bd_pin -dir I a_0
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir O -from 19 -to 0 cos_thetha
  create_bd_pin -dir O -from 19 -to 0 cos_thetha1
  create_bd_pin -dir O cos_thetha_valid_out
  create_bd_pin -dir O cos_thetha_valid_out1
  create_bd_pin -dir O -from 63 -to 0 data_out
  create_bd_pin -dir O -from 63 -to 0 data_out1
  create_bd_pin -dir I data_out_2
  create_bd_pin -dir I data_out_3
  create_bd_pin -dir I -from 39 -to 0 data_out_4
  create_bd_pin -dir I -from 39 -to 0 data_out_5
  create_bd_pin -dir O main_valid
  create_bd_pin -dir O -from 59 -to 0 mul_output
  create_bd_pin -dir O -from 59 -to 0 mul_output1
  create_bd_pin -dir O -from 59 -to 0 mul_output2
  create_bd_pin -dir O -from 59 -to 0 mul_output3
  create_bd_pin -dir O mul_output_valid
  create_bd_pin -dir O mul_output_valid1
  create_bd_pin -dir O mul_output_valid2
  create_bd_pin -dir O mul_output_valid3
  create_bd_pin -dir I -from 1 -to 0 qubit_in
  create_bd_pin -dir O -from 1 -to 0 qubit_out
  create_bd_pin -dir I -from 23 -to 0 thetha_0
  create_bd_pin -dir O -from 23 -to 0 thetha_cos
  create_bd_pin -dir O -from 23 -to 0 thetha_sin
  create_bd_pin -dir O thetha_valid_out
  create_bd_pin -dir O -from 63 -to 0 y
  create_bd_pin -dir O -from 63 -to 0 y1
  create_bd_pin -dir O -from 63 -to 0 y2
  create_bd_pin -dir O -from 63 -to 0 y3

  # Create instance: ICos, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name ICos
  if { [catch {set ICos [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ICos eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $ICos

  # Create instance: ISin, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name ISin
  if { [catch {set ISin [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ISin eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $ISin

  # Create instance: QCos, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name QCos
  if { [catch {set QCos [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $QCos eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $QCos

  # Create instance: QSin, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name QSin
  if { [catch {set QSin [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $QSin eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $QSin

  # Create instance: cos_thetha_0, and set properties
  set block_name cos_thetha
  set block_cell_name cos_thetha_0
  if { [catch {set cos_thetha_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $cos_thetha_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $cos_thetha_0

  # Create instance: main_output_0, and set properties
  set block_name main_output
  set block_cell_name main_output_0
  if { [catch {set main_output_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $main_output_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $main_output_0

  # Create instance: merger_2_0, and set properties
  set block_name merger_2
  set block_cell_name merger_2_0
  if { [catch {set merger_2_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger_2_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N0 {64} \
   CONFIG.N1 {64} \
 ] $merger_2_0

  # Create instance: not_gate_0, and set properties
  set block_name not_gate
  set block_cell_name not_gate_0
  if { [catch {set not_gate_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $not_gate_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: rotbypass_mux_I, and set properties
  set block_name param_mux
  set block_cell_name rotbypass_mux_I
  if { [catch {set rotbypass_mux_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $rotbypass_mux_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $rotbypass_mux_I

  # Create instance: rotbypass_mux_Q, and set properties
  set block_name param_mux
  set block_cell_name rotbypass_mux_Q
  if { [catch {set rotbypass_mux_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $rotbypass_mux_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $rotbypass_mux_Q

  # Create instance: sgn_extension_rot_I, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rot_I
  if { [catch {set sgn_extension_rot_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rot_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {61} \
   CONFIG.OW {64} \
 ] $sgn_extension_rot_I

  # Create instance: sgn_extension_rot_Q, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rot_Q
  if { [catch {set sgn_extension_rot_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rot_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {61} \
   CONFIG.OW {64} \
 ] $sgn_extension_rot_Q

  # Create instance: sgn_extension_rotbypass_I, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rotbypass_I
  if { [catch {set sgn_extension_rotbypass_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rotbypass_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {40} \
   CONFIG.OW {64} \
 ] $sgn_extension_rotbypass_I

  # Create instance: sgn_extension_rotbypass_Q, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rotbypass_Q
  if { [catch {set sgn_extension_rotbypass_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rotbypass_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {40} \
   CONFIG.OW {64} \
 ] $sgn_extension_rotbypass_Q

  # Create instance: sin_thetha_0, and set properties
  set block_name sin_thetha
  set block_cell_name sin_thetha_0
  if { [catch {set sin_thetha_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sin_thetha_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $sin_thetha_0

  # Create instance: thetha_for_sin_cos1_0, and set properties
  set block_name thetha_for_sin_cos1
  set block_cell_name thetha_for_sin_cos1_0
  if { [catch {set thetha_for_sin_cos1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $thetha_for_sin_cos1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $thetha_for_sin_cos1_0

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $xlconstant_0

  # Create port connections
  connect_bd_net -net ICos_mul_output [get_bd_pins mul_output] [get_bd_pins ICos/mul_output] [get_bd_pins main_output_0/I_cos]
  connect_bd_net -net ICos_mul_output_valid [get_bd_pins mul_output_valid] [get_bd_pins ICos/mul_output_valid] [get_bd_pins main_output_0/I_cos_valid]
  connect_bd_net -net ISin_mul_output [get_bd_pins mul_output2] [get_bd_pins ISin/mul_output] [get_bd_pins main_output_0/I_sin]
  connect_bd_net -net ISin_mul_output_valid [get_bd_pins mul_output_valid2] [get_bd_pins ISin/mul_output_valid] [get_bd_pins main_output_0/I_sin_valid]
  connect_bd_net -net QCos_mul_output [get_bd_pins mul_output1] [get_bd_pins QCos/mul_output] [get_bd_pins main_output_0/Q_cos]
  connect_bd_net -net QCos_mul_output_valid [get_bd_pins mul_output_valid1] [get_bd_pins QCos/mul_output_valid] [get_bd_pins main_output_0/Q_cos_valid]
  connect_bd_net -net QSin_mul_output [get_bd_pins mul_output3] [get_bd_pins QSin/mul_output] [get_bd_pins main_output_0/Q_sin]
  connect_bd_net -net QSin_mul_output_valid [get_bd_pins mul_output_valid3] [get_bd_pins QSin/mul_output_valid] [get_bd_pins main_output_0/Q_sin_valid]
  connect_bd_net -net a_0_1 [get_bd_pins a_0] [get_bd_pins not_gate_0/a] [get_bd_pins rotbypass_mux_I/sel] [get_bd_pins rotbypass_mux_Q/sel]
  connect_bd_net -net arctan_enable_0_1 [get_bd_pins ICos/mul_enable] [get_bd_pins ISin/mul_enable] [get_bd_pins QCos/mul_enable] [get_bd_pins QSin/mul_enable] [get_bd_pins cos_thetha_0/cos_thetha_enable] [get_bd_pins not_gate_0/out1] [get_bd_pins sin_thetha_0/cos_thetha_enable]
  connect_bd_net -net cos_thetha_0_I_mul_out [get_bd_pins I_mul_out] [get_bd_pins ICos/Iin] [get_bd_pins ISin/Iin] [get_bd_pins cos_thetha_0/I_mul_out]
  connect_bd_net -net cos_thetha_0_cos_thetha [get_bd_pins cos_thetha] [get_bd_pins ICos/cos_thethain] [get_bd_pins QCos/cos_thethain] [get_bd_pins cos_thetha_0/cos_thetha]
  connect_bd_net -net cos_thetha_0_cos_thetha_valid_out [get_bd_pins cos_thetha_valid_out] [get_bd_pins ICos/cos_valid] [get_bd_pins QCos/cos_valid] [get_bd_pins cos_thetha_0/cos_thetha_valid_out]
  connect_bd_net -net fir_bypass_mux_I1_data_out [get_bd_pins data_out_2] [get_bd_pins thetha_for_sin_cos1_0/I_valid]
  connect_bd_net -net fir_bypass_mux_I_data_out [get_bd_pins data_out_5] [get_bd_pins sgn_extension_rotbypass_I/a] [get_bd_pins thetha_for_sin_cos1_0/I_in]
  connect_bd_net -net fir_bypass_mux_Q1_data_out [get_bd_pins data_out_3] [get_bd_pins thetha_for_sin_cos1_0/Q_valid]
  connect_bd_net -net fir_bypass_mux_Q_data_out [get_bd_pins data_out_4] [get_bd_pins sgn_extension_rotbypass_Q/a] [get_bd_pins thetha_for_sin_cos1_0/Q_in]
  connect_bd_net -net main_output_0_O1 [get_bd_pins O1] [get_bd_pins main_output_0/O1] [get_bd_pins sgn_extension_rot_I/a]
  connect_bd_net -net main_output_0_O2 [get_bd_pins O2] [get_bd_pins main_output_0/O2] [get_bd_pins sgn_extension_rot_Q/a]
  connect_bd_net -net main_output_0_main_valid [get_bd_pins main_valid] [get_bd_pins main_output_0/main_valid]
  connect_bd_net -net merger_2_0_Data_out [get_bd_pins Data_out_6] [get_bd_pins merger_2_0/Data_out]
  connect_bd_net -net qubit_in_1 [get_bd_pins qubit_in] [get_bd_pins thetha_for_sin_cos1_0/qubit_in]
  connect_bd_net -net rotbypass_mux_I_data_out [get_bd_pins data_out] [get_bd_pins merger_2_0/L] [get_bd_pins rotbypass_mux_I/data_out]
  connect_bd_net -net rotbypass_mux_Q_data_out [get_bd_pins data_out1] [get_bd_pins merger_2_0/U] [get_bd_pins rotbypass_mux_Q/data_out]
  connect_bd_net -net sgn_extension_rot_I_y [get_bd_pins y] [get_bd_pins rotbypass_mux_I/data2] [get_bd_pins sgn_extension_rot_I/y]
  connect_bd_net -net sgn_extension_rot_Q_y [get_bd_pins y2] [get_bd_pins rotbypass_mux_Q/data2] [get_bd_pins sgn_extension_rot_Q/y]
  connect_bd_net -net sgn_extension_rotbypass_I_y [get_bd_pins y1] [get_bd_pins rotbypass_mux_I/data1] [get_bd_pins sgn_extension_rotbypass_I/y]
  connect_bd_net -net sgn_extension_rotbypass_Q_y [get_bd_pins y3] [get_bd_pins rotbypass_mux_Q/data1] [get_bd_pins sgn_extension_rotbypass_Q/y]
  connect_bd_net -net sin_thetha_0_I_mul_out [get_bd_pins I_mul_out1] [get_bd_pins QCos/Iin] [get_bd_pins QSin/Iin] [get_bd_pins sin_thetha_0/I_mul_out]
  connect_bd_net -net sin_thetha_0_cos_thetha [get_bd_pins cos_thetha1] [get_bd_pins ISin/cos_thethain] [get_bd_pins QSin/cos_thethain] [get_bd_pins sin_thetha_0/cos_thetha]
  connect_bd_net -net sin_thetha_0_cos_thetha_valid_out [get_bd_pins cos_thetha_valid_out1] [get_bd_pins ISin/cos_valid] [get_bd_pins QSin/cos_valid] [get_bd_pins sin_thetha_0/cos_thetha_valid_out]
  connect_bd_net -net thetha_0_1 [get_bd_pins thetha_0] [get_bd_pins thetha_for_sin_cos1_0/thetha]
  connect_bd_net -net thetha_for_sin_cos1_0_I_out [get_bd_pins I_out] [get_bd_pins cos_thetha_0/I_m] [get_bd_pins thetha_for_sin_cos1_0/I_out]
  connect_bd_net -net thetha_for_sin_cos1_0_Q_out [get_bd_pins Q_out] [get_bd_pins sin_thetha_0/I_m] [get_bd_pins thetha_for_sin_cos1_0/Q_out]
  connect_bd_net -net thetha_for_sin_cos1_0_qubit_out [get_bd_pins qubit_out] [get_bd_pins cos_thetha_0/qubit] [get_bd_pins sin_thetha_0/qubit] [get_bd_pins thetha_for_sin_cos1_0/qubit_out]
  connect_bd_net -net thetha_for_sin_cos1_0_thetha_cos [get_bd_pins thetha_cos] [get_bd_pins cos_thetha_0/thetha] [get_bd_pins thetha_for_sin_cos1_0/thetha_cos]
  connect_bd_net -net thetha_for_sin_cos1_0_thetha_sin [get_bd_pins thetha_sin] [get_bd_pins sin_thetha_0/thetha] [get_bd_pins thetha_for_sin_cos1_0/thetha_sin]
  connect_bd_net -net thetha_for_sin_cos1_0_thetha_valid_out [get_bd_pins thetha_valid_out] [get_bd_pins cos_thetha_0/valid] [get_bd_pins sin_thetha_0/valid] [get_bd_pins thetha_for_sin_cos1_0/thetha_valid_out]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins ICos/clk] [get_bd_pins ISin/clk] [get_bd_pins QCos/clk] [get_bd_pins QSin/clk] [get_bd_pins cos_thetha_0/clk] [get_bd_pins main_output_0/clk] [get_bd_pins sin_thetha_0/clk] [get_bd_pins thetha_for_sin_cos1_0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins ICos/rst] [get_bd_pins ISin/rst] [get_bd_pins QCos/rst] [get_bd_pins QSin/rst] [get_bd_pins cos_thetha_0/rst] [get_bd_pins main_output_0/rst] [get_bd_pins sin_thetha_0/rst] [get_bd_pins thetha_for_sin_cos1_0/rst] [get_bd_pins xlconstant_0/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Filtering
proc create_hier_cell_Filtering_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Filtering_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 63 -to 0 I
  create_bd_pin -dir I -from 63 -to 0 Q
  create_bd_pin -dir I a
  create_bd_pin -dir I b
  create_bd_pin -dir I b1
  create_bd_pin -dir I -type clk clk_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_3
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_3
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_3
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_3
  create_bd_pin -dir I -from 15 -to 0 coeff_b_3
  create_bd_pin -dir O -from 39 -to 0 data_out_0
  create_bd_pin -dir O -from 39 -to 0 data_out_0_0
  create_bd_pin -dir O -from 0 -to 0 data_out_1
  create_bd_pin -dir O -from 0 -to 0 data_out_1_0
  create_bd_pin -dir O -from 0 -to 0 data_out_2
  create_bd_pin -dir O -from 0 -to 0 data_out_3
  create_bd_pin -dir O -from 39 -to 0 data_out_4
  create_bd_pin -dir O -from 39 -to 0 data_out_5
  create_bd_pin -dir O -from 39 -to 0 filter_op_0
  create_bd_pin -dir O -from 39 -to 0 filter_op_0_0
  create_bd_pin -dir O op_valid_0
  create_bd_pin -dir O op_valid_0_0
  create_bd_pin -dir I sel
  create_bd_pin -dir I -from 1 -to 0 sel_0

  # Create instance: filter_mav_I
  create_hier_cell_filter_mav_I_1 $hier_obj filter_mav_I

  # Create instance: filter_mav_Q
  create_hier_cell_filter_mav_Q_1 $hier_obj filter_mav_Q

  # Create instance: fir_bypass_mux_I, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_I
  if { [catch {set fir_bypass_mux_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $fir_bypass_mux_I

  # Create instance: fir_bypass_mux_I1, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_I1
  if { [catch {set fir_bypass_mux_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $fir_bypass_mux_I1

  # Create instance: fir_bypass_mux_Q, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_Q
  if { [catch {set fir_bypass_mux_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $fir_bypass_mux_Q

  # Create instance: fir_bypass_mux_Q1, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_Q1
  if { [catch {set fir_bypass_mux_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $fir_bypass_mux_Q1

  # Create instance: sgn_extension_bypass_I, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_bypass_I
  if { [catch {set sgn_extension_bypass_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_bypass_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: sgn_extension_bypass_Q, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_bypass_Q
  if { [catch {set sgn_extension_bypass_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_bypass_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: slice_I, and set properties
  set slice_I [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 slice_I ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {15} \
   CONFIG.DIN_WIDTH {64} \
   CONFIG.DOUT_WIDTH {16} \
 ] $slice_I

  # Create instance: slice_Q, and set properties
  set slice_Q [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 slice_Q ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {15} \
   CONFIG.DIN_WIDTH {64} \
   CONFIG.DOUT_WIDTH {16} \
 ] $slice_Q

  # Create instance: trigger_valid_I, and set properties
  set block_name and_gate
  set block_cell_name trigger_valid_I
  if { [catch {set trigger_valid_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $trigger_valid_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: trigger_valid_Q, and set properties
  set block_name and_gate
  set block_cell_name trigger_valid_Q
  if { [catch {set trigger_valid_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $trigger_valid_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net coeff_a2b_3_1 [get_bd_pins coeff_a2b_3] [get_bd_pins filter_mav_I/coeff_a2b_3] [get_bd_pins filter_mav_Q/coeff_a2b_3]
  connect_bd_net -net coeff_a3b_3_1 [get_bd_pins coeff_a3b_3] [get_bd_pins filter_mav_I/coeff_a3b_3] [get_bd_pins filter_mav_Q/coeff_a3b_3]
  connect_bd_net -net coeff_a4_3_1 [get_bd_pins coeff_a4_3] [get_bd_pins filter_mav_I/coeff_a4_3] [get_bd_pins filter_mav_Q/coeff_a4_3]
  connect_bd_net -net coeff_ab_3_1 [get_bd_pins coeff_ab_3] [get_bd_pins filter_mav_I/coeff_ab_3] [get_bd_pins filter_mav_Q/coeff_ab_3]
  connect_bd_net -net coeff_b_3_1 [get_bd_pins coeff_b_3] [get_bd_pins filter_mav_I/coeff_b_3] [get_bd_pins filter_mav_Q/coeff_b_3]
  connect_bd_net -net data_valid_0_1 [get_bd_pins filter_mav_I/data_valid_0] [get_bd_pins fir_bypass_mux_I1/data1] [get_bd_pins trigger_valid_I/out1]
  connect_bd_net -net data_valid_0_2 [get_bd_pins filter_mav_Q/data_valid_0] [get_bd_pins fir_bypass_mux_Q1/data1] [get_bd_pins trigger_valid_Q/out1]
  connect_bd_net -net filter_mav_Q_data_out_0 [get_bd_pins data_out_0_0] [get_bd_pins filter_mav_Q/data_out_0]
  connect_bd_net -net filter_mav_Q_data_out_1 [get_bd_pins data_out_1_0] [get_bd_pins filter_mav_Q/data_out_1]
  connect_bd_net -net filter_mav_Q_filter_op_0 [get_bd_pins filter_op_0_0] [get_bd_pins filter_mav_Q/filter_op_0] [get_bd_pins fir_bypass_mux_Q/data2]
  connect_bd_net -net filter_mav_Q_op_valid_0 [get_bd_pins op_valid_0_0] [get_bd_pins filter_mav_Q/op_valid_0] [get_bd_pins fir_bypass_mux_Q1/data2]
  connect_bd_net -net filter_mav_data_out_0 [get_bd_pins data_out_0] [get_bd_pins filter_mav_I/data_out_0]
  connect_bd_net -net filter_mav_data_out_1 [get_bd_pins data_out_1] [get_bd_pins filter_mav_I/data_out_1]
  connect_bd_net -net fir_bypass_mux_I1_data_out [get_bd_pins data_out_2] [get_bd_pins fir_bypass_mux_I1/data_out]
  connect_bd_net -net fir_bypass_mux_I_data_out [get_bd_pins data_out_5] [get_bd_pins fir_bypass_mux_I/data_out]
  connect_bd_net -net fir_bypass_mux_Q1_data_out [get_bd_pins data_out_3] [get_bd_pins fir_bypass_mux_Q1/data_out]
  connect_bd_net -net fir_bypass_mux_Q_data_out [get_bd_pins data_out_4] [get_bd_pins fir_bypass_mux_Q/data_out]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins filter_op_0] [get_bd_pins filter_mav_I/filter_op_0] [get_bd_pins fir_bypass_mux_I/data2]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins op_valid_0] [get_bd_pins filter_mav_I/op_valid_0] [get_bd_pins fir_bypass_mux_I1/data2]
  connect_bd_net -net param_mux_0_data_out [get_bd_pins a] [get_bd_pins trigger_valid_I/a] [get_bd_pins trigger_valid_Q/a]
  connect_bd_net -net sel_0 [get_bd_pins sel] [get_bd_pins fir_bypass_mux_I/sel] [get_bd_pins fir_bypass_mux_I1/sel] [get_bd_pins fir_bypass_mux_Q/sel] [get_bd_pins fir_bypass_mux_Q1/sel]
  connect_bd_net -net sel_0_1 [get_bd_pins sel_0] [get_bd_pins filter_mav_I/sel_0] [get_bd_pins filter_mav_Q/sel_0]
  connect_bd_net -net sgn_extension_I_y [get_bd_pins fir_bypass_mux_I/data1] [get_bd_pins sgn_extension_bypass_I/y]
  connect_bd_net -net sgn_extension_bypass_Q_y [get_bd_pins fir_bypass_mux_Q/data1] [get_bd_pins sgn_extension_bypass_Q/y]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk_0] [get_bd_pins filter_mav_I/clk_0] [get_bd_pins filter_mav_Q/clk_0]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tdata [get_bd_pins I] [get_bd_pins slice_I/Din]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tvalid [get_bd_pins b1] [get_bd_pins trigger_valid_I/b]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tdata [get_bd_pins Q] [get_bd_pins slice_Q/Din]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tvalid [get_bd_pins b] [get_bd_pins trigger_valid_Q/b]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins filter_mav_I/ip_sample_0] [get_bd_pins sgn_extension_bypass_I/a] [get_bd_pins slice_I/Dout]
  connect_bd_net -net xlslice_1_Dout [get_bd_pins filter_mav_Q/ip_sample_0] [get_bd_pins sgn_extension_bypass_Q/a] [get_bd_pins slice_Q/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: R_Theta
proc create_hier_cell_R_Theta { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_R_Theta() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir O -from 127 -to 0 Data_out_6
  create_bd_pin -dir O -from 39 -to 0 I_mul_out
  create_bd_pin -dir O -from 39 -to 0 I_mul_out1
  create_bd_pin -dir O -from 39 -to 0 I_out
  create_bd_pin -dir O -from 60 -to 0 O1
  create_bd_pin -dir O -from 60 -to 0 O2
  create_bd_pin -dir O -from 39 -to 0 Q_out
  create_bd_pin -dir I a_0
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir O -from 19 -to 0 cos_thetha
  create_bd_pin -dir O -from 19 -to 0 cos_thetha1
  create_bd_pin -dir O cos_thetha_valid_out
  create_bd_pin -dir O cos_thetha_valid_out1
  create_bd_pin -dir O -from 63 -to 0 data_out
  create_bd_pin -dir O -from 63 -to 0 data_out1
  create_bd_pin -dir I data_out_2
  create_bd_pin -dir I data_out_3
  create_bd_pin -dir I -from 39 -to 0 data_out_4
  create_bd_pin -dir I -from 39 -to 0 data_out_5
  create_bd_pin -dir O main_valid
  create_bd_pin -dir O -from 59 -to 0 mul_output
  create_bd_pin -dir O -from 59 -to 0 mul_output1
  create_bd_pin -dir O -from 59 -to 0 mul_output2
  create_bd_pin -dir O -from 59 -to 0 mul_output3
  create_bd_pin -dir O mul_output_valid
  create_bd_pin -dir O mul_output_valid1
  create_bd_pin -dir O mul_output_valid2
  create_bd_pin -dir O mul_output_valid3
  create_bd_pin -dir I -from 1 -to 0 qubit_in
  create_bd_pin -dir O -from 1 -to 0 qubit_out
  create_bd_pin -dir I -from 23 -to 0 thetha_2
  create_bd_pin -dir O -from 23 -to 0 thetha_cos
  create_bd_pin -dir O -from 23 -to 0 thetha_sin
  create_bd_pin -dir O thetha_valid_out
  create_bd_pin -dir O -from 63 -to 0 y
  create_bd_pin -dir O -from 63 -to 0 y1
  create_bd_pin -dir O -from 63 -to 0 y2
  create_bd_pin -dir O -from 63 -to 0 y3

  # Create instance: ICos, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name ICos
  if { [catch {set ICos [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ICos eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $ICos

  # Create instance: ISin, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name ISin
  if { [catch {set ISin [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ISin eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $ISin

  # Create instance: QCos, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name QCos
  if { [catch {set QCos [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $QCos eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $QCos

  # Create instance: QSin, and set properties
  set block_name booth_mul_with_pipelining
  set block_cell_name QSin
  if { [catch {set QSin [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $QSin eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $QSin

  # Create instance: cos_thetha_0, and set properties
  set block_name cos_thetha
  set block_cell_name cos_thetha_0
  if { [catch {set cos_thetha_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $cos_thetha_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $cos_thetha_0

  # Create instance: main_output_0, and set properties
  set block_name main_output
  set block_cell_name main_output_0
  if { [catch {set main_output_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $main_output_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $main_output_0

  # Create instance: merger_2_0, and set properties
  set block_name merger_2
  set block_cell_name merger_2_0
  if { [catch {set merger_2_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger_2_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N0 {64} \
   CONFIG.N1 {64} \
 ] $merger_2_0

  # Create instance: not_gate_0, and set properties
  set block_name not_gate
  set block_cell_name not_gate_0
  if { [catch {set not_gate_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $not_gate_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: rotbypass_mux_I, and set properties
  set block_name param_mux
  set block_cell_name rotbypass_mux_I
  if { [catch {set rotbypass_mux_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $rotbypass_mux_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $rotbypass_mux_I

  # Create instance: rotbypass_mux_Q, and set properties
  set block_name param_mux
  set block_cell_name rotbypass_mux_Q
  if { [catch {set rotbypass_mux_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $rotbypass_mux_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $rotbypass_mux_Q

  # Create instance: sgn_extension_rot_I, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rot_I
  if { [catch {set sgn_extension_rot_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rot_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {61} \
   CONFIG.OW {64} \
 ] $sgn_extension_rot_I

  # Create instance: sgn_extension_rot_Q, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rot_Q
  if { [catch {set sgn_extension_rot_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rot_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {61} \
   CONFIG.OW {64} \
 ] $sgn_extension_rot_Q

  # Create instance: sgn_extension_rotbypass_I, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rotbypass_I
  if { [catch {set sgn_extension_rotbypass_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rotbypass_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {40} \
   CONFIG.OW {64} \
 ] $sgn_extension_rotbypass_I

  # Create instance: sgn_extension_rotbypass_Q, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_rotbypass_Q
  if { [catch {set sgn_extension_rotbypass_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_rotbypass_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.IW {40} \
   CONFIG.OW {64} \
 ] $sgn_extension_rotbypass_Q

  # Create instance: sin_thetha_0, and set properties
  set block_name sin_thetha
  set block_cell_name sin_thetha_0
  if { [catch {set sin_thetha_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sin_thetha_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $sin_thetha_0

  # Create instance: thetha_for_sin_cos1_0, and set properties
  set block_name thetha_for_sin_cos1
  set block_cell_name thetha_for_sin_cos1_0
  if { [catch {set thetha_for_sin_cos1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $thetha_for_sin_cos1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $thetha_for_sin_cos1_0

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $xlconstant_0

  # Create port connections
  connect_bd_net -net ICos_mul_output [get_bd_pins mul_output] [get_bd_pins ICos/mul_output] [get_bd_pins main_output_0/I_cos]
  connect_bd_net -net ICos_mul_output_valid [get_bd_pins mul_output_valid] [get_bd_pins ICos/mul_output_valid] [get_bd_pins main_output_0/I_cos_valid]
  connect_bd_net -net ISin_mul_output [get_bd_pins mul_output3] [get_bd_pins ISin/mul_output] [get_bd_pins main_output_0/I_sin]
  connect_bd_net -net ISin_mul_output_valid [get_bd_pins mul_output_valid3] [get_bd_pins ISin/mul_output_valid] [get_bd_pins main_output_0/I_sin_valid]
  connect_bd_net -net QCos_mul_output [get_bd_pins mul_output1] [get_bd_pins QCos/mul_output] [get_bd_pins main_output_0/Q_cos]
  connect_bd_net -net QCos_mul_output_valid [get_bd_pins mul_output_valid1] [get_bd_pins QCos/mul_output_valid] [get_bd_pins main_output_0/Q_cos_valid]
  connect_bd_net -net QSin_mul_output [get_bd_pins mul_output2] [get_bd_pins QSin/mul_output] [get_bd_pins main_output_0/Q_sin]
  connect_bd_net -net QSin_mul_output_valid [get_bd_pins mul_output_valid2] [get_bd_pins QSin/mul_output_valid] [get_bd_pins main_output_0/Q_sin_valid]
  connect_bd_net -net a_0_1 [get_bd_pins a_0] [get_bd_pins not_gate_0/a] [get_bd_pins rotbypass_mux_I/sel] [get_bd_pins rotbypass_mux_Q/sel]
  connect_bd_net -net arctan_enable_0_1 [get_bd_pins ICos/mul_enable] [get_bd_pins ISin/mul_enable] [get_bd_pins QCos/mul_enable] [get_bd_pins QSin/mul_enable] [get_bd_pins cos_thetha_0/cos_thetha_enable] [get_bd_pins not_gate_0/out1] [get_bd_pins sin_thetha_0/cos_thetha_enable]
  connect_bd_net -net cos_thetha_0_I_mul_out [get_bd_pins I_mul_out] [get_bd_pins ICos/Iin] [get_bd_pins ISin/Iin] [get_bd_pins cos_thetha_0/I_mul_out]
  connect_bd_net -net cos_thetha_0_cos_thetha [get_bd_pins cos_thetha] [get_bd_pins ICos/cos_thethain] [get_bd_pins QCos/cos_thethain] [get_bd_pins cos_thetha_0/cos_thetha]
  connect_bd_net -net cos_thetha_0_cos_thetha_valid_out [get_bd_pins cos_thetha_valid_out] [get_bd_pins ICos/cos_valid] [get_bd_pins QCos/cos_valid] [get_bd_pins cos_thetha_0/cos_thetha_valid_out]
  connect_bd_net -net fir_bypass_mux_I1_data_out [get_bd_pins data_out_2] [get_bd_pins thetha_for_sin_cos1_0/I_valid]
  connect_bd_net -net fir_bypass_mux_I_data_out [get_bd_pins data_out_5] [get_bd_pins sgn_extension_rotbypass_I/a] [get_bd_pins thetha_for_sin_cos1_0/I_in]
  connect_bd_net -net fir_bypass_mux_Q1_data_out [get_bd_pins data_out_3] [get_bd_pins thetha_for_sin_cos1_0/Q_valid]
  connect_bd_net -net fir_bypass_mux_Q_data_out [get_bd_pins data_out_4] [get_bd_pins sgn_extension_rotbypass_Q/a] [get_bd_pins thetha_for_sin_cos1_0/Q_in]
  connect_bd_net -net main_output_0_O1 [get_bd_pins O1] [get_bd_pins main_output_0/O1] [get_bd_pins sgn_extension_rot_I/a]
  connect_bd_net -net main_output_0_O2 [get_bd_pins O2] [get_bd_pins main_output_0/O2] [get_bd_pins sgn_extension_rot_Q/a]
  connect_bd_net -net main_output_0_main_valid [get_bd_pins main_valid] [get_bd_pins main_output_0/main_valid]
  connect_bd_net -net merger_2_0_Data_out [get_bd_pins Data_out_6] [get_bd_pins merger_2_0/Data_out]
  connect_bd_net -net qubit_in_1 [get_bd_pins qubit_in] [get_bd_pins thetha_for_sin_cos1_0/qubit_in]
  connect_bd_net -net rotbypass_mux_I_data_out [get_bd_pins data_out] [get_bd_pins merger_2_0/L] [get_bd_pins rotbypass_mux_I/data_out]
  connect_bd_net -net rotbypass_mux_Q_data_out [get_bd_pins data_out1] [get_bd_pins merger_2_0/U] [get_bd_pins rotbypass_mux_Q/data_out]
  connect_bd_net -net sgn_extension_rot_I_y [get_bd_pins y] [get_bd_pins rotbypass_mux_I/data2] [get_bd_pins sgn_extension_rot_I/y]
  connect_bd_net -net sgn_extension_rot_Q_y [get_bd_pins y2] [get_bd_pins rotbypass_mux_Q/data2] [get_bd_pins sgn_extension_rot_Q/y]
  connect_bd_net -net sgn_extension_rotbypass_I_y [get_bd_pins y1] [get_bd_pins rotbypass_mux_I/data1] [get_bd_pins sgn_extension_rotbypass_I/y]
  connect_bd_net -net sgn_extension_rotbypass_Q_y [get_bd_pins y3] [get_bd_pins rotbypass_mux_Q/data1] [get_bd_pins sgn_extension_rotbypass_Q/y]
  connect_bd_net -net sin_thetha_0_I_mul_out [get_bd_pins I_mul_out1] [get_bd_pins QCos/Iin] [get_bd_pins QSin/Iin] [get_bd_pins sin_thetha_0/I_mul_out]
  connect_bd_net -net sin_thetha_0_cos_thetha [get_bd_pins cos_thetha1] [get_bd_pins ISin/cos_thethain] [get_bd_pins QSin/cos_thethain] [get_bd_pins sin_thetha_0/cos_thetha]
  connect_bd_net -net sin_thetha_0_cos_thetha_valid_out [get_bd_pins cos_thetha_valid_out1] [get_bd_pins ISin/cos_valid] [get_bd_pins QSin/cos_valid] [get_bd_pins sin_thetha_0/cos_thetha_valid_out]
  connect_bd_net -net thetha_2_1 [get_bd_pins thetha_2] [get_bd_pins thetha_for_sin_cos1_0/thetha]
  connect_bd_net -net thetha_for_sin_cos1_0_I_out [get_bd_pins I_out] [get_bd_pins cos_thetha_0/I_m] [get_bd_pins thetha_for_sin_cos1_0/I_out]
  connect_bd_net -net thetha_for_sin_cos1_0_Q_out [get_bd_pins Q_out] [get_bd_pins sin_thetha_0/I_m] [get_bd_pins thetha_for_sin_cos1_0/Q_out]
  connect_bd_net -net thetha_for_sin_cos1_0_qubit_out [get_bd_pins qubit_out] [get_bd_pins cos_thetha_0/qubit] [get_bd_pins sin_thetha_0/qubit] [get_bd_pins thetha_for_sin_cos1_0/qubit_out]
  connect_bd_net -net thetha_for_sin_cos1_0_thetha_cos [get_bd_pins thetha_cos] [get_bd_pins cos_thetha_0/thetha] [get_bd_pins thetha_for_sin_cos1_0/thetha_cos]
  connect_bd_net -net thetha_for_sin_cos1_0_thetha_sin [get_bd_pins thetha_sin] [get_bd_pins sin_thetha_0/thetha] [get_bd_pins thetha_for_sin_cos1_0/thetha_sin]
  connect_bd_net -net thetha_for_sin_cos1_0_thetha_valid_out [get_bd_pins thetha_valid_out] [get_bd_pins cos_thetha_0/valid] [get_bd_pins sin_thetha_0/valid] [get_bd_pins thetha_for_sin_cos1_0/thetha_valid_out]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins ICos/clk] [get_bd_pins ISin/clk] [get_bd_pins QCos/clk] [get_bd_pins QSin/clk] [get_bd_pins cos_thetha_0/clk] [get_bd_pins main_output_0/clk] [get_bd_pins sin_thetha_0/clk] [get_bd_pins thetha_for_sin_cos1_0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins ICos/rst] [get_bd_pins ISin/rst] [get_bd_pins QCos/rst] [get_bd_pins QSin/rst] [get_bd_pins cos_thetha_0/rst] [get_bd_pins main_output_0/rst] [get_bd_pins sin_thetha_0/rst] [get_bd_pins thetha_for_sin_cos1_0/rst] [get_bd_pins xlconstant_0/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Filtering
proc create_hier_cell_Filtering { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Filtering() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 63 -to 0 I
  create_bd_pin -dir I -from 63 -to 0 Q
  create_bd_pin -dir I a
  create_bd_pin -dir I b
  create_bd_pin -dir I b1
  create_bd_pin -dir I -type clk clk_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_0
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_0
  create_bd_pin -dir I -from 15 -to 0 coeff_b_0
  create_bd_pin -dir O -from 39 -to 0 data_out_0
  create_bd_pin -dir O -from 39 -to 0 data_out_0_0
  create_bd_pin -dir O -from 0 -to 0 data_out_1
  create_bd_pin -dir O -from 0 -to 0 data_out_1_0
  create_bd_pin -dir O -from 0 -to 0 data_out_2
  create_bd_pin -dir O -from 0 -to 0 data_out_3
  create_bd_pin -dir O -from 39 -to 0 data_out_4
  create_bd_pin -dir O -from 39 -to 0 data_out_5
  create_bd_pin -dir O -from 39 -to 0 filter_op_0
  create_bd_pin -dir O -from 39 -to 0 filter_op_0_0
  create_bd_pin -dir O op_valid_0
  create_bd_pin -dir O op_valid_0_0
  create_bd_pin -dir I sel
  create_bd_pin -dir I -from 1 -to 0 sel_0

  # Create instance: filter_mav_I
  create_hier_cell_filter_mav_I $hier_obj filter_mav_I

  # Create instance: filter_mav_Q
  create_hier_cell_filter_mav_Q $hier_obj filter_mav_Q

  # Create instance: fir_bypass_mux_I, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_I
  if { [catch {set fir_bypass_mux_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $fir_bypass_mux_I

  # Create instance: fir_bypass_mux_I1, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_I1
  if { [catch {set fir_bypass_mux_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $fir_bypass_mux_I1

  # Create instance: fir_bypass_mux_Q, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_Q
  if { [catch {set fir_bypass_mux_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $fir_bypass_mux_Q

  # Create instance: fir_bypass_mux_Q1, and set properties
  set block_name param_mux
  set block_cell_name fir_bypass_mux_Q1
  if { [catch {set fir_bypass_mux_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fir_bypass_mux_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $fir_bypass_mux_Q1

  # Create instance: sgn_extension_bypass_I, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_bypass_I
  if { [catch {set sgn_extension_bypass_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_bypass_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: sgn_extension_bypass_Q, and set properties
  set block_name sgn_extension
  set block_cell_name sgn_extension_bypass_Q
  if { [catch {set sgn_extension_bypass_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $sgn_extension_bypass_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: slice_I, and set properties
  set slice_I [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 slice_I ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {15} \
   CONFIG.DIN_WIDTH {64} \
   CONFIG.DOUT_WIDTH {16} \
 ] $slice_I

  # Create instance: slice_Q, and set properties
  set slice_Q [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 slice_Q ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {15} \
   CONFIG.DIN_WIDTH {64} \
   CONFIG.DOUT_WIDTH {16} \
 ] $slice_Q

  # Create instance: trigger_valid_I, and set properties
  set block_name and_gate
  set block_cell_name trigger_valid_I
  if { [catch {set trigger_valid_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $trigger_valid_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: trigger_valid_Q, and set properties
  set block_name and_gate
  set block_cell_name trigger_valid_Q
  if { [catch {set trigger_valid_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $trigger_valid_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net coeff_a2b_0_1 [get_bd_pins coeff_a2b_0] [get_bd_pins filter_mav_I/coeff_a2b_0] [get_bd_pins filter_mav_Q/coeff_a2b_0]
  connect_bd_net -net coeff_a3b_0_1 [get_bd_pins coeff_a3b_0] [get_bd_pins filter_mav_I/coeff_a3b_0] [get_bd_pins filter_mav_Q/coeff_a3b_0]
  connect_bd_net -net coeff_a4_0_1 [get_bd_pins coeff_a4_0] [get_bd_pins filter_mav_I/coeff_a4_0] [get_bd_pins filter_mav_Q/coeff_a4_0]
  connect_bd_net -net coeff_ab_0_1 [get_bd_pins coeff_ab_0] [get_bd_pins filter_mav_I/coeff_ab_0] [get_bd_pins filter_mav_Q/coeff_ab_0]
  connect_bd_net -net coeff_b_0_1 [get_bd_pins coeff_b_0] [get_bd_pins filter_mav_I/coeff_b_0] [get_bd_pins filter_mav_Q/coeff_b_0]
  connect_bd_net -net data_valid_0_1 [get_bd_pins filter_mav_I/data_valid_0] [get_bd_pins fir_bypass_mux_I1/data1] [get_bd_pins trigger_valid_I/out1]
  connect_bd_net -net data_valid_0_2 [get_bd_pins filter_mav_Q/data_valid_0] [get_bd_pins fir_bypass_mux_Q1/data1] [get_bd_pins trigger_valid_Q/out1]
  connect_bd_net -net filter_mav_Q_data_out_0 [get_bd_pins data_out_0_0] [get_bd_pins filter_mav_Q/data_out_0]
  connect_bd_net -net filter_mav_Q_data_out_1 [get_bd_pins data_out_1_0] [get_bd_pins filter_mav_Q/data_out_1]
  connect_bd_net -net filter_mav_Q_filter_op_0 [get_bd_pins filter_op_0_0] [get_bd_pins filter_mav_Q/filter_op_0] [get_bd_pins fir_bypass_mux_Q/data2]
  connect_bd_net -net filter_mav_Q_op_valid_0 [get_bd_pins op_valid_0_0] [get_bd_pins filter_mav_Q/op_valid_0] [get_bd_pins fir_bypass_mux_Q1/data2]
  connect_bd_net -net filter_mav_data_out_0 [get_bd_pins data_out_0] [get_bd_pins filter_mav_I/data_out_0]
  connect_bd_net -net filter_mav_data_out_1 [get_bd_pins data_out_1] [get_bd_pins filter_mav_I/data_out_1]
  connect_bd_net -net fir_bypass_mux_I1_data_out [get_bd_pins data_out_2] [get_bd_pins fir_bypass_mux_I1/data_out]
  connect_bd_net -net fir_bypass_mux_I_data_out [get_bd_pins data_out_5] [get_bd_pins fir_bypass_mux_I/data_out]
  connect_bd_net -net fir_bypass_mux_Q1_data_out [get_bd_pins data_out_3] [get_bd_pins fir_bypass_mux_Q1/data_out]
  connect_bd_net -net fir_bypass_mux_Q_data_out [get_bd_pins data_out_4] [get_bd_pins fir_bypass_mux_Q/data_out]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins filter_op_0] [get_bd_pins filter_mav_I/filter_op_0] [get_bd_pins fir_bypass_mux_I/data2]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins op_valid_0] [get_bd_pins filter_mav_I/op_valid_0] [get_bd_pins fir_bypass_mux_I1/data2]
  connect_bd_net -net param_mux_0_data_out [get_bd_pins a] [get_bd_pins trigger_valid_I/a] [get_bd_pins trigger_valid_Q/a]
  connect_bd_net -net sel_0 [get_bd_pins sel] [get_bd_pins fir_bypass_mux_I/sel] [get_bd_pins fir_bypass_mux_I1/sel] [get_bd_pins fir_bypass_mux_Q/sel] [get_bd_pins fir_bypass_mux_Q1/sel]
  connect_bd_net -net sel_0_1 [get_bd_pins sel_0] [get_bd_pins filter_mav_I/sel_0] [get_bd_pins filter_mav_Q/sel_0]
  connect_bd_net -net sgn_extension_I_y [get_bd_pins fir_bypass_mux_I/data1] [get_bd_pins sgn_extension_bypass_I/y]
  connect_bd_net -net sgn_extension_bypass_Q_y [get_bd_pins fir_bypass_mux_Q/data1] [get_bd_pins sgn_extension_bypass_Q/y]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk_0] [get_bd_pins filter_mav_I/clk_0] [get_bd_pins filter_mav_Q/clk_0]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tdata [get_bd_pins I] [get_bd_pins slice_I/Din]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tvalid [get_bd_pins b1] [get_bd_pins trigger_valid_I/b]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tdata [get_bd_pins Q] [get_bd_pins slice_Q/Din]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tvalid [get_bd_pins b] [get_bd_pins trigger_valid_Q/b]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins filter_mav_I/ip_sample_0] [get_bd_pins sgn_extension_bypass_I/a] [get_bd_pins slice_I/Dout]
  connect_bd_net -net xlslice_1_Dout [get_bd_pins filter_mav_Q/ip_sample_0] [get_bd_pins sgn_extension_bypass_Q/a] [get_bd_pins slice_Q/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q3_MAD
proc create_hier_cell_Q3_MAD_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q3_MAD_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q2_MAD
proc create_hier_cell_Q2_MAD_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q2_MAD_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q1_MAD
proc create_hier_cell_Q1_MAD_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q1_MAD_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q0_MAD
proc create_hier_cell_Q0_MAD_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q0_MAD_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q0, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q0
  if { [catch {set booth_multiplier_Q0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q0, and set properties
  set block_name divider1
  set block_cell_name divider1_Q0
  if { [catch {set divider1_Q0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q0/rst] [get_bd_pins divider1_Q0/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q0/den1]
  connect_bd_net -net booth_multiplier_Q0_half_out [get_bd_pins booth_multiplier_Q0/half_out] [get_bd_pins divider1_Q0/half_in]
  connect_bd_net -net booth_multiplier_Q0_mode_out [get_bd_pins booth_multiplier_Q0/mode_out] [get_bd_pins divider1_Q0/mode_in]
  connect_bd_net -net booth_multiplier_Q0_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q0/mul_output] [get_bd_pins divider1_Q0/I]
  connect_bd_net -net booth_multiplier_Q0_mul_output_valid [get_bd_pins booth_multiplier_Q0/mul_output_valid] [get_bd_pins divider1_Q0/valid_in]
  connect_bd_net -net booth_multiplier_Q0_trigger_out [get_bd_pins booth_multiplier_Q0/trigger_out] [get_bd_pins divider1_Q0/trigger]
  connect_bd_net -net divider1_Q0_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q0/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q0/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q0 [get_bd_pins I] [get_bd_pins booth_multiplier_Q0/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q0/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q0/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q0/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q0/clk] [get_bd_pins divider1_Q0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q0/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I3_MAD
proc create_hier_cell_I3_MAD_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I3_MAD_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I2_MAD
proc create_hier_cell_I2_MAD_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I2_MAD_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I1_MAD
proc create_hier_cell_I1_MAD_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I1_MAD_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_I1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_I1
  if { [catch {set booth_multiplier_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_I1, and set properties
  set block_name divider1
  set block_cell_name divider1_I1
  if { [catch {set divider1_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_I1/rst] [get_bd_pins divider1_I1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_I1/den1]
  connect_bd_net -net booth_multiplier_I1_half_out [get_bd_pins booth_multiplier_I1/half_out] [get_bd_pins divider1_I1/half_in]
  connect_bd_net -net booth_multiplier_I1_mode_out [get_bd_pins booth_multiplier_I1/mode_out] [get_bd_pins divider1_I1/mode_in]
  connect_bd_net -net booth_multiplier_I1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_I1/mul_output] [get_bd_pins divider1_I1/I]
  connect_bd_net -net booth_multiplier_I1_mul_output_valid [get_bd_pins booth_multiplier_I1/mul_output_valid] [get_bd_pins divider1_I1/valid_in]
  connect_bd_net -net booth_multiplier_I1_trigger_out [get_bd_pins booth_multiplier_I1/trigger_out] [get_bd_pins divider1_I1/trigger]
  connect_bd_net -net divider1_I1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_I1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_I1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_I1 [get_bd_pins I] [get_bd_pins booth_multiplier_I1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_I1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_I1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_I1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_I1/clk] [get_bd_pins divider1_I1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_I1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I0_MAD
proc create_hier_cell_I0_MAD_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I0_MAD_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in
  create_bd_pin -dir O -from 15 -to 0 trigger_out

  # Create instance: booth_multiplier_I0, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_I0
  if { [catch {set booth_multiplier_I0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_I0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_I0, and set properties
  set block_name divider1
  set block_cell_name divider1_I0
  if { [catch {set divider1_I0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_I0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_I0/rst] [get_bd_pins divider1_I0/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_I0/den1]
  connect_bd_net -net booth_multiplier_I0_half_out [get_bd_pins booth_multiplier_I0/half_out] [get_bd_pins divider1_I0/half_in]
  connect_bd_net -net booth_multiplier_I0_mode_out [get_bd_pins booth_multiplier_I0/mode_out] [get_bd_pins divider1_I0/mode_in]
  connect_bd_net -net booth_multiplier_I0_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_I0/mul_output] [get_bd_pins divider1_I0/I]
  connect_bd_net -net booth_multiplier_I0_mul_output_valid [get_bd_pins booth_multiplier_I0/mul_output_valid] [get_bd_pins divider1_I0/valid_in]
  connect_bd_net -net booth_multiplier_I0_trigger_out [get_bd_pins booth_multiplier_I0/trigger_out] [get_bd_pins divider1_I0/trigger]
  connect_bd_net -net divider1_I0_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_I0/Iavg1]
  connect_bd_net -net divider1_I0_trigger_out [get_bd_pins trigger_out] [get_bd_pins divider1_I0/trigger_out]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_I0/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_I0 [get_bd_pins I] [get_bd_pins booth_multiplier_I0/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_I0/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_I0/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_I0/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_I0/clk] [get_bd_pins divider1_I0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_I0/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_Q_MSB
proc create_hier_cell_Block_Mem_Q_MSB_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_Q_MSB_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_1, and set properties
  set axi_bram_ctrl_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_1 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_1

  # Create instance: blk_mem_gen_I1, and set properties
  set blk_mem_gen_I1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I1 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I1

  # Create instance: data_splitter_1, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_1
  if { [catch {set data_splitter_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_1

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_1_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_1/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I1/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M01_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_1/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_0/Din]
  connect_bd_net -net axi_bram_ctrl_1_bram_addr_a [get_bd_pins axi_bram_ctrl_1/bram_addr_a] [get_bd_pins data_splitter_1/data_in]
  connect_bd_net -net blk_mem_gen_1_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I1/doutb]
  connect_bd_net -net data_splitter_1_data_out [get_bd_pins blk_mem_gen_I1/addra] [get_bd_pins data_splitter_1/data_out]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_1/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I1/clkb]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins blk_mem_gen_I1/addrb] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_1/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_Q_LSB
proc create_hier_cell_Block_Mem_Q_LSB_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_Q_LSB_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_1, and set properties
  set axi_bram_ctrl_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_1 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_1

  # Create instance: blk_mem_gen_I1, and set properties
  set blk_mem_gen_I1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I1 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I1

  # Create instance: data_splitter_1, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_1
  if { [catch {set data_splitter_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_1

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_3

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_1_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_1/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I1/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M01_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_1/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net axi_bram_ctrl_1_bram_addr_a [get_bd_pins axi_bram_ctrl_1/bram_addr_a] [get_bd_pins data_splitter_1/data_in]
  connect_bd_net -net blk_mem_gen_1_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I1/doutb]
  connect_bd_net -net data_splitter_1_data_out [get_bd_pins blk_mem_gen_I1/addra] [get_bd_pins data_splitter_1/data_out]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_1/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I1/clkb]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins blk_mem_gen_I1/addrb] [get_bd_pins xlslice_3/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_1/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_I_MSB
proc create_hier_cell_Block_Mem_I_MSB_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_I_MSB_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: blk_mem_gen_I, and set properties
  set blk_mem_gen_I [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I

  # Create instance: data_splitter_0, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_0
  if { [catch {set data_splitter_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_0

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_0/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_0/Din]
  connect_bd_net -net axi_bram_ctrl_0_bram_addr_a [get_bd_pins axi_bram_ctrl_0/bram_addr_a] [get_bd_pins data_splitter_0/data_in]
  connect_bd_net -net blk_mem_gen_0_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I/doutb]
  connect_bd_net -net data_splitter_0_data_out [get_bd_pins blk_mem_gen_I/addra] [get_bd_pins data_splitter_0/data_out]
  connect_bd_net -net s_axi_aresetn_1 [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I/clkb]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins blk_mem_gen_I/addrb] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_I_LSB
proc create_hier_cell_Block_Mem_I_LSB_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_I_LSB_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: blk_mem_gen_I, and set properties
  set blk_mem_gen_I [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I

  # Create instance: data_splitter_0, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_0
  if { [catch {set data_splitter_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_0

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_0/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_0/Din]
  connect_bd_net -net axi_bram_ctrl_0_bram_addr_a [get_bd_pins axi_bram_ctrl_0/bram_addr_a] [get_bd_pins data_splitter_0/data_in]
  connect_bd_net -net blk_mem_gen_0_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I/doutb]
  connect_bd_net -net data_splitter_0_data_out [get_bd_pins blk_mem_gen_I/addra] [get_bd_pins data_splitter_0/data_out]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I/clkb]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins blk_mem_gen_I/addrb] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q3_MAD
proc create_hier_cell_Q3_MAD_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q3_MAD_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q2_MAD
proc create_hier_cell_Q2_MAD_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q2_MAD_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q1_MAD
proc create_hier_cell_Q1_MAD_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q1_MAD_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q0_MAD
proc create_hier_cell_Q0_MAD_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q0_MAD_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q0, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q0
  if { [catch {set booth_multiplier_Q0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q0, and set properties
  set block_name divider1
  set block_cell_name divider1_Q0
  if { [catch {set divider1_Q0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q0/rst] [get_bd_pins divider1_Q0/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q0/den1]
  connect_bd_net -net booth_multiplier_Q0_half_out [get_bd_pins booth_multiplier_Q0/half_out] [get_bd_pins divider1_Q0/half_in]
  connect_bd_net -net booth_multiplier_Q0_mode_out [get_bd_pins booth_multiplier_Q0/mode_out] [get_bd_pins divider1_Q0/mode_in]
  connect_bd_net -net booth_multiplier_Q0_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q0/mul_output] [get_bd_pins divider1_Q0/I]
  connect_bd_net -net booth_multiplier_Q0_mul_output_valid [get_bd_pins booth_multiplier_Q0/mul_output_valid] [get_bd_pins divider1_Q0/valid_in]
  connect_bd_net -net booth_multiplier_Q0_trigger_out [get_bd_pins booth_multiplier_Q0/trigger_out] [get_bd_pins divider1_Q0/trigger]
  connect_bd_net -net divider1_Q0_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q0/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q0/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q0 [get_bd_pins I] [get_bd_pins booth_multiplier_Q0/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q0/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q0/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q0/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q0/clk] [get_bd_pins divider1_Q0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q0/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I3_MAD
proc create_hier_cell_I3_MAD_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I3_MAD_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I2_MAD
proc create_hier_cell_I2_MAD_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I2_MAD_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I1_MAD
proc create_hier_cell_I1_MAD_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I1_MAD_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_I1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_I1
  if { [catch {set booth_multiplier_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_I1, and set properties
  set block_name divider1
  set block_cell_name divider1_I1
  if { [catch {set divider1_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_I1/rst] [get_bd_pins divider1_I1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_I1/den1]
  connect_bd_net -net booth_multiplier_I1_half_out [get_bd_pins booth_multiplier_I1/half_out] [get_bd_pins divider1_I1/half_in]
  connect_bd_net -net booth_multiplier_I1_mode_out [get_bd_pins booth_multiplier_I1/mode_out] [get_bd_pins divider1_I1/mode_in]
  connect_bd_net -net booth_multiplier_I1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_I1/mul_output] [get_bd_pins divider1_I1/I]
  connect_bd_net -net booth_multiplier_I1_mul_output_valid [get_bd_pins booth_multiplier_I1/mul_output_valid] [get_bd_pins divider1_I1/valid_in]
  connect_bd_net -net booth_multiplier_I1_trigger_out [get_bd_pins booth_multiplier_I1/trigger_out] [get_bd_pins divider1_I1/trigger]
  connect_bd_net -net divider1_I1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_I1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_I1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_I1 [get_bd_pins I] [get_bd_pins booth_multiplier_I1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_I1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_I1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_I1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_I1/clk] [get_bd_pins divider1_I1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_I1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I0_MAD
proc create_hier_cell_I0_MAD_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I0_MAD_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in
  create_bd_pin -dir O -from 15 -to 0 trigger_out

  # Create instance: booth_multiplier_I0, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_I0
  if { [catch {set booth_multiplier_I0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_I0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_I0, and set properties
  set block_name divider1
  set block_cell_name divider1_I0
  if { [catch {set divider1_I0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_I0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_I0/rst] [get_bd_pins divider1_I0/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_I0/den1]
  connect_bd_net -net booth_multiplier_I0_half_out [get_bd_pins booth_multiplier_I0/half_out] [get_bd_pins divider1_I0/half_in]
  connect_bd_net -net booth_multiplier_I0_mode_out [get_bd_pins booth_multiplier_I0/mode_out] [get_bd_pins divider1_I0/mode_in]
  connect_bd_net -net booth_multiplier_I0_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_I0/mul_output] [get_bd_pins divider1_I0/I]
  connect_bd_net -net booth_multiplier_I0_mul_output_valid [get_bd_pins booth_multiplier_I0/mul_output_valid] [get_bd_pins divider1_I0/valid_in]
  connect_bd_net -net booth_multiplier_I0_trigger_out [get_bd_pins booth_multiplier_I0/trigger_out] [get_bd_pins divider1_I0/trigger]
  connect_bd_net -net divider1_I0_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_I0/Iavg1]
  connect_bd_net -net divider1_I0_trigger_out [get_bd_pins trigger_out] [get_bd_pins divider1_I0/trigger_out]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_I0/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_I0 [get_bd_pins I] [get_bd_pins booth_multiplier_I0/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_I0/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_I0/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_I0/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_I0/clk] [get_bd_pins divider1_I0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_I0/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_Q_MSB
proc create_hier_cell_Block_Mem_Q_MSB_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_Q_MSB_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_1, and set properties
  set axi_bram_ctrl_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_1 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_1

  # Create instance: blk_mem_gen_I1, and set properties
  set blk_mem_gen_I1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I1 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I1

  # Create instance: data_splitter_1, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_1
  if { [catch {set data_splitter_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_1

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_1_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_1/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I1/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M01_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_1/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_0/Din]
  connect_bd_net -net axi_bram_ctrl_1_bram_addr_a [get_bd_pins axi_bram_ctrl_1/bram_addr_a] [get_bd_pins data_splitter_1/data_in]
  connect_bd_net -net blk_mem_gen_1_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I1/doutb]
  connect_bd_net -net data_splitter_1_data_out [get_bd_pins blk_mem_gen_I1/addra] [get_bd_pins data_splitter_1/data_out]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_1/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I1/clkb]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins blk_mem_gen_I1/addrb] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_1/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_Q_LSB
proc create_hier_cell_Block_Mem_Q_LSB_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_Q_LSB_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_1, and set properties
  set axi_bram_ctrl_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_1 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_1

  # Create instance: blk_mem_gen_I1, and set properties
  set blk_mem_gen_I1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I1 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I1

  # Create instance: data_splitter_1, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_1
  if { [catch {set data_splitter_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_1

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_3

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_1_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_1/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I1/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M01_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_1/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net axi_bram_ctrl_1_bram_addr_a [get_bd_pins axi_bram_ctrl_1/bram_addr_a] [get_bd_pins data_splitter_1/data_in]
  connect_bd_net -net blk_mem_gen_1_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I1/doutb]
  connect_bd_net -net data_splitter_1_data_out [get_bd_pins blk_mem_gen_I1/addra] [get_bd_pins data_splitter_1/data_out]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_1/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I1/clkb]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins blk_mem_gen_I1/addrb] [get_bd_pins xlslice_3/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_1/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_I_MSB
proc create_hier_cell_Block_Mem_I_MSB_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_I_MSB_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: blk_mem_gen_I, and set properties
  set blk_mem_gen_I [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I

  # Create instance: data_splitter_0, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_0
  if { [catch {set data_splitter_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_0

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_0/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_0/Din]
  connect_bd_net -net axi_bram_ctrl_0_bram_addr_a [get_bd_pins axi_bram_ctrl_0/bram_addr_a] [get_bd_pins data_splitter_0/data_in]
  connect_bd_net -net blk_mem_gen_0_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I/doutb]
  connect_bd_net -net data_splitter_0_data_out [get_bd_pins blk_mem_gen_I/addra] [get_bd_pins data_splitter_0/data_out]
  connect_bd_net -net s_axi_aresetn_1 [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I/clkb]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins blk_mem_gen_I/addrb] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_I_LSB
proc create_hier_cell_Block_Mem_I_LSB_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_I_LSB_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: blk_mem_gen_I, and set properties
  set blk_mem_gen_I [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I

  # Create instance: data_splitter_0, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_0
  if { [catch {set data_splitter_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_0

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_0/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_0/Din]
  connect_bd_net -net axi_bram_ctrl_0_bram_addr_a [get_bd_pins axi_bram_ctrl_0/bram_addr_a] [get_bd_pins data_splitter_0/data_in]
  connect_bd_net -net blk_mem_gen_0_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I/doutb]
  connect_bd_net -net data_splitter_0_data_out [get_bd_pins blk_mem_gen_I/addra] [get_bd_pins data_splitter_0/data_out]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I/clkb]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins blk_mem_gen_I/addrb] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q3_MAD
proc create_hier_cell_Q3_MAD_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q3_MAD_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q2_MAD
proc create_hier_cell_Q2_MAD_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q2_MAD_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q1_MAD
proc create_hier_cell_Q1_MAD_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q1_MAD_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q0_MAD
proc create_hier_cell_Q0_MAD_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q0_MAD_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q0, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q0
  if { [catch {set booth_multiplier_Q0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q0, and set properties
  set block_name divider1
  set block_cell_name divider1_Q0
  if { [catch {set divider1_Q0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q0/rst] [get_bd_pins divider1_Q0/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q0/den1]
  connect_bd_net -net booth_multiplier_Q0_half_out [get_bd_pins booth_multiplier_Q0/half_out] [get_bd_pins divider1_Q0/half_in]
  connect_bd_net -net booth_multiplier_Q0_mode_out [get_bd_pins booth_multiplier_Q0/mode_out] [get_bd_pins divider1_Q0/mode_in]
  connect_bd_net -net booth_multiplier_Q0_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q0/mul_output] [get_bd_pins divider1_Q0/I]
  connect_bd_net -net booth_multiplier_Q0_mul_output_valid [get_bd_pins booth_multiplier_Q0/mul_output_valid] [get_bd_pins divider1_Q0/valid_in]
  connect_bd_net -net booth_multiplier_Q0_trigger_out [get_bd_pins booth_multiplier_Q0/trigger_out] [get_bd_pins divider1_Q0/trigger]
  connect_bd_net -net divider1_Q0_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q0/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q0/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q0 [get_bd_pins I] [get_bd_pins booth_multiplier_Q0/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q0/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q0/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q0/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q0/clk] [get_bd_pins divider1_Q0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q0/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I3_MAD
proc create_hier_cell_I3_MAD_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I3_MAD_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I2_MAD
proc create_hier_cell_I2_MAD_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I2_MAD_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I1_MAD
proc create_hier_cell_I1_MAD_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I1_MAD_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_I1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_I1
  if { [catch {set booth_multiplier_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_I1, and set properties
  set block_name divider1
  set block_cell_name divider1_I1
  if { [catch {set divider1_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_I1/rst] [get_bd_pins divider1_I1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_I1/den1]
  connect_bd_net -net booth_multiplier_I1_half_out [get_bd_pins booth_multiplier_I1/half_out] [get_bd_pins divider1_I1/half_in]
  connect_bd_net -net booth_multiplier_I1_mode_out [get_bd_pins booth_multiplier_I1/mode_out] [get_bd_pins divider1_I1/mode_in]
  connect_bd_net -net booth_multiplier_I1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_I1/mul_output] [get_bd_pins divider1_I1/I]
  connect_bd_net -net booth_multiplier_I1_mul_output_valid [get_bd_pins booth_multiplier_I1/mul_output_valid] [get_bd_pins divider1_I1/valid_in]
  connect_bd_net -net booth_multiplier_I1_trigger_out [get_bd_pins booth_multiplier_I1/trigger_out] [get_bd_pins divider1_I1/trigger]
  connect_bd_net -net divider1_I1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_I1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_I1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_I1 [get_bd_pins I] [get_bd_pins booth_multiplier_I1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_I1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_I1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_I1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_I1/clk] [get_bd_pins divider1_I1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_I1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I0_MAD
proc create_hier_cell_I0_MAD_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I0_MAD_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in
  create_bd_pin -dir O -from 15 -to 0 trigger_out

  # Create instance: booth_multiplier_I0, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_I0
  if { [catch {set booth_multiplier_I0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_I0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_I0, and set properties
  set block_name divider1
  set block_cell_name divider1_I0
  if { [catch {set divider1_I0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_I0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_I0/rst] [get_bd_pins divider1_I0/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_I0/den1]
  connect_bd_net -net booth_multiplier_I0_half_out [get_bd_pins booth_multiplier_I0/half_out] [get_bd_pins divider1_I0/half_in]
  connect_bd_net -net booth_multiplier_I0_mode_out [get_bd_pins booth_multiplier_I0/mode_out] [get_bd_pins divider1_I0/mode_in]
  connect_bd_net -net booth_multiplier_I0_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_I0/mul_output] [get_bd_pins divider1_I0/I]
  connect_bd_net -net booth_multiplier_I0_mul_output_valid [get_bd_pins booth_multiplier_I0/mul_output_valid] [get_bd_pins divider1_I0/valid_in]
  connect_bd_net -net booth_multiplier_I0_trigger_out [get_bd_pins booth_multiplier_I0/trigger_out] [get_bd_pins divider1_I0/trigger]
  connect_bd_net -net divider1_I0_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_I0/Iavg1]
  connect_bd_net -net divider1_I0_trigger_out [get_bd_pins trigger_out] [get_bd_pins divider1_I0/trigger_out]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_I0/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_I0 [get_bd_pins I] [get_bd_pins booth_multiplier_I0/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_I0/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_I0/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_I0/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_I0/clk] [get_bd_pins divider1_I0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_I0/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_Q_MSB
proc create_hier_cell_Block_Mem_Q_MSB_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_Q_MSB_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_1, and set properties
  set axi_bram_ctrl_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_1 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_1

  # Create instance: blk_mem_gen_I1, and set properties
  set blk_mem_gen_I1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I1 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I1

  # Create instance: data_splitter_1, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_1
  if { [catch {set data_splitter_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_1

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_1_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_1/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I1/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M01_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_1/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_0/Din]
  connect_bd_net -net axi_bram_ctrl_1_bram_addr_a [get_bd_pins axi_bram_ctrl_1/bram_addr_a] [get_bd_pins data_splitter_1/data_in]
  connect_bd_net -net blk_mem_gen_1_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I1/doutb]
  connect_bd_net -net data_splitter_1_data_out [get_bd_pins blk_mem_gen_I1/addra] [get_bd_pins data_splitter_1/data_out]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_1/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I1/clkb]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins blk_mem_gen_I1/addrb] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_1/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_Q_LSB
proc create_hier_cell_Block_Mem_Q_LSB_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_Q_LSB_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_1, and set properties
  set axi_bram_ctrl_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_1 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_1

  # Create instance: blk_mem_gen_I1, and set properties
  set blk_mem_gen_I1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I1 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I1

  # Create instance: data_splitter_1, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_1
  if { [catch {set data_splitter_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_1

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_3

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_1_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_1/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I1/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M01_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_1/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net axi_bram_ctrl_1_bram_addr_a [get_bd_pins axi_bram_ctrl_1/bram_addr_a] [get_bd_pins data_splitter_1/data_in]
  connect_bd_net -net blk_mem_gen_1_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I1/doutb]
  connect_bd_net -net data_splitter_1_data_out [get_bd_pins blk_mem_gen_I1/addra] [get_bd_pins data_splitter_1/data_out]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_1/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I1/clkb]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins blk_mem_gen_I1/addrb] [get_bd_pins xlslice_3/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_1/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_I_MSB
proc create_hier_cell_Block_Mem_I_MSB_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_I_MSB_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: blk_mem_gen_I, and set properties
  set blk_mem_gen_I [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I

  # Create instance: data_splitter_0, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_0
  if { [catch {set data_splitter_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_0

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_0/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_0/Din]
  connect_bd_net -net axi_bram_ctrl_0_bram_addr_a [get_bd_pins axi_bram_ctrl_0/bram_addr_a] [get_bd_pins data_splitter_0/data_in]
  connect_bd_net -net blk_mem_gen_0_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I/doutb]
  connect_bd_net -net data_splitter_0_data_out [get_bd_pins blk_mem_gen_I/addra] [get_bd_pins data_splitter_0/data_out]
  connect_bd_net -net s_axi_aresetn_1 [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I/clkb]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins blk_mem_gen_I/addrb] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_I_LSB
proc create_hier_cell_Block_Mem_I_LSB_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_I_LSB_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: blk_mem_gen_I, and set properties
  set blk_mem_gen_I [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I

  # Create instance: data_splitter_0, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_0
  if { [catch {set data_splitter_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_0

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_0/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_0/Din]
  connect_bd_net -net axi_bram_ctrl_0_bram_addr_a [get_bd_pins axi_bram_ctrl_0/bram_addr_a] [get_bd_pins data_splitter_0/data_in]
  connect_bd_net -net blk_mem_gen_0_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I/doutb]
  connect_bd_net -net data_splitter_0_data_out [get_bd_pins blk_mem_gen_I/addra] [get_bd_pins data_splitter_0/data_out]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I/clkb]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins blk_mem_gen_I/addrb] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q3_MAD
proc create_hier_cell_Q3_MAD { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q3_MAD() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q2_MAD
proc create_hier_cell_Q2_MAD { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q2_MAD() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q1_MAD
proc create_hier_cell_Q1_MAD { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q1_MAD() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Q0_MAD
proc create_hier_cell_Q0_MAD { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Q0_MAD() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q0, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q0
  if { [catch {set booth_multiplier_Q0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q0, and set properties
  set block_name divider1
  set block_cell_name divider1_Q0
  if { [catch {set divider1_Q0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q0/rst] [get_bd_pins divider1_Q0/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q0/den1]
  connect_bd_net -net booth_multiplier_Q0_half_out [get_bd_pins booth_multiplier_Q0/half_out] [get_bd_pins divider1_Q0/half_in]
  connect_bd_net -net booth_multiplier_Q0_mode_out [get_bd_pins booth_multiplier_Q0/mode_out] [get_bd_pins divider1_Q0/mode_in]
  connect_bd_net -net booth_multiplier_Q0_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q0/mul_output] [get_bd_pins divider1_Q0/I]
  connect_bd_net -net booth_multiplier_Q0_mul_output_valid [get_bd_pins booth_multiplier_Q0/mul_output_valid] [get_bd_pins divider1_Q0/valid_in]
  connect_bd_net -net booth_multiplier_Q0_trigger_out [get_bd_pins booth_multiplier_Q0/trigger_out] [get_bd_pins divider1_Q0/trigger]
  connect_bd_net -net divider1_Q0_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q0/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q0/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q0 [get_bd_pins I] [get_bd_pins booth_multiplier_Q0/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q0/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q0/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q0/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q0/clk] [get_bd_pins divider1_Q0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q0/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I3_MAD
proc create_hier_cell_I3_MAD { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I3_MAD() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I2_MAD
proc create_hier_cell_I2_MAD { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I2_MAD() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_Q1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_Q1
  if { [catch {set booth_multiplier_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_Q1, and set properties
  set block_name divider1
  set block_cell_name divider1_Q1
  if { [catch {set divider1_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_Q1/rst] [get_bd_pins divider1_Q1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_Q1/den1]
  connect_bd_net -net booth_multiplier_Q1_half_out [get_bd_pins booth_multiplier_Q1/half_out] [get_bd_pins divider1_Q1/half_in]
  connect_bd_net -net booth_multiplier_Q1_mode_out [get_bd_pins booth_multiplier_Q1/mode_out] [get_bd_pins divider1_Q1/mode_in]
  connect_bd_net -net booth_multiplier_Q1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_Q1/mul_output] [get_bd_pins divider1_Q1/I]
  connect_bd_net -net booth_multiplier_Q1_mul_output_valid [get_bd_pins booth_multiplier_Q1/mul_output_valid] [get_bd_pins divider1_Q1/valid_in]
  connect_bd_net -net booth_multiplier_Q1_trigger_out [get_bd_pins booth_multiplier_Q1/trigger_out] [get_bd_pins divider1_Q1/trigger]
  connect_bd_net -net divider1_Q1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_Q1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_Q1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_Q1 [get_bd_pins I] [get_bd_pins booth_multiplier_Q1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_Q1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_Q1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_Q1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_Q1/clk] [get_bd_pins divider1_Q1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_Q1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I1_MAD
proc create_hier_cell_I1_MAD { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I1_MAD() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in

  # Create instance: booth_multiplier_I1, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_I1
  if { [catch {set booth_multiplier_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_I1, and set properties
  set block_name divider1
  set block_cell_name divider1_I1
  if { [catch {set divider1_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_I1/rst] [get_bd_pins divider1_I1/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_I1/den1]
  connect_bd_net -net booth_multiplier_I1_half_out [get_bd_pins booth_multiplier_I1/half_out] [get_bd_pins divider1_I1/half_in]
  connect_bd_net -net booth_multiplier_I1_mode_out [get_bd_pins booth_multiplier_I1/mode_out] [get_bd_pins divider1_I1/mode_in]
  connect_bd_net -net booth_multiplier_I1_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_I1/mul_output] [get_bd_pins divider1_I1/I]
  connect_bd_net -net booth_multiplier_I1_mul_output_valid [get_bd_pins booth_multiplier_I1/mul_output_valid] [get_bd_pins divider1_I1/valid_in]
  connect_bd_net -net booth_multiplier_I1_trigger_out [get_bd_pins booth_multiplier_I1/trigger_out] [get_bd_pins divider1_I1/trigger]
  connect_bd_net -net divider1_I1_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_I1/Iavg1]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_I1/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_I1 [get_bd_pins I] [get_bd_pins booth_multiplier_I1/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_I1/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_I1/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_I1/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_I1/clk] [get_bd_pins divider1_I1/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_I1/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: I0_MAD
proc create_hier_cell_I0_MAD { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_I0_MAD() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 15 -to 0 I
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_value
  create_bd_pin -dir I -from 15 -to 0 den1
  create_bd_pin -dir I half_in
  create_bd_pin -dir I in_valid
  create_bd_pin -dir I -from 1 -to 0 mode_in
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 15 -to 0 trigger_in
  create_bd_pin -dir O -from 15 -to 0 trigger_out

  # Create instance: booth_multiplier_I0, and set properties
  set block_name booth_multiplier
  set block_cell_name booth_multiplier_I0
  if { [catch {set booth_multiplier_I0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $booth_multiplier_I0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: divider1_I0, and set properties
  set block_name divider1
  set block_cell_name divider1_I0
  if { [catch {set divider1_I0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $divider1_I0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Net [get_bd_pins rst] [get_bd_pins booth_multiplier_I0/rst] [get_bd_pins divider1_I0/rst]
  connect_bd_net -net Net1 [get_bd_pins den1] [get_bd_pins divider1_I0/den1]
  connect_bd_net -net booth_multiplier_I0_half_out [get_bd_pins booth_multiplier_I0/half_out] [get_bd_pins divider1_I0/half_in]
  connect_bd_net -net booth_multiplier_I0_mode_out [get_bd_pins booth_multiplier_I0/mode_out] [get_bd_pins divider1_I0/mode_in]
  connect_bd_net -net booth_multiplier_I0_mul_output [get_bd_pins I1] [get_bd_pins booth_multiplier_I0/mul_output] [get_bd_pins divider1_I0/I]
  connect_bd_net -net booth_multiplier_I0_mul_output_valid [get_bd_pins booth_multiplier_I0/mul_output_valid] [get_bd_pins divider1_I0/valid_in]
  connect_bd_net -net booth_multiplier_I0_trigger_out [get_bd_pins booth_multiplier_I0/trigger_out] [get_bd_pins divider1_I0/trigger]
  connect_bd_net -net divider1_I0_Iavg1 [get_bd_pins Iavg1] [get_bd_pins divider1_I0/Iavg1]
  connect_bd_net -net divider1_I0_trigger_out [get_bd_pins trigger_out] [get_bd_pins divider1_I0/trigger_out]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins half_in] [get_bd_pins booth_multiplier_I0/half_in]
  connect_bd_net -net gaussian_gen1_0_data_out_I0 [get_bd_pins I] [get_bd_pins booth_multiplier_I0/I]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_in] [get_bd_pins booth_multiplier_I0/mode_in]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger_in] [get_bd_pins booth_multiplier_I0/trigger_in]
  connect_bd_net -net mul_factor_main [get_bd_pins coeff_value] [get_bd_pins booth_multiplier_I0/coeff_value]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins booth_multiplier_I0/clk] [get_bd_pins divider1_I0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins in_valid] [get_bd_pins booth_multiplier_I0/in_valid]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_Q_MSB
proc create_hier_cell_Block_Mem_Q_MSB { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_Q_MSB() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_1, and set properties
  set axi_bram_ctrl_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_1 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_1

  # Create instance: blk_mem_gen_I1, and set properties
  set blk_mem_gen_I1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I1 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I1

  # Create instance: data_splitter_1, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_1
  if { [catch {set data_splitter_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_1

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_1_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_1/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I1/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M01_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_1/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_0/Din]
  connect_bd_net -net axi_bram_ctrl_1_bram_addr_a [get_bd_pins axi_bram_ctrl_1/bram_addr_a] [get_bd_pins data_splitter_1/data_in]
  connect_bd_net -net blk_mem_gen_1_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I1/doutb]
  connect_bd_net -net data_splitter_1_data_out [get_bd_pins blk_mem_gen_I1/addra] [get_bd_pins data_splitter_1/data_out]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_1/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I1/clkb]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins blk_mem_gen_I1/addrb] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_1/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_Q_LSB
proc create_hier_cell_Block_Mem_Q_LSB { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_Q_LSB() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_1, and set properties
  set axi_bram_ctrl_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_1 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_1

  # Create instance: blk_mem_gen_I1, and set properties
  set blk_mem_gen_I1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I1 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I1

  # Create instance: data_splitter_1, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_1
  if { [catch {set data_splitter_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_1

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_3

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_1_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_1/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I1/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M01_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_1/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net axi_bram_ctrl_1_bram_addr_a [get_bd_pins axi_bram_ctrl_1/bram_addr_a] [get_bd_pins data_splitter_1/data_in]
  connect_bd_net -net blk_mem_gen_1_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I1/doutb]
  connect_bd_net -net data_splitter_1_data_out [get_bd_pins blk_mem_gen_I1/addra] [get_bd_pins data_splitter_1/data_out]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_1/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I1/clkb]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins blk_mem_gen_I1/addrb] [get_bd_pins xlslice_3/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_1/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_I_MSB
proc create_hier_cell_Block_Mem_I_MSB { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_I_MSB() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: blk_mem_gen_I, and set properties
  set blk_mem_gen_I [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I

  # Create instance: data_splitter_0, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_0
  if { [catch {set data_splitter_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_0

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_0/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_0/Din]
  connect_bd_net -net axi_bram_ctrl_0_bram_addr_a [get_bd_pins axi_bram_ctrl_0/bram_addr_a] [get_bd_pins data_splitter_0/data_in]
  connect_bd_net -net blk_mem_gen_0_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I/doutb]
  connect_bd_net -net data_splitter_0_data_out [get_bd_pins blk_mem_gen_I/addra] [get_bd_pins data_splitter_0/data_out]
  connect_bd_net -net s_axi_aresetn_1 [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I/clkb]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins blk_mem_gen_I/addrb] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Block_Mem_I_LSB
proc create_hier_cell_Block_Mem_I_LSB { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Block_Mem_I_LSB() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir I -from 12 -to 0 addrb
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {Hamming} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: blk_mem_gen_I, and set properties
  set blk_mem_gen_I [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_I ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {32} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {2048} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {32} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_I

  # Create instance: data_splitter_0, and set properties
  set block_name data_splitter
  set block_cell_name data_splitter_0
  if { [catch {set data_splitter_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $data_splitter_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
   CONFIG.Na {12} \
   CONFIG.Nb {2} \
 ] $data_splitter_0

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {12} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {13} \
   CONFIG.DOUT_WIDTH {13} \
 ] $xlslice_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_I/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_0/S_AXI]

  # Create port connections
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins xlslice_0/Din]
  connect_bd_net -net axi_bram_ctrl_0_bram_addr_a [get_bd_pins axi_bram_ctrl_0/bram_addr_a] [get_bd_pins data_splitter_0/data_in]
  connect_bd_net -net blk_mem_gen_0_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_I/doutb]
  connect_bd_net -net data_splitter_0_data_out [get_bd_pins blk_mem_gen_I/addra] [get_bd_pins data_splitter_0/data_out]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins blk_mem_gen_I/clkb]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins blk_mem_gen_I/addrb] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net zynq_ultra_ps_e_0_pl_clk0 [get_bd_pins s_axi_aclk] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: trigger_gen3
proc create_hier_cell_trigger_gen3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_trigger_gen3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 31 -to 0 adc_dac_latency
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 12 -to 0 dac_addr
  create_bd_pin -dir I -from 31 -to 0 gaussian_width
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 31 -to 0 trigger_delay
  create_bd_pin -dir O trigger_new
  create_bd_pin -dir I -from 31 -to 0 trigger_width

  # Create instance: trigger_gen_pkg_1, and set properties
  set block_name trigger_gen_pkg
  set block_cell_name trigger_gen_pkg_1
  if { [catch {set trigger_gen_pkg_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $trigger_gen_pkg_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.ADD_WD {17} \
   CONFIG.IN_WD {32} \
 ] $trigger_gen_pkg_1

  # Create port connections
  connect_bd_net -net DAC_13_Dout1 [get_bd_pins rst] [get_bd_pins trigger_gen_pkg_1/rst]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins dac_addr] [get_bd_pins trigger_gen_pkg_1/dac_addr]
  connect_bd_net -net adc_dac_latency_1 [get_bd_pins adc_dac_latency] [get_bd_pins trigger_gen_pkg_1/adc_dac_latency]
  connect_bd_net -net gaussian_width_1 [get_bd_pins gaussian_width] [get_bd_pins trigger_gen_pkg_1/gaussian_width]
  connect_bd_net -net trigger_delay_1 [get_bd_pins trigger_delay] [get_bd_pins trigger_gen_pkg_1/trigger_delay]
  connect_bd_net -net trigger_gen_pkg_1_trigger_new [get_bd_pins trigger_new] [get_bd_pins trigger_gen_pkg_1/trigger_new]
  connect_bd_net -net trigger_width_1 [get_bd_pins trigger_width] [get_bd_pins trigger_gen_pkg_1/trigger_width]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins trigger_gen_pkg_1/clk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: trigger_gen2
proc create_hier_cell_trigger_gen2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_trigger_gen2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 31 -to 0 adc_dac_latency
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 12 -to 0 dac_addr
  create_bd_pin -dir I -from 31 -to 0 gaussian_width
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 31 -to 0 trigger_delay
  create_bd_pin -dir O trigger_new
  create_bd_pin -dir I -from 31 -to 0 trigger_width

  # Create instance: trigger_gen_pkg_1, and set properties
  set block_name trigger_gen_pkg
  set block_cell_name trigger_gen_pkg_1
  if { [catch {set trigger_gen_pkg_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $trigger_gen_pkg_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.ADD_WD {17} \
   CONFIG.IN_WD {32} \
 ] $trigger_gen_pkg_1

  # Create port connections
  connect_bd_net -net DAC_13_Dout1 [get_bd_pins rst] [get_bd_pins trigger_gen_pkg_1/rst]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins dac_addr] [get_bd_pins trigger_gen_pkg_1/dac_addr]
  connect_bd_net -net adc_dac_latency_1 [get_bd_pins adc_dac_latency] [get_bd_pins trigger_gen_pkg_1/adc_dac_latency]
  connect_bd_net -net gaussian_width_1 [get_bd_pins gaussian_width] [get_bd_pins trigger_gen_pkg_1/gaussian_width]
  connect_bd_net -net trigger_delay_1 [get_bd_pins trigger_delay] [get_bd_pins trigger_gen_pkg_1/trigger_delay]
  connect_bd_net -net trigger_gen_pkg_1_trigger_new [get_bd_pins trigger_new] [get_bd_pins trigger_gen_pkg_1/trigger_new]
  connect_bd_net -net trigger_width_1 [get_bd_pins trigger_width] [get_bd_pins trigger_gen_pkg_1/trigger_width]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins trigger_gen_pkg_1/clk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: trigger_gen1
proc create_hier_cell_trigger_gen1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_trigger_gen1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 31 -to 0 adc_dac_latency
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 12 -to 0 dac_addr
  create_bd_pin -dir I -from 31 -to 0 gaussian_width
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -from 31 -to 0 trigger_delay
  create_bd_pin -dir O trigger_new
  create_bd_pin -dir I -from 31 -to 0 trigger_width

  # Create instance: trigger_gen_pkg_1, and set properties
  set block_name trigger_gen_pkg
  set block_cell_name trigger_gen_pkg_1
  if { [catch {set trigger_gen_pkg_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $trigger_gen_pkg_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.ADD_WD {17} \
   CONFIG.IN_WD {32} \
 ] $trigger_gen_pkg_1

  # Create port connections
  connect_bd_net -net DAC_13_Dout1 [get_bd_pins rst] [get_bd_pins trigger_gen_pkg_1/rst]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins dac_addr] [get_bd_pins trigger_gen_pkg_1/dac_addr]
  connect_bd_net -net adc_dac_latency_1 [get_bd_pins adc_dac_latency] [get_bd_pins trigger_gen_pkg_1/adc_dac_latency]
  connect_bd_net -net gaussian_width_1 [get_bd_pins gaussian_width] [get_bd_pins trigger_gen_pkg_1/gaussian_width]
  connect_bd_net -net trigger_delay_1 [get_bd_pins trigger_delay] [get_bd_pins trigger_gen_pkg_1/trigger_delay]
  connect_bd_net -net trigger_gen_pkg_1_trigger_new [get_bd_pins trigger_new] [get_bd_pins trigger_gen_pkg_1/trigger_new]
  connect_bd_net -net trigger_width_1 [get_bd_pins trigger_width] [get_bd_pins trigger_gen_pkg_1/trigger_width]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins trigger_gen_pkg_1/clk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: trigger_gen0
proc create_hier_cell_trigger_gen0 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_trigger_gen0() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 31 -to 0 adc_dac_latency
  create_bd_pin -dir I -from 12 -to 0 dac_addr
  create_bd_pin -dir I -from 31 -to 0 gaussian_width
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -from 31 -to 0 trigger_delay
  create_bd_pin -dir O trigger_new
  create_bd_pin -dir I -from 31 -to 0 trigger_width

  # Create instance: trigger_gen_pkg_0, and set properties
  set block_name trigger_gen_pkg
  set block_cell_name trigger_gen_pkg_0
  if { [catch {set trigger_gen_pkg_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $trigger_gen_pkg_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.ADD_WD {13} \
   CONFIG.IN_WD {32} \
 ] $trigger_gen_pkg_0

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins dac_addr] [get_bd_pins trigger_gen_pkg_0/dac_addr]
  connect_bd_net -net adc_dac_latency_1 [get_bd_pins adc_dac_latency] [get_bd_pins trigger_gen_pkg_0/adc_dac_latency]
  connect_bd_net -net gaussian_width_1 [get_bd_pins gaussian_width] [get_bd_pins trigger_gen_pkg_0/gaussian_width]
  connect_bd_net -net rst [get_bd_pins rst] [get_bd_pins trigger_gen_pkg_0/rst]
  connect_bd_net -net trigger_delay_1 [get_bd_pins trigger_delay] [get_bd_pins trigger_gen_pkg_0/trigger_delay]
  connect_bd_net -net trigger_gen_pkg_0_trigger_new [get_bd_pins trigger_new] [get_bd_pins trigger_gen_pkg_0/trigger_new]
  connect_bd_net -net trigger_width_1 [get_bd_pins trigger_width] [get_bd_pins trigger_gen_pkg_0/trigger_width]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins s_axi_aclk] [get_bd_pins trigger_gen_pkg_0/clk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: iir_coeff
proc create_hier_cell_iir_coeff { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_iir_coeff() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir O -from 0 -to 0 Dout
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir O -from 15 -to 0 coeff_a2b_ADC_0020
  create_bd_pin -dir O -from 15 -to 0 coeff_a2b_ADC_0222
  create_bd_pin -dir O -from 15 -to 0 coeff_a2b_ADC_1030
  create_bd_pin -dir O -from 15 -to 0 coeff_a2b_ADC_1232
  create_bd_pin -dir O -from 15 -to 0 coeff_a3b_ADC_0020
  create_bd_pin -dir O -from 15 -to 0 coeff_a3b_ADC_0222
  create_bd_pin -dir O -from 15 -to 0 coeff_a3b_ADC_1030
  create_bd_pin -dir O -from 15 -to 0 coeff_a3b_ADC_1232
  create_bd_pin -dir O -from 15 -to 0 coeff_a4_ADC_0020
  create_bd_pin -dir O -from 15 -to 0 coeff_a4_ADC_0222
  create_bd_pin -dir O -from 15 -to 0 coeff_a4_ADC_1030
  create_bd_pin -dir O -from 15 -to 0 coeff_a4_ADC_1232
  create_bd_pin -dir O -from 15 -to 0 coeff_ab_ADC_0020
  create_bd_pin -dir O -from 15 -to 0 coeff_ab_ADC_0222
  create_bd_pin -dir O -from 15 -to 0 coeff_ab_ADC_1030
  create_bd_pin -dir O -from 15 -to 0 coeff_ab_ADC_1232
  create_bd_pin -dir O -from 15 -to 0 coeff_b_ADC_0020
  create_bd_pin -dir O -from 15 -to 0 coeff_b_ADC_0222
  create_bd_pin -dir O -from 15 -to 0 coeff_b_ADC_1030
  create_bd_pin -dir O -from 15 -to 0 coeff_b_ADC_1232
  create_bd_pin -dir O -from 1 -to 0 din_sel_ila
  create_bd_pin -dir O -from 1023 -to 0 douta
  create_bd_pin -dir O filter_bypass_sel_00_20
  create_bd_pin -dir O filter_bypass_sel_02_22
  create_bd_pin -dir O filter_bypass_sel_10_30
  create_bd_pin -dir O filter_bypass_sel_12_32
  create_bd_pin -dir O -from 1 -to 0 order_00_20
  create_bd_pin -dir O -from 1 -to 0 order_02_22
  create_bd_pin -dir O -from 1 -to 0 order_10_30
  create_bd_pin -dir O -from 1 -to 0 order_12_32
  create_bd_pin -dir O -from 1 -to 0 quadrant_00_20
  create_bd_pin -dir O -from 1 -to 0 quadrant_02_22
  create_bd_pin -dir O -from 1 -to 0 quadrant_10_30
  create_bd_pin -dir O -from 1 -to 0 quadrant_12_32
  create_bd_pin -dir O rotation_bypass_00_20
  create_bd_pin -dir O rotation_bypass_02_22
  create_bd_pin -dir O rotation_bypass_10_30
  create_bd_pin -dir O rotation_bypass_12_32
  create_bd_pin -dir I -type rst s_axi_aresetn
  create_bd_pin -dir O sel_adc_00_20_mux
  create_bd_pin -dir O sel_adc_02_22_mux
  create_bd_pin -dir O sel_adc_10_30_mux
  create_bd_pin -dir O sel_adc_12_32_mux
  create_bd_pin -dir O -from 23 -to 0 theta_00_20
  create_bd_pin -dir O -from 23 -to 0 theta_02_22
  create_bd_pin -dir O -from 23 -to 0 theta_10_30
  create_bd_pin -dir O -from 23 -to 0 theta_12_32

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {0} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: blk_mem_gen_0, and set properties
  set blk_mem_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_0 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {WRITE_FIRST} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {50} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {1024} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {64} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {1024} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_0

  # Create instance: splitter_coeff_0, and set properties
  set block_name splitter_coeff
  set block_cell_name splitter_coeff_0
  if { [catch {set splitter_coeff_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $splitter_coeff_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {576} \
   CONFIG.DIN_TO {576} \
   CONFIG.DIN_WIDTH {1024} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {7} \
   CONFIG.DIN_TO {2} \
   CONFIG.DIN_WIDTH {12} \
   CONFIG.DOUT_WIDTH {6} \
 ] $xlslice_3

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_0/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M13_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_0/S_AXI]

  # Create port connections
  connect_bd_net -net axi_bram_ctrl_0_bram_addr_a [get_bd_pins axi_bram_ctrl_0/bram_addr_a] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net blk_mem_gen_0_douta [get_bd_pins douta] [get_bd_pins blk_mem_gen_0/doutb] [get_bd_pins splitter_coeff_0/bram_data] [get_bd_pins xlslice_2/Din]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn]
  connect_bd_net -net splitter_coeff_0_coeff_a2b_ADC_0020 [get_bd_pins coeff_a2b_ADC_0020] [get_bd_pins splitter_coeff_0/coeff_a2b_ADC_0020]
  connect_bd_net -net splitter_coeff_0_coeff_a2b_ADC_0222 [get_bd_pins coeff_a2b_ADC_0222] [get_bd_pins splitter_coeff_0/coeff_a2b_ADC_0222]
  connect_bd_net -net splitter_coeff_0_coeff_a2b_ADC_1030 [get_bd_pins coeff_a2b_ADC_1030] [get_bd_pins splitter_coeff_0/coeff_a2b_ADC_1030]
  connect_bd_net -net splitter_coeff_0_coeff_a2b_ADC_1232 [get_bd_pins coeff_a2b_ADC_1232] [get_bd_pins splitter_coeff_0/coeff_a2b_ADC_1232]
  connect_bd_net -net splitter_coeff_0_coeff_a3b_ADC_0020 [get_bd_pins coeff_a3b_ADC_0020] [get_bd_pins splitter_coeff_0/coeff_a3b_ADC_0020]
  connect_bd_net -net splitter_coeff_0_coeff_a3b_ADC_0222 [get_bd_pins coeff_a3b_ADC_0222] [get_bd_pins splitter_coeff_0/coeff_a3b_ADC_0222]
  connect_bd_net -net splitter_coeff_0_coeff_a3b_ADC_1030 [get_bd_pins coeff_a3b_ADC_1030] [get_bd_pins splitter_coeff_0/coeff_a3b_ADC_1030]
  connect_bd_net -net splitter_coeff_0_coeff_a3b_ADC_1232 [get_bd_pins coeff_a3b_ADC_1232] [get_bd_pins splitter_coeff_0/coeff_a3b_ADC_1232]
  connect_bd_net -net splitter_coeff_0_coeff_a4_ADC_0020 [get_bd_pins coeff_a4_ADC_0020] [get_bd_pins splitter_coeff_0/coeff_a4_ADC_0020]
  connect_bd_net -net splitter_coeff_0_coeff_a4_ADC_0222 [get_bd_pins coeff_a4_ADC_0222] [get_bd_pins splitter_coeff_0/coeff_a4_ADC_0222]
  connect_bd_net -net splitter_coeff_0_coeff_a4_ADC_1030 [get_bd_pins coeff_a4_ADC_1030] [get_bd_pins splitter_coeff_0/coeff_a4_ADC_1030]
  connect_bd_net -net splitter_coeff_0_coeff_a4_ADC_1232 [get_bd_pins coeff_a4_ADC_1232] [get_bd_pins splitter_coeff_0/coeff_a4_ADC_1232]
  connect_bd_net -net splitter_coeff_0_coeff_ab_ADC_0020 [get_bd_pins coeff_ab_ADC_0020] [get_bd_pins splitter_coeff_0/coeff_ab_ADC_0020]
  connect_bd_net -net splitter_coeff_0_coeff_ab_ADC_0222 [get_bd_pins coeff_ab_ADC_0222] [get_bd_pins splitter_coeff_0/coeff_ab_ADC_0222]
  connect_bd_net -net splitter_coeff_0_coeff_ab_ADC_1030 [get_bd_pins coeff_ab_ADC_1030] [get_bd_pins splitter_coeff_0/coeff_ab_ADC_1030]
  connect_bd_net -net splitter_coeff_0_coeff_ab_ADC_1232 [get_bd_pins coeff_ab_ADC_1232] [get_bd_pins splitter_coeff_0/coeff_ab_ADC_1232]
  connect_bd_net -net splitter_coeff_0_coeff_b_ADC_0020 [get_bd_pins coeff_b_ADC_0020] [get_bd_pins splitter_coeff_0/coeff_b_ADC_0020]
  connect_bd_net -net splitter_coeff_0_coeff_b_ADC_0222 [get_bd_pins coeff_b_ADC_0222] [get_bd_pins splitter_coeff_0/coeff_b_ADC_0222]
  connect_bd_net -net splitter_coeff_0_coeff_b_ADC_1030 [get_bd_pins coeff_b_ADC_1030] [get_bd_pins splitter_coeff_0/coeff_b_ADC_1030]
  connect_bd_net -net splitter_coeff_0_coeff_b_ADC_1232 [get_bd_pins coeff_b_ADC_1232] [get_bd_pins splitter_coeff_0/coeff_b_ADC_1232]
  connect_bd_net -net splitter_coeff_0_din_sel_ila [get_bd_pins din_sel_ila] [get_bd_pins splitter_coeff_0/din_sel_ila]
  connect_bd_net -net splitter_coeff_0_filter_bypass_sel_00_20 [get_bd_pins filter_bypass_sel_00_20] [get_bd_pins splitter_coeff_0/filter_bypass_sel_00_20]
  connect_bd_net -net splitter_coeff_0_filter_bypass_sel_02_22 [get_bd_pins filter_bypass_sel_02_22] [get_bd_pins splitter_coeff_0/filter_bypass_sel_02_22]
  connect_bd_net -net splitter_coeff_0_filter_bypass_sel_10_30 [get_bd_pins filter_bypass_sel_10_30] [get_bd_pins splitter_coeff_0/filter_bypass_sel_10_30]
  connect_bd_net -net splitter_coeff_0_filter_bypass_sel_12_32 [get_bd_pins filter_bypass_sel_12_32] [get_bd_pins splitter_coeff_0/filter_bypass_sel_12_32]
  connect_bd_net -net splitter_coeff_0_order_00_20 [get_bd_pins order_00_20] [get_bd_pins splitter_coeff_0/order_00_20]
  connect_bd_net -net splitter_coeff_0_order_02_22 [get_bd_pins order_02_22] [get_bd_pins splitter_coeff_0/order_02_22]
  connect_bd_net -net splitter_coeff_0_order_10_30 [get_bd_pins order_10_30] [get_bd_pins splitter_coeff_0/order_10_30]
  connect_bd_net -net splitter_coeff_0_order_12_32 [get_bd_pins order_12_32] [get_bd_pins splitter_coeff_0/order_12_32]
  connect_bd_net -net splitter_coeff_0_quadrant_00_20 [get_bd_pins quadrant_00_20] [get_bd_pins splitter_coeff_0/quadrant_00_20]
  connect_bd_net -net splitter_coeff_0_quadrant_02_22 [get_bd_pins quadrant_02_22] [get_bd_pins splitter_coeff_0/quadrant_02_22]
  connect_bd_net -net splitter_coeff_0_quadrant_10_30 [get_bd_pins quadrant_10_30] [get_bd_pins splitter_coeff_0/quadrant_10_30]
  connect_bd_net -net splitter_coeff_0_quadrant_12_32 [get_bd_pins quadrant_12_32] [get_bd_pins splitter_coeff_0/quadrant_12_32]
  connect_bd_net -net splitter_coeff_0_rotation_bypass_00_20 [get_bd_pins rotation_bypass_00_20] [get_bd_pins splitter_coeff_0/rotation_bypass_00_20]
  connect_bd_net -net splitter_coeff_0_rotation_bypass_02_22 [get_bd_pins rotation_bypass_02_22] [get_bd_pins splitter_coeff_0/rotation_bypass_02_22]
  connect_bd_net -net splitter_coeff_0_rotation_bypass_10_30 [get_bd_pins rotation_bypass_10_30] [get_bd_pins splitter_coeff_0/rotation_bypass_10_30]
  connect_bd_net -net splitter_coeff_0_rotation_bypass_12_32 [get_bd_pins rotation_bypass_12_32] [get_bd_pins splitter_coeff_0/rotation_bypass_12_32]
  connect_bd_net -net splitter_coeff_0_sel_adc_00_20_mux [get_bd_pins sel_adc_00_20_mux] [get_bd_pins splitter_coeff_0/sel_adc_00_20_mux]
  connect_bd_net -net splitter_coeff_0_sel_adc_02_22_mux [get_bd_pins sel_adc_02_22_mux] [get_bd_pins splitter_coeff_0/sel_adc_02_22_mux]
  connect_bd_net -net splitter_coeff_0_sel_adc_10_30_mux [get_bd_pins sel_adc_10_30_mux] [get_bd_pins splitter_coeff_0/sel_adc_10_30_mux]
  connect_bd_net -net splitter_coeff_0_sel_adc_12_32_mux [get_bd_pins sel_adc_12_32_mux] [get_bd_pins splitter_coeff_0/sel_adc_12_32_mux]
  connect_bd_net -net splitter_coeff_0_theta_00_20 [get_bd_pins theta_00_20] [get_bd_pins splitter_coeff_0/theta_00_20]
  connect_bd_net -net splitter_coeff_0_theta_02_22 [get_bd_pins theta_02_22] [get_bd_pins splitter_coeff_0/theta_02_22]
  connect_bd_net -net splitter_coeff_0_theta_10_30 [get_bd_pins theta_10_30] [get_bd_pins splitter_coeff_0/theta_10_30]
  connect_bd_net -net splitter_coeff_0_theta_12_32 [get_bd_pins theta_12_32] [get_bd_pins splitter_coeff_0/theta_12_32]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk] [get_bd_pins blk_mem_gen_0/clkb] [get_bd_pins splitter_coeff_0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins blk_mem_gen_0/addrb] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins Dout] [get_bd_pins splitter_coeff_0/update] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins blk_mem_gen_0/addra] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trigger_width_3
proc create_hier_cell_hier_trigger_width_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trigger_width_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trigger_width_2
proc create_hier_cell_hier_trigger_width_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trigger_width_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trigger_width_1
proc create_hier_cell_hier_trigger_width_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trigger_width_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trigger_width_0
proc create_hier_cell_hier_trigger_width_0 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trigger_width_0() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trigger_delay_3
proc create_hier_cell_hier_trigger_delay_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trigger_delay_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trigger_delay_2
proc create_hier_cell_hier_trigger_delay_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trigger_delay_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trigger_delay_1
proc create_hier_cell_hier_trigger_delay_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trigger_delay_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trigger_delay_0
proc create_hier_cell_hier_trigger_delay_0 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trigger_delay_0() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trig_sel7
proc create_hier_cell_hier_trig_sel7 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trig_sel7() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 127 -to 0 data2
  create_bd_pin -dir O -from 127 -to 0 data_out
  create_bd_pin -dir I readout_pulse_in
  create_bd_pin -dir I sel1

  # Create instance: merger1_0, and set properties
  set block_name merger1
  set block_cell_name merger1_0
  if { [catch {set merger1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {128} \
 ] $param_mux_2

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {32764} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_0

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_1

  # Create port connections
  connect_bd_net -net DAC_12_D_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net merger1_0_Dout [get_bd_pins merger1_0/Dout] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins merger1_0/DI0] [get_bd_pins merger1_0/DI1] [get_bd_pins merger1_0/DI2] [get_bd_pins merger1_0/DI3] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out1 [get_bd_pins data_out] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net splitter_trig_0_trig_sel0 [get_bd_pins sel1] [get_bd_pins param_mux_2/sel]
  connect_bd_net -net trigger_gen_pkg_0_trigger_new [get_bd_pins readout_pulse_in] [get_bd_pins param_mux_1/sel]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins param_mux_1/data1] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net xlconstant_1_dout [get_bd_pins merger1_0/DQ0] [get_bd_pins merger1_0/DQ1] [get_bd_pins merger1_0/DQ2] [get_bd_pins merger1_0/DQ3] [get_bd_pins param_mux_1/data2] [get_bd_pins xlconstant_1/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trig_sel6
proc create_hier_cell_hier_trig_sel6 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trig_sel6() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 127 -to 0 data2
  create_bd_pin -dir O -from 127 -to 0 data_out
  create_bd_pin -dir I readout_pulse_in
  create_bd_pin -dir I sel1

  # Create instance: merger1_0, and set properties
  set block_name merger1
  set block_cell_name merger1_0
  if { [catch {set merger1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {128} \
 ] $param_mux_2

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {32764} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_0

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_1

  # Create port connections
  connect_bd_net -net DAC_12_D_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net merger1_0_Dout [get_bd_pins merger1_0/Dout] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins merger1_0/DI0] [get_bd_pins merger1_0/DI1] [get_bd_pins merger1_0/DI2] [get_bd_pins merger1_0/DI3] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out1 [get_bd_pins data_out] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net splitter_trig_0_trig_sel0 [get_bd_pins sel1] [get_bd_pins param_mux_2/sel]
  connect_bd_net -net trigger_gen_pkg_0_trigger_new [get_bd_pins readout_pulse_in] [get_bd_pins param_mux_1/sel]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins param_mux_1/data1] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net xlconstant_1_dout [get_bd_pins merger1_0/DQ0] [get_bd_pins merger1_0/DQ1] [get_bd_pins merger1_0/DQ2] [get_bd_pins merger1_0/DQ3] [get_bd_pins param_mux_1/data2] [get_bd_pins xlconstant_1/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trig_sel5
proc create_hier_cell_hier_trig_sel5 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trig_sel5() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 127 -to 0 data2
  create_bd_pin -dir O -from 127 -to 0 data_out
  create_bd_pin -dir I readout_pulse_in
  create_bd_pin -dir I sel1

  # Create instance: merger1_0, and set properties
  set block_name merger1
  set block_cell_name merger1_0
  if { [catch {set merger1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {128} \
 ] $param_mux_2

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {32764} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_0

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_1

  # Create port connections
  connect_bd_net -net DAC_12_D_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net merger1_0_Dout [get_bd_pins merger1_0/Dout] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins merger1_0/DI0] [get_bd_pins merger1_0/DI1] [get_bd_pins merger1_0/DI2] [get_bd_pins merger1_0/DI3] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out1 [get_bd_pins data_out] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net splitter_trig_0_trig_sel0 [get_bd_pins sel1] [get_bd_pins param_mux_2/sel]
  connect_bd_net -net trigger_gen_pkg_0_trigger_new [get_bd_pins readout_pulse_in] [get_bd_pins param_mux_1/sel]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins param_mux_1/data1] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net xlconstant_1_dout [get_bd_pins merger1_0/DQ0] [get_bd_pins merger1_0/DQ1] [get_bd_pins merger1_0/DQ2] [get_bd_pins merger1_0/DQ3] [get_bd_pins param_mux_1/data2] [get_bd_pins xlconstant_1/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trig_sel4
proc create_hier_cell_hier_trig_sel4 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trig_sel4() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 127 -to 0 data2
  create_bd_pin -dir O -from 127 -to 0 data_out
  create_bd_pin -dir I readout_pulse_in
  create_bd_pin -dir I sel1

  # Create instance: merger1_0, and set properties
  set block_name merger1
  set block_cell_name merger1_0
  if { [catch {set merger1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {128} \
 ] $param_mux_2

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {32764} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_0

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_1

  # Create port connections
  connect_bd_net -net DAC_12_D_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net merger1_0_Dout [get_bd_pins merger1_0/Dout] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins merger1_0/DI0] [get_bd_pins merger1_0/DI1] [get_bd_pins merger1_0/DI2] [get_bd_pins merger1_0/DI3] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out1 [get_bd_pins data_out] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net splitter_trig_0_trig_sel0 [get_bd_pins sel1] [get_bd_pins param_mux_2/sel]
  connect_bd_net -net trigger_gen_pkg_0_trigger_new [get_bd_pins readout_pulse_in] [get_bd_pins param_mux_1/sel]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins param_mux_1/data1] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net xlconstant_1_dout [get_bd_pins merger1_0/DQ0] [get_bd_pins merger1_0/DQ1] [get_bd_pins merger1_0/DQ2] [get_bd_pins merger1_0/DQ3] [get_bd_pins param_mux_1/data2] [get_bd_pins xlconstant_1/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trig_sel3
proc create_hier_cell_hier_trig_sel3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trig_sel3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 127 -to 0 data2
  create_bd_pin -dir O -from 127 -to 0 data_out
  create_bd_pin -dir I readout_pulse_in
  create_bd_pin -dir I sel1

  # Create instance: merger1_0, and set properties
  set block_name merger1
  set block_cell_name merger1_0
  if { [catch {set merger1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {128} \
 ] $param_mux_2

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {32764} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_0

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_1

  # Create port connections
  connect_bd_net -net DAC_12_D_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net merger1_0_Dout [get_bd_pins merger1_0/Dout] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins merger1_0/DI0] [get_bd_pins merger1_0/DI1] [get_bd_pins merger1_0/DI2] [get_bd_pins merger1_0/DI3] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out1 [get_bd_pins data_out] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net splitter_trig_0_trig_sel0 [get_bd_pins sel1] [get_bd_pins param_mux_2/sel]
  connect_bd_net -net trigger_gen_pkg_0_trigger_new [get_bd_pins readout_pulse_in] [get_bd_pins param_mux_1/sel]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins param_mux_1/data1] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net xlconstant_1_dout [get_bd_pins merger1_0/DQ0] [get_bd_pins merger1_0/DQ1] [get_bd_pins merger1_0/DQ2] [get_bd_pins merger1_0/DQ3] [get_bd_pins param_mux_1/data2] [get_bd_pins xlconstant_1/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trig_sel2
proc create_hier_cell_hier_trig_sel2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trig_sel2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 127 -to 0 data2
  create_bd_pin -dir O -from 127 -to 0 data_out
  create_bd_pin -dir I readout_pulse_in
  create_bd_pin -dir I sel1

  # Create instance: merger1_0, and set properties
  set block_name merger1
  set block_cell_name merger1_0
  if { [catch {set merger1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {128} \
 ] $param_mux_2

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {32764} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_0

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_1

  # Create port connections
  connect_bd_net -net DAC_12_D_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net merger1_0_Dout [get_bd_pins merger1_0/Dout] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins merger1_0/DI0] [get_bd_pins merger1_0/DI1] [get_bd_pins merger1_0/DI2] [get_bd_pins merger1_0/DI3] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out1 [get_bd_pins data_out] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net splitter_trig_0_trig_sel0 [get_bd_pins sel1] [get_bd_pins param_mux_2/sel]
  connect_bd_net -net trigger_gen_pkg_0_trigger_new [get_bd_pins readout_pulse_in] [get_bd_pins param_mux_1/sel]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins param_mux_1/data1] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net xlconstant_1_dout [get_bd_pins merger1_0/DQ0] [get_bd_pins merger1_0/DQ1] [get_bd_pins merger1_0/DQ2] [get_bd_pins merger1_0/DQ3] [get_bd_pins param_mux_1/data2] [get_bd_pins xlconstant_1/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trig_sel1
proc create_hier_cell_hier_trig_sel1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trig_sel1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 127 -to 0 data2
  create_bd_pin -dir O -from 127 -to 0 data_out
  create_bd_pin -dir I readout_pulse_in
  create_bd_pin -dir I sel1

  # Create instance: merger1_0, and set properties
  set block_name merger1
  set block_cell_name merger1_0
  if { [catch {set merger1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {128} \
 ] $param_mux_2

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {32764} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_0

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_1

  # Create port connections
  connect_bd_net -net DAC_12_D_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net merger1_0_Dout [get_bd_pins merger1_0/Dout] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins merger1_0/DI0] [get_bd_pins merger1_0/DI1] [get_bd_pins merger1_0/DI2] [get_bd_pins merger1_0/DI3] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out1 [get_bd_pins data_out] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net splitter_trig_0_trig_sel0 [get_bd_pins sel1] [get_bd_pins param_mux_2/sel]
  connect_bd_net -net trigger_gen_pkg_0_trigger_new [get_bd_pins readout_pulse_in] [get_bd_pins param_mux_1/sel]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins param_mux_1/data1] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net xlconstant_1_dout [get_bd_pins merger1_0/DQ0] [get_bd_pins merger1_0/DQ1] [get_bd_pins merger1_0/DQ2] [get_bd_pins merger1_0/DQ3] [get_bd_pins param_mux_1/data2] [get_bd_pins xlconstant_1/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_trig_sel
proc create_hier_cell_hier_trig_sel { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_trig_sel() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 127 -to 0 data2
  create_bd_pin -dir O -from 127 -to 0 data_out
  create_bd_pin -dir I readout_pulse_in
  create_bd_pin -dir I sel1

  # Create instance: merger1_0, and set properties
  set block_name merger1
  set block_cell_name merger1_0
  if { [catch {set merger1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {128} \
 ] $param_mux_2

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {32764} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_0

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_1

  # Create port connections
  connect_bd_net -net DAC_12_D_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net merger1_0_Dout [get_bd_pins merger1_0/Dout] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins merger1_0/DI0] [get_bd_pins merger1_0/DI1] [get_bd_pins merger1_0/DI2] [get_bd_pins merger1_0/DI3] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out1 [get_bd_pins data_out] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net splitter_trig_0_trig_sel0 [get_bd_pins sel1] [get_bd_pins param_mux_2/sel]
  connect_bd_net -net trigger_gen_pkg_0_trigger_new [get_bd_pins readout_pulse_in] [get_bd_pins param_mux_1/sel]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins param_mux_1/data1] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net xlconstant_1_dout [get_bd_pins merger1_0/DQ0] [get_bd_pins merger1_0/DQ1] [get_bd_pins merger1_0/DQ2] [get_bd_pins merger1_0/DQ3] [get_bd_pins param_mux_1/data2] [get_bd_pins xlconstant_1/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_splitter_dac_3
proc create_hier_cell_hier_splitter_dac_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_splitter_dac_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir O -from 2 -to 0 Din
  create_bd_pin -dir O -from 31 -to 0 M
  create_bd_pin -dir O -from 31 -to 0 adc_dac_latency
  create_bd_pin -dir O -from 15 -to 0 b
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 511 -to 0 doutb
  create_bd_pin -dir O -from 31 -to 0 gaussian_width
  create_bd_pin -dir O -from 31 -to 0 ini_amp_del
  create_bd_pin -dir O -from 31 -to 0 ite_per_mes
  create_bd_pin -dir O -from 31 -to 0 ite_tot
  create_bd_pin -dir O -from 1 -to 0 mode
  create_bd_pin -dir O -from 31 -to 0 off_time
  create_bd_pin -dir I -type rst s_axi_aresetn
  create_bd_pin -dir O sel
  create_bd_pin -dir O -from 31 -to 0 sleep_time
  create_bd_pin -dir O -from 31 -to 0 step_size
  create_bd_pin -dir O -from 31 -to 0 time_bwn_pulses
  create_bd_pin -dir O -from 31 -to 0 trigger_delay
  create_bd_pin -dir O -from 31 -to 0 trigger_time
  create_bd_pin -dir O -from 31 -to 0 trigger_width
  create_bd_pin -dir I update

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {0} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: blk_mem_gen_0, and set properties
  set blk_mem_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_0 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {WRITE_FIRST} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {50} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {512} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {32} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {512} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_0

  # Create instance: splitter_dac_0, and set properties
  set block_name splitter_dac
  set block_cell_name splitter_dac_0
  if { [catch {set splitter_dac_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $splitter_dac_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $xlconstant_0

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {6} \
   CONFIG.DIN_TO {2} \
   CONFIG.DIN_WIDTH {11} \
   CONFIG.DOUT_WIDTH {5} \
 ] $xlslice_2

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_0/S_AXI]
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_0/BRAM_PORTA]

  # Create port connections
  connect_bd_net -net axi_bram_ctrl_0_bram_addr_a [get_bd_pins axi_bram_ctrl_0/bram_addr_a] [get_bd_pins xlslice_2/Din]
  connect_bd_net -net blk_mem_gen_0_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_0/doutb] [get_bd_pins splitter_dac_0/bram_data]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn]
  connect_bd_net -net splitter_dac_0_Din [get_bd_pins Din] [get_bd_pins splitter_dac_0/Din]
  connect_bd_net -net splitter_dac_0_M [get_bd_pins M] [get_bd_pins splitter_dac_0/M]
  connect_bd_net -net splitter_dac_0_adc_dac_latency [get_bd_pins adc_dac_latency] [get_bd_pins splitter_dac_0/adc_dac_latency]
  connect_bd_net -net splitter_dac_0_b [get_bd_pins b] [get_bd_pins splitter_dac_0/b]
  connect_bd_net -net splitter_dac_0_gaussian_width [get_bd_pins gaussian_width] [get_bd_pins splitter_dac_0/gaussian_width]
  connect_bd_net -net splitter_dac_0_ini_amp_del [get_bd_pins ini_amp_del] [get_bd_pins splitter_dac_0/ini_amp_del]
  connect_bd_net -net splitter_dac_0_ite_per_mes [get_bd_pins ite_per_mes] [get_bd_pins splitter_dac_0/ite_per_mes]
  connect_bd_net -net splitter_dac_0_ite_tot [get_bd_pins ite_tot] [get_bd_pins splitter_dac_0/ite_tot]
  connect_bd_net -net splitter_dac_0_mode [get_bd_pins mode] [get_bd_pins splitter_dac_0/mode]
  connect_bd_net -net splitter_dac_0_off_time [get_bd_pins off_time] [get_bd_pins splitter_dac_0/off_time]
  connect_bd_net -net splitter_dac_0_sel [get_bd_pins sel] [get_bd_pins splitter_dac_0/sel]
  connect_bd_net -net splitter_dac_0_sleep_time [get_bd_pins sleep_time] [get_bd_pins splitter_dac_0/sleep_time]
  connect_bd_net -net splitter_dac_0_step_size [get_bd_pins step_size] [get_bd_pins splitter_dac_0/step_size]
  connect_bd_net -net splitter_dac_0_time_bwn_pulses [get_bd_pins time_bwn_pulses] [get_bd_pins splitter_dac_0/time_bwn_pulses]
  connect_bd_net -net splitter_dac_0_trigger_delay [get_bd_pins trigger_delay] [get_bd_pins splitter_dac_0/trigger_delay]
  connect_bd_net -net splitter_dac_0_trigger_time [get_bd_pins trigger_time] [get_bd_pins splitter_dac_0/trigger_time]
  connect_bd_net -net splitter_dac_0_trigger_width [get_bd_pins trigger_width] [get_bd_pins splitter_dac_0/trigger_width]
  connect_bd_net -net update_1 [get_bd_pins update] [get_bd_pins splitter_dac_0/update]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk] [get_bd_pins blk_mem_gen_0/clkb] [get_bd_pins splitter_dac_0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins blk_mem_gen_0/addrb] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins blk_mem_gen_0/addra] [get_bd_pins xlslice_2/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_splitter_dac_2
proc create_hier_cell_hier_splitter_dac_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_splitter_dac_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir O -from 2 -to 0 Din
  create_bd_pin -dir O -from 31 -to 0 M
  create_bd_pin -dir O -from 31 -to 0 adc_dac_latency
  create_bd_pin -dir O -from 15 -to 0 b
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 gaussian_width
  create_bd_pin -dir O -from 31 -to 0 ini_amp_del
  create_bd_pin -dir O -from 31 -to 0 ite_per_mes
  create_bd_pin -dir O -from 31 -to 0 ite_tot
  create_bd_pin -dir O -from 1 -to 0 mode
  create_bd_pin -dir O -from 31 -to 0 off_time
  create_bd_pin -dir I -type rst s_axi_aresetn
  create_bd_pin -dir O sel
  create_bd_pin -dir O -from 31 -to 0 sleep_time
  create_bd_pin -dir O -from 31 -to 0 step_size
  create_bd_pin -dir O -from 31 -to 0 time_bwn_pulses
  create_bd_pin -dir O -from 31 -to 0 trigger_delay
  create_bd_pin -dir O -from 31 -to 0 trigger_time
  create_bd_pin -dir O -from 31 -to 0 trigger_width
  create_bd_pin -dir I update

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {0} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: blk_mem_gen_0, and set properties
  set blk_mem_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_0 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {WRITE_FIRST} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {50} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {512} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {32} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {512} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_0

  # Create instance: splitter_dac_0, and set properties
  set block_name splitter_dac
  set block_cell_name splitter_dac_0
  if { [catch {set splitter_dac_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $splitter_dac_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $xlconstant_0

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {6} \
   CONFIG.DIN_TO {2} \
   CONFIG.DIN_WIDTH {11} \
   CONFIG.DOUT_WIDTH {5} \
 ] $xlslice_2

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_0/S_AXI]
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_0/BRAM_PORTA]

  # Create port connections
  connect_bd_net -net axi_bram_ctrl_0_bram_addr_a [get_bd_pins axi_bram_ctrl_0/bram_addr_a] [get_bd_pins xlslice_2/Din]
  connect_bd_net -net blk_mem_gen_0_doutb [get_bd_pins blk_mem_gen_0/doutb] [get_bd_pins splitter_dac_0/bram_data]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn]
  connect_bd_net -net splitter_dac_0_Din [get_bd_pins Din] [get_bd_pins splitter_dac_0/Din]
  connect_bd_net -net splitter_dac_0_M [get_bd_pins M] [get_bd_pins splitter_dac_0/M]
  connect_bd_net -net splitter_dac_0_adc_dac_latency [get_bd_pins adc_dac_latency] [get_bd_pins splitter_dac_0/adc_dac_latency]
  connect_bd_net -net splitter_dac_0_b [get_bd_pins b] [get_bd_pins splitter_dac_0/b]
  connect_bd_net -net splitter_dac_0_gaussian_width [get_bd_pins gaussian_width] [get_bd_pins splitter_dac_0/gaussian_width]
  connect_bd_net -net splitter_dac_0_ini_amp_del [get_bd_pins ini_amp_del] [get_bd_pins splitter_dac_0/ini_amp_del]
  connect_bd_net -net splitter_dac_0_ite_per_mes [get_bd_pins ite_per_mes] [get_bd_pins splitter_dac_0/ite_per_mes]
  connect_bd_net -net splitter_dac_0_ite_tot [get_bd_pins ite_tot] [get_bd_pins splitter_dac_0/ite_tot]
  connect_bd_net -net splitter_dac_0_mode [get_bd_pins mode] [get_bd_pins splitter_dac_0/mode]
  connect_bd_net -net splitter_dac_0_off_time [get_bd_pins off_time] [get_bd_pins splitter_dac_0/off_time]
  connect_bd_net -net splitter_dac_0_sel [get_bd_pins sel] [get_bd_pins splitter_dac_0/sel]
  connect_bd_net -net splitter_dac_0_sleep_time [get_bd_pins sleep_time] [get_bd_pins splitter_dac_0/sleep_time]
  connect_bd_net -net splitter_dac_0_step_size [get_bd_pins step_size] [get_bd_pins splitter_dac_0/step_size]
  connect_bd_net -net splitter_dac_0_time_bwn_pulses [get_bd_pins time_bwn_pulses] [get_bd_pins splitter_dac_0/time_bwn_pulses]
  connect_bd_net -net splitter_dac_0_trigger_delay [get_bd_pins trigger_delay] [get_bd_pins splitter_dac_0/trigger_delay]
  connect_bd_net -net splitter_dac_0_trigger_time [get_bd_pins trigger_time] [get_bd_pins splitter_dac_0/trigger_time]
  connect_bd_net -net splitter_dac_0_trigger_width [get_bd_pins trigger_width] [get_bd_pins splitter_dac_0/trigger_width]
  connect_bd_net -net update_1 [get_bd_pins update] [get_bd_pins splitter_dac_0/update]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk] [get_bd_pins blk_mem_gen_0/clkb] [get_bd_pins splitter_dac_0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins blk_mem_gen_0/addrb] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins blk_mem_gen_0/addra] [get_bd_pins xlslice_2/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_splitter_dac_1
proc create_hier_cell_hier_splitter_dac_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_splitter_dac_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir O -from 2 -to 0 Din
  create_bd_pin -dir O -from 31 -to 0 M
  create_bd_pin -dir O -from 31 -to 0 adc_dac_latency
  create_bd_pin -dir O -from 15 -to 0 b
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 31 -to 0 gaussian_width
  create_bd_pin -dir O -from 31 -to 0 ini_amp_del
  create_bd_pin -dir O -from 31 -to 0 ite_per_mes
  create_bd_pin -dir O -from 31 -to 0 ite_tot
  create_bd_pin -dir O -from 1 -to 0 mode
  create_bd_pin -dir O -from 31 -to 0 off_time
  create_bd_pin -dir I -type rst s_axi_aresetn
  create_bd_pin -dir O sel
  create_bd_pin -dir O -from 31 -to 0 sleep_time
  create_bd_pin -dir O -from 31 -to 0 step_size
  create_bd_pin -dir O -from 31 -to 0 time_bwn_pulses
  create_bd_pin -dir O -from 31 -to 0 trigger_delay
  create_bd_pin -dir O -from 31 -to 0 trigger_time
  create_bd_pin -dir O -from 31 -to 0 trigger_width
  create_bd_pin -dir I update

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {0} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: blk_mem_gen_0, and set properties
  set blk_mem_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_0 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {WRITE_FIRST} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {50} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {512} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {32} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {512} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_0

  # Create instance: splitter_dac_0, and set properties
  set block_name splitter_dac
  set block_cell_name splitter_dac_0
  if { [catch {set splitter_dac_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $splitter_dac_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $xlconstant_0

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {6} \
   CONFIG.DIN_TO {2} \
   CONFIG.DIN_WIDTH {11} \
   CONFIG.DOUT_WIDTH {5} \
 ] $xlslice_2

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_0/S_AXI]
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_0/BRAM_PORTA]

  # Create port connections
  connect_bd_net -net axi_bram_ctrl_0_bram_addr_a [get_bd_pins axi_bram_ctrl_0/bram_addr_a] [get_bd_pins xlslice_2/Din]
  connect_bd_net -net blk_mem_gen_0_doutb [get_bd_pins blk_mem_gen_0/doutb] [get_bd_pins splitter_dac_0/bram_data]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn]
  connect_bd_net -net splitter_dac_0_Din [get_bd_pins Din] [get_bd_pins splitter_dac_0/Din]
  connect_bd_net -net splitter_dac_0_M [get_bd_pins M] [get_bd_pins splitter_dac_0/M]
  connect_bd_net -net splitter_dac_0_adc_dac_latency [get_bd_pins adc_dac_latency] [get_bd_pins splitter_dac_0/adc_dac_latency]
  connect_bd_net -net splitter_dac_0_b [get_bd_pins b] [get_bd_pins splitter_dac_0/b]
  connect_bd_net -net splitter_dac_0_gaussian_width [get_bd_pins gaussian_width] [get_bd_pins splitter_dac_0/gaussian_width]
  connect_bd_net -net splitter_dac_0_ini_amp_del [get_bd_pins ini_amp_del] [get_bd_pins splitter_dac_0/ini_amp_del]
  connect_bd_net -net splitter_dac_0_ite_per_mes [get_bd_pins ite_per_mes] [get_bd_pins splitter_dac_0/ite_per_mes]
  connect_bd_net -net splitter_dac_0_ite_tot [get_bd_pins ite_tot] [get_bd_pins splitter_dac_0/ite_tot]
  connect_bd_net -net splitter_dac_0_mode [get_bd_pins mode] [get_bd_pins splitter_dac_0/mode]
  connect_bd_net -net splitter_dac_0_off_time [get_bd_pins off_time] [get_bd_pins splitter_dac_0/off_time]
  connect_bd_net -net splitter_dac_0_sel [get_bd_pins sel] [get_bd_pins splitter_dac_0/sel]
  connect_bd_net -net splitter_dac_0_sleep_time [get_bd_pins sleep_time] [get_bd_pins splitter_dac_0/sleep_time]
  connect_bd_net -net splitter_dac_0_step_size [get_bd_pins step_size] [get_bd_pins splitter_dac_0/step_size]
  connect_bd_net -net splitter_dac_0_time_bwn_pulses [get_bd_pins time_bwn_pulses] [get_bd_pins splitter_dac_0/time_bwn_pulses]
  connect_bd_net -net splitter_dac_0_trigger_delay [get_bd_pins trigger_delay] [get_bd_pins splitter_dac_0/trigger_delay]
  connect_bd_net -net splitter_dac_0_trigger_time [get_bd_pins trigger_time] [get_bd_pins splitter_dac_0/trigger_time]
  connect_bd_net -net splitter_dac_0_trigger_width [get_bd_pins trigger_width] [get_bd_pins splitter_dac_0/trigger_width]
  connect_bd_net -net update_1 [get_bd_pins update] [get_bd_pins splitter_dac_0/update]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk] [get_bd_pins blk_mem_gen_0/clkb] [get_bd_pins splitter_dac_0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins blk_mem_gen_0/addrb] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins blk_mem_gen_0/addra] [get_bd_pins xlslice_2/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_splitter_dac_0
proc create_hier_cell_hier_splitter_dac_0 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_splitter_dac_0() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI


  # Create pins
  create_bd_pin -dir O -from 2 -to 0 Din
  create_bd_pin -dir O -from 31 -to 0 M
  create_bd_pin -dir O -from 31 -to 0 adc_dac_latency
  create_bd_pin -dir O -from 15 -to 0 b
  create_bd_pin -dir I -type clk clkb
  create_bd_pin -dir O -from 511 -to 0 doutb
  create_bd_pin -dir O -from 31 -to 0 gaussian_width
  create_bd_pin -dir O -from 31 -to 0 ini_amp_del
  create_bd_pin -dir O -from 31 -to 0 ite_per_mes
  create_bd_pin -dir O -from 31 -to 0 ite_tot
  create_bd_pin -dir O -from 1 -to 0 mode
  create_bd_pin -dir O -from 31 -to 0 off_time
  create_bd_pin -dir I -type rst s_axi_aresetn
  create_bd_pin -dir O sel
  create_bd_pin -dir O -from 31 -to 0 sleep_time
  create_bd_pin -dir O -from 31 -to 0 step_size
  create_bd_pin -dir O -from 31 -to 0 time_bwn_pulses
  create_bd_pin -dir O -from 31 -to 0 trigger_delay
  create_bd_pin -dir O -from 31 -to 0 trigger_time
  create_bd_pin -dir O -from 31 -to 0 trigger_width
  create_bd_pin -dir I update

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.ECC_TYPE {0} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: blk_mem_gen_0, and set properties
  set blk_mem_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_0 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_A {Always_Enabled} \
   CONFIG.Enable_B {Always_Enabled} \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {WRITE_FIRST} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {50} \
   CONFIG.Read_Width_A {32} \
   CONFIG.Read_Width_B {512} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {32} \
   CONFIG.Write_Width_A {32} \
   CONFIG.Write_Width_B {512} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_0

  # Create instance: splitter_dac_0, and set properties
  set block_name splitter_dac
  set block_cell_name splitter_dac_0
  if { [catch {set splitter_dac_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $splitter_dac_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $xlconstant_0

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {6} \
   CONFIG.DIN_TO {2} \
   CONFIG.DIN_WIDTH {11} \
   CONFIG.DOUT_WIDTH {5} \
 ] $xlslice_2

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_bram_ctrl_0/S_AXI]
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_0/BRAM_PORTA]

  # Create port connections
  connect_bd_net -net axi_bram_ctrl_0_bram_addr_a [get_bd_pins axi_bram_ctrl_0/bram_addr_a] [get_bd_pins xlslice_2/Din]
  connect_bd_net -net blk_mem_gen_0_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_0/doutb] [get_bd_pins splitter_dac_0/bram_data]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn]
  connect_bd_net -net splitter_dac_0_Din [get_bd_pins Din] [get_bd_pins splitter_dac_0/Din]
  connect_bd_net -net splitter_dac_0_M [get_bd_pins M] [get_bd_pins splitter_dac_0/M]
  connect_bd_net -net splitter_dac_0_adc_dac_latency [get_bd_pins adc_dac_latency] [get_bd_pins splitter_dac_0/adc_dac_latency]
  connect_bd_net -net splitter_dac_0_b [get_bd_pins b] [get_bd_pins splitter_dac_0/b]
  connect_bd_net -net splitter_dac_0_gaussian_width [get_bd_pins gaussian_width] [get_bd_pins splitter_dac_0/gaussian_width]
  connect_bd_net -net splitter_dac_0_ini_amp_del [get_bd_pins ini_amp_del] [get_bd_pins splitter_dac_0/ini_amp_del]
  connect_bd_net -net splitter_dac_0_ite_per_mes [get_bd_pins ite_per_mes] [get_bd_pins splitter_dac_0/ite_per_mes]
  connect_bd_net -net splitter_dac_0_ite_tot [get_bd_pins ite_tot] [get_bd_pins splitter_dac_0/ite_tot]
  connect_bd_net -net splitter_dac_0_mode [get_bd_pins mode] [get_bd_pins splitter_dac_0/mode]
  connect_bd_net -net splitter_dac_0_off_time [get_bd_pins off_time] [get_bd_pins splitter_dac_0/off_time]
  connect_bd_net -net splitter_dac_0_sel [get_bd_pins sel] [get_bd_pins splitter_dac_0/sel]
  connect_bd_net -net splitter_dac_0_sleep_time [get_bd_pins sleep_time] [get_bd_pins splitter_dac_0/sleep_time]
  connect_bd_net -net splitter_dac_0_step_size [get_bd_pins step_size] [get_bd_pins splitter_dac_0/step_size]
  connect_bd_net -net splitter_dac_0_time_bwn_pulses [get_bd_pins time_bwn_pulses] [get_bd_pins splitter_dac_0/time_bwn_pulses]
  connect_bd_net -net splitter_dac_0_trigger_delay [get_bd_pins trigger_delay] [get_bd_pins splitter_dac_0/trigger_delay]
  connect_bd_net -net splitter_dac_0_trigger_time [get_bd_pins trigger_time] [get_bd_pins splitter_dac_0/trigger_time]
  connect_bd_net -net splitter_dac_0_trigger_width [get_bd_pins trigger_width] [get_bd_pins splitter_dac_0/trigger_width]
  connect_bd_net -net update_1 [get_bd_pins update] [get_bd_pins splitter_dac_0/update]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clkb] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk] [get_bd_pins blk_mem_gen_0/clkb] [get_bd_pins splitter_dac_0/clk]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins blk_mem_gen_0/addrb] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins blk_mem_gen_0/addra] [get_bd_pins xlslice_2/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_gauusian_width_3
proc create_hier_cell_hier_gauusian_width_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_gauusian_width_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_gauusian_width_2
proc create_hier_cell_hier_gauusian_width_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_gauusian_width_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_gauusian_width_1
proc create_hier_cell_hier_gauusian_width_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_gauusian_width_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_gaussian_width_0
proc create_hier_cell_hier_gaussian_width_0 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_gaussian_width_0() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_bram_addr_trigen_3
proc create_hier_cell_hier_bram_addr_trigen_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_bram_addr_trigen_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 12 -to 0 data1
  create_bd_pin -dir I -from 12 -to 0 data2
  create_bd_pin -dir I -from 12 -to 0 data3
  create_bd_pin -dir I -from 12 -to 0 data4
  create_bd_pin -dir O -from 12 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_bram_addr_trigen_2
proc create_hier_cell_hier_bram_addr_trigen_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_bram_addr_trigen_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 12 -to 0 data1
  create_bd_pin -dir I -from 12 -to 0 data2
  create_bd_pin -dir I -from 12 -to 0 data3
  create_bd_pin -dir I -from 12 -to 0 data4
  create_bd_pin -dir O -from 12 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_bram_addr_trigen_1
proc create_hier_cell_hier_bram_addr_trigen_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_bram_addr_trigen_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 12 -to 0 data1
  create_bd_pin -dir I -from 12 -to 0 data2
  create_bd_pin -dir I -from 12 -to 0 data3
  create_bd_pin -dir I -from 12 -to 0 data4
  create_bd_pin -dir O -from 12 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_bram_addr_trigen_0
proc create_hier_cell_hier_bram_addr_trigen_0 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_bram_addr_trigen_0() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 12 -to 0 data0
  create_bd_pin -dir I -from 12 -to 0 data1
  create_bd_pin -dir I -from 12 -to 0 data2
  create_bd_pin -dir I -from 12 -to 0 data3
  create_bd_pin -dir O -from 12 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_adc_dac_latency_3
proc create_hier_cell_hier_adc_dac_latency_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_adc_dac_latency_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_adc_dac_latency_2
proc create_hier_cell_hier_adc_dac_latency_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_adc_dac_latency_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_adc_dac_latency_1
proc create_hier_cell_hier_adc_dac_latency_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_adc_dac_latency_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: hier_adc_dac_latency_0
proc create_hier_cell_hier_adc_dac_latency_0 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_hier_adc_dac_latency_0() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 31 -to 0 data0
  create_bd_pin -dir I -from 31 -to 0 data1
  create_bd_pin -dir I -from 31 -to 0 data2
  create_bd_pin -dir I -from 31 -to 0 data3
  create_bd_pin -dir O -from 31 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {32} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data0] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data2] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_46
proc create_hier_cell_adc_ila_mux_46 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_46() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 127 -to 0 data1
  create_bd_pin -dir I -from 127 -to 0 data2
  create_bd_pin -dir I -from 127 -to 0 data3
  create_bd_pin -dir I -from 127 -to 0 data4
  create_bd_pin -dir O -from 127 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {128} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {128} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {128} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_45
proc create_hier_cell_adc_ila_mux_45 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_45() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 63 -to 0 data1
  create_bd_pin -dir I -from 63 -to 0 data2
  create_bd_pin -dir I -from 63 -to 0 data3
  create_bd_pin -dir I -from 63 -to 0 data4
  create_bd_pin -dir O -from 63 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_44
proc create_hier_cell_adc_ila_mux_44 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_44() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 63 -to 0 data1
  create_bd_pin -dir I -from 63 -to 0 data2
  create_bd_pin -dir I -from 63 -to 0 data3
  create_bd_pin -dir I -from 63 -to 0 data4
  create_bd_pin -dir O -from 63 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_43
proc create_hier_cell_adc_ila_mux_43 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_43() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 63 -to 0 data1
  create_bd_pin -dir I -from 63 -to 0 data2
  create_bd_pin -dir I -from 63 -to 0 data3
  create_bd_pin -dir I -from 63 -to 0 data4
  create_bd_pin -dir O -from 63 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_42
proc create_hier_cell_adc_ila_mux_42 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_42() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 63 -to 0 data1
  create_bd_pin -dir I -from 63 -to 0 data2
  create_bd_pin -dir I -from 63 -to 0 data3
  create_bd_pin -dir I -from 63 -to 0 data4
  create_bd_pin -dir O -from 63 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_41
proc create_hier_cell_adc_ila_mux_41 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_41() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 63 -to 0 data1
  create_bd_pin -dir I -from 63 -to 0 data2
  create_bd_pin -dir I -from 63 -to 0 data3
  create_bd_pin -dir I -from 63 -to 0 data4
  create_bd_pin -dir O -from 63 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_40
proc create_hier_cell_adc_ila_mux_40 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_40() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 63 -to 0 data1
  create_bd_pin -dir I -from 63 -to 0 data2
  create_bd_pin -dir I -from 63 -to 0 data3
  create_bd_pin -dir I -from 63 -to 0 data4
  create_bd_pin -dir O -from 63 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_39
proc create_hier_cell_adc_ila_mux_39 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_39() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_38
proc create_hier_cell_adc_ila_mux_38 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_38() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 60 -to 0 data1
  create_bd_pin -dir I -from 60 -to 0 data2
  create_bd_pin -dir I -from 60 -to 0 data3
  create_bd_pin -dir I -from 60 -to 0 data4
  create_bd_pin -dir O -from 59 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_37
proc create_hier_cell_adc_ila_mux_37 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_37() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 60 -to 0 data1
  create_bd_pin -dir I -from 60 -to 0 data2
  create_bd_pin -dir I -from 60 -to 0 data3
  create_bd_pin -dir I -from 60 -to 0 data4
  create_bd_pin -dir O -from 59 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_36
proc create_hier_cell_adc_ila_mux_36 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_36() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_35
proc create_hier_cell_adc_ila_mux_35 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_35() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 59 -to 0 data1
  create_bd_pin -dir I -from 59 -to 0 data2
  create_bd_pin -dir I -from 59 -to 0 data3
  create_bd_pin -dir I -from 59 -to 0 data4
  create_bd_pin -dir O -from 59 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_34
proc create_hier_cell_adc_ila_mux_34 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_34() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_33
proc create_hier_cell_adc_ila_mux_33 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_33() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 59 -to 0 data1
  create_bd_pin -dir I -from 59 -to 0 data2
  create_bd_pin -dir I -from 59 -to 0 data3
  create_bd_pin -dir I -from 59 -to 0 data4
  create_bd_pin -dir O -from 59 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_32
proc create_hier_cell_adc_ila_mux_32 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_32() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_31
proc create_hier_cell_adc_ila_mux_31 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_31() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 59 -to 0 data1
  create_bd_pin -dir I -from 59 -to 0 data2
  create_bd_pin -dir I -from 59 -to 0 data3
  create_bd_pin -dir I -from 59 -to 0 data4
  create_bd_pin -dir O -from 59 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_30
proc create_hier_cell_adc_ila_mux_30 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_30() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_29
proc create_hier_cell_adc_ila_mux_29 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_29() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 59 -to 0 data1
  create_bd_pin -dir I -from 59 -to 0 data2
  create_bd_pin -dir I -from 59 -to 0 data3
  create_bd_pin -dir I -from 59 -to 0 data4
  create_bd_pin -dir O -from 59 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {60} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_28
proc create_hier_cell_adc_ila_mux_28 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_28() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_27
proc create_hier_cell_adc_ila_mux_27 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_27() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 39 -to 0 data1
  create_bd_pin -dir I -from 39 -to 0 data2
  create_bd_pin -dir I -from 39 -to 0 data3
  create_bd_pin -dir I -from 39 -to 0 data4
  create_bd_pin -dir O -from 39 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_26
proc create_hier_cell_adc_ila_mux_26 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_26() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 19 -to 0 data1
  create_bd_pin -dir I -from 19 -to 0 data2
  create_bd_pin -dir I -from 19 -to 0 data3
  create_bd_pin -dir I -from 19 -to 0 data4
  create_bd_pin -dir O -from 19 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {20} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {20} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {20} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_25
proc create_hier_cell_adc_ila_mux_25 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_25() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_24
proc create_hier_cell_adc_ila_mux_24 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_24() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 39 -to 0 data1
  create_bd_pin -dir I -from 39 -to 0 data2
  create_bd_pin -dir I -from 39 -to 0 data3
  create_bd_pin -dir I -from 39 -to 0 data4
  create_bd_pin -dir O -from 39 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_23
proc create_hier_cell_adc_ila_mux_23 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_23() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 19 -to 0 data1
  create_bd_pin -dir I -from 19 -to 0 data2
  create_bd_pin -dir I -from 19 -to 0 data3
  create_bd_pin -dir I -from 19 -to 0 data4
  create_bd_pin -dir O -from 19 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {20} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {20} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {20} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_22
proc create_hier_cell_adc_ila_mux_22 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_22() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 1 -to 0 data1
  create_bd_pin -dir I -from 1 -to 0 data2
  create_bd_pin -dir I -from 1 -to 0 data3
  create_bd_pin -dir I -from 1 -to 0 data4
  create_bd_pin -dir O -from 1 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {2} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {2} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {2} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_21
proc create_hier_cell_adc_ila_mux_21 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_21() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 39 -to 0 data1
  create_bd_pin -dir I -from 39 -to 0 data2
  create_bd_pin -dir I -from 39 -to 0 data3
  create_bd_pin -dir I -from 39 -to 0 data4
  create_bd_pin -dir O -from 39 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_20
proc create_hier_cell_adc_ila_mux_20 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_20() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 39 -to 0 data1
  create_bd_pin -dir I -from 39 -to 0 data2
  create_bd_pin -dir I -from 39 -to 0 data3
  create_bd_pin -dir I -from 39 -to 0 data4
  create_bd_pin -dir O -from 39 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_19
proc create_hier_cell_adc_ila_mux_19 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_19() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_18
proc create_hier_cell_adc_ila_mux_18 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_18() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 23 -to 0 data1
  create_bd_pin -dir I -from 23 -to 0 data2
  create_bd_pin -dir I -from 23 -to 0 data3
  create_bd_pin -dir I -from 23 -to 0 data4
  create_bd_pin -dir O -from 23 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {24} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {24} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {24} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_17
proc create_hier_cell_adc_ila_mux_17 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_17() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 23 -to 0 data1
  create_bd_pin -dir I -from 23 -to 0 data2
  create_bd_pin -dir I -from 23 -to 0 data3
  create_bd_pin -dir I -from 23 -to 0 data4
  create_bd_pin -dir O -from 23 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {24} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {24} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {24} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_16
proc create_hier_cell_adc_ila_mux_16 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_16() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_15
proc create_hier_cell_adc_ila_mux_15 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_15() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 39 -to 0 data1
  create_bd_pin -dir I -from 39 -to 0 data2
  create_bd_pin -dir I -from 39 -to 0 data3
  create_bd_pin -dir I -from 39 -to 0 data4
  create_bd_pin -dir O -from 39 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_14
proc create_hier_cell_adc_ila_mux_14 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_14() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_13
proc create_hier_cell_adc_ila_mux_13 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_13() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 39 -to 0 data1
  create_bd_pin -dir I -from 39 -to 0 data2
  create_bd_pin -dir I -from 39 -to 0 data3
  create_bd_pin -dir I -from 39 -to 0 data4
  create_bd_pin -dir O -from 39 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_12
proc create_hier_cell_adc_ila_mux_12 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_12() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_11
proc create_hier_cell_adc_ila_mux_11 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_11() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 39 -to 0 data1
  create_bd_pin -dir I -from 39 -to 0 data2
  create_bd_pin -dir I -from 39 -to 0 data3
  create_bd_pin -dir I -from 39 -to 0 data4
  create_bd_pin -dir O -from 39 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_10
proc create_hier_cell_adc_ila_mux_10 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_10() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_9
proc create_hier_cell_adc_ila_mux_9 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_9() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 39 -to 0 data1
  create_bd_pin -dir I -from 39 -to 0 data2
  create_bd_pin -dir I -from 39 -to 0 data3
  create_bd_pin -dir I -from 39 -to 0 data4
  create_bd_pin -dir O -from 39 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_8
proc create_hier_cell_adc_ila_mux_8 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_8() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_7
proc create_hier_cell_adc_ila_mux_7 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_7() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 39 -to 0 data1
  create_bd_pin -dir I -from 39 -to 0 data2
  create_bd_pin -dir I -from 39 -to 0 data3
  create_bd_pin -dir I -from 39 -to 0 data4
  create_bd_pin -dir O -from 39 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_6
proc create_hier_cell_adc_ila_mux_6 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_6() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_5
proc create_hier_cell_adc_ila_mux_5 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_5() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 39 -to 0 data1
  create_bd_pin -dir I -from 39 -to 0 data2
  create_bd_pin -dir I -from 39 -to 0 data3
  create_bd_pin -dir I -from 39 -to 0 data4
  create_bd_pin -dir O -from 39 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {40} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_4
proc create_hier_cell_adc_ila_mux_4 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_4() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_3
proc create_hier_cell_adc_ila_mux_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_2
proc create_hier_cell_adc_ila_mux_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 63 -to 0 data1
  create_bd_pin -dir I -from 63 -to 0 data2
  create_bd_pin -dir I -from 63 -to 0 data3
  create_bd_pin -dir I -from 63 -to 0 data4
  create_bd_pin -dir O -from 63 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_1
proc create_hier_cell_adc_ila_mux_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 0 -to 0 data1
  create_bd_pin -dir I -from 0 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir O -from 0 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: adc_ila_mux_0
proc create_hier_cell_adc_ila_mux_0 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_adc_ila_mux_0() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 1 -to 0 Din_0
  create_bd_pin -dir I -from 63 -to 0 data1
  create_bd_pin -dir I -from 63 -to 0 data2
  create_bd_pin -dir I -from 63 -to 0 data3
  create_bd_pin -dir I -from 63 -to 0 data4
  create_bd_pin -dir O -from 63 -to 0 data_out

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_3

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_WIDTH {2} \
 ] $xlslice_2

  # Create instance: xlslice_3, and set properties
  set xlslice_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_3

  # Create port connections
  connect_bd_net -net DAC_12_data_out [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net Din_0_1 [get_bd_pins Din_0] [get_bd_pins xlslice_2/Din] [get_bd_pins xlslice_3/Din]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins data_out] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out2 [get_bd_pins param_mux_1/data2] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out1 [get_bd_pins param_mux_1/data1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins xlslice_2/Dout]
  connect_bd_net -net xlslice_3_Dout [get_bd_pins param_mux_1/sel] [get_bd_pins xlslice_3/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Readout_DMA_3
proc create_hier_cell_Readout_DMA_3 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Readout_DMA_3() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M00_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M_AXI_S2MM

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M_AXI_SG

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI_LITE


  # Create pins
  create_bd_pin -dir I adc_trigger_in
  create_bd_pin -dir I -type rst axi_resetn
  create_bd_pin -dir I b
  create_bd_pin -dir O -from 127 -to 0 m_axis_tdata
  create_bd_pin -dir O out1
  create_bd_pin -dir O out2
  create_bd_pin -dir O -type intr s2mm_introut
  create_bd_pin -dir I -type clk s_axi_lite_aclk
  create_bd_pin -dir I -from 127 -to 0 s_axis_tdata
  create_bd_pin -dir O t_last
  create_bd_pin -dir O t_valid

  # Create instance: adc_trigger_0, and set properties
  set block_name adc_trigger
  set block_cell_name adc_trigger_0
  if { [catch {set adc_trigger_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $adc_trigger_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: and_gate_0, and set properties
  set block_name and_gate
  set block_cell_name and_gate_0
  if { [catch {set and_gate_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $and_gate_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: and_gate_1, and set properties
  set block_name and_gate
  set block_cell_name and_gate_1
  if { [catch {set and_gate_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $and_gate_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: axi_dma_0, and set properties
  set axi_dma_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_dma:7.1 axi_dma_0 ]
  set_property -dict [ list \
   CONFIG.c_include_mm2s {0} \
   CONFIG.c_m_axi_s2mm_data_width {128} \
   CONFIG.c_s2mm_burst_size {64} \
   CONFIG.c_s_axis_s2mm_tdata_width {128} \
   CONFIG.c_sg_include_stscntrl_strm {0} \
   CONFIG.c_sg_length_width {26} \
 ] $axi_dma_0

  # Create instance: axis_data_fifo_0, and set properties
  set axis_data_fifo_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axis_data_fifo:2.0 axis_data_fifo_0 ]
  set_property -dict [ list \
   CONFIG.FIFO_DEPTH {8192} \
   CONFIG.FIFO_MODE {2} \
   CONFIG.TDATA_NUM_BYTES {16} \
 ] $axis_data_fifo_0

  # Create instance: c_counter_binary_1, and set properties
  set c_counter_binary_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:c_counter_binary:12.0 c_counter_binary_1 ]
  set_property -dict [ list \
   CONFIG.Output_Width {64} \
 ] $c_counter_binary_1

  # Create instance: xlconstant_2, and set properties
  set xlconstant_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_2 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0xffff} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_2

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins S_AXI_LITE] [get_bd_intf_pins axi_dma_0/S_AXI_LITE]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins M_AXI_SG] [get_bd_intf_pins axi_dma_0/M_AXI_SG]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins M_AXI_S2MM] [get_bd_intf_pins axi_dma_0/M_AXI_S2MM]
  connect_bd_intf_net -intf_net axis_data_fifo_0_M_AXIS [get_bd_intf_pins axi_dma_0/S_AXIS_S2MM] [get_bd_intf_pins axis_data_fifo_0/M_AXIS]

  # Create port connections
  connect_bd_net -net CLK_1 [get_bd_pins out2] [get_bd_pins and_gate_1/out1] [get_bd_pins axis_data_fifo_0/s_axis_tlast] [get_bd_pins c_counter_binary_1/CLK]
  connect_bd_net -net adc_trigger_0_t_last [get_bd_pins t_last] [get_bd_pins adc_trigger_0/t_last] [get_bd_pins and_gate_1/a]
  connect_bd_net -net adc_trigger_0_t_valid [get_bd_pins t_valid] [get_bd_pins adc_trigger_0/t_valid] [get_bd_pins and_gate_0/a]
  connect_bd_net -net adc_trigger_in_1 [get_bd_pins adc_trigger_in] [get_bd_pins adc_trigger_0/adc_trigger_in]
  connect_bd_net -net and_gate_0_out1 [get_bd_pins out1] [get_bd_pins and_gate_0/out1] [get_bd_pins axis_data_fifo_0/s_axis_tvalid]
  connect_bd_net -net axi_dma_0_s2mm_introut [get_bd_pins s2mm_introut] [get_bd_pins axi_dma_0/s2mm_introut]
  connect_bd_net -net axi_dma_0_s_axis_s2mm_tready [get_bd_pins axi_dma_0/s_axis_s2mm_tready] [get_bd_pins axis_data_fifo_0/m_axis_tready]
  connect_bd_net -net axi_resetn_1 [get_bd_pins axi_resetn] [get_bd_pins axi_dma_0/axi_resetn] [get_bd_pins axis_data_fifo_0/s_axis_aresetn]
  connect_bd_net -net axis_data_fifo_0_m_axis_tdata [get_bd_pins m_axis_tdata] [get_bd_pins axi_dma_0/s_axis_s2mm_tdata] [get_bd_pins axis_data_fifo_0/m_axis_tdata]
  connect_bd_net -net axis_data_fifo_0_m_axis_tlast [get_bd_pins axi_dma_0/s_axis_s2mm_tlast] [get_bd_pins axis_data_fifo_0/m_axis_tlast]
  connect_bd_net -net axis_data_fifo_0_m_axis_tvalid [get_bd_pins axi_dma_0/s_axis_s2mm_tvalid] [get_bd_pins axis_data_fifo_0/m_axis_tvalid]
  connect_bd_net -net b_1 [get_bd_pins b] [get_bd_pins and_gate_0/b] [get_bd_pins and_gate_1/b]
  connect_bd_net -net s_axi_lite_aclk_1 [get_bd_pins s_axi_lite_aclk] [get_bd_pins adc_trigger_0/clk] [get_bd_pins axi_dma_0/m_axi_s2mm_aclk] [get_bd_pins axi_dma_0/m_axi_sg_aclk] [get_bd_pins axi_dma_0/s_axi_lite_aclk] [get_bd_pins axis_data_fifo_0/s_axis_aclk]
  connect_bd_net -net s_axis_tdata_1 [get_bd_pins s_axis_tdata] [get_bd_pins axis_data_fifo_0/s_axis_tdata]
  connect_bd_net -net xlconstant_2_dout [get_bd_pins axi_dma_0/s_axis_s2mm_tkeep] [get_bd_pins xlconstant_2/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Readout_DMA_2
proc create_hier_cell_Readout_DMA_2 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Readout_DMA_2() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M00_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M_AXI_S2MM

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M_AXI_SG

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI_LITE


  # Create pins
  create_bd_pin -dir I adc_trigger_in
  create_bd_pin -dir I -type rst axi_resetn
  create_bd_pin -dir I b
  create_bd_pin -dir O -from 127 -to 0 m_axis_tdata
  create_bd_pin -dir O out1
  create_bd_pin -dir O out2
  create_bd_pin -dir O -type intr s2mm_introut
  create_bd_pin -dir I -type clk s_axi_lite_aclk
  create_bd_pin -dir I -from 127 -to 0 s_axis_tdata
  create_bd_pin -dir O t_last
  create_bd_pin -dir O t_valid

  # Create instance: adc_trigger_0, and set properties
  set block_name adc_trigger
  set block_cell_name adc_trigger_0
  if { [catch {set adc_trigger_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $adc_trigger_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: and_gate_0, and set properties
  set block_name and_gate
  set block_cell_name and_gate_0
  if { [catch {set and_gate_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $and_gate_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: and_gate_1, and set properties
  set block_name and_gate
  set block_cell_name and_gate_1
  if { [catch {set and_gate_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $and_gate_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: axi_dma_0, and set properties
  set axi_dma_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_dma:7.1 axi_dma_0 ]
  set_property -dict [ list \
   CONFIG.c_include_mm2s {0} \
   CONFIG.c_m_axi_s2mm_data_width {128} \
   CONFIG.c_s2mm_burst_size {64} \
   CONFIG.c_s_axis_s2mm_tdata_width {128} \
   CONFIG.c_sg_include_stscntrl_strm {0} \
   CONFIG.c_sg_length_width {26} \
 ] $axi_dma_0

  # Create instance: axis_data_fifo_0, and set properties
  set axis_data_fifo_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axis_data_fifo:2.0 axis_data_fifo_0 ]
  set_property -dict [ list \
   CONFIG.FIFO_DEPTH {8192} \
   CONFIG.FIFO_MODE {2} \
   CONFIG.TDATA_NUM_BYTES {16} \
 ] $axis_data_fifo_0

  # Create instance: c_counter_binary_1, and set properties
  set c_counter_binary_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:c_counter_binary:12.0 c_counter_binary_1 ]
  set_property -dict [ list \
   CONFIG.Output_Width {64} \
 ] $c_counter_binary_1

  # Create instance: xlconstant_2, and set properties
  set xlconstant_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_2 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0xffff} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_2

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins S_AXI_LITE] [get_bd_intf_pins axi_dma_0/S_AXI_LITE]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins M_AXI_SG] [get_bd_intf_pins axi_dma_0/M_AXI_SG]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins M_AXI_S2MM] [get_bd_intf_pins axi_dma_0/M_AXI_S2MM]
  connect_bd_intf_net -intf_net axis_data_fifo_0_M_AXIS [get_bd_intf_pins axi_dma_0/S_AXIS_S2MM] [get_bd_intf_pins axis_data_fifo_0/M_AXIS]

  # Create port connections
  connect_bd_net -net CLK_1 [get_bd_pins out2] [get_bd_pins and_gate_1/out1] [get_bd_pins axis_data_fifo_0/s_axis_tlast] [get_bd_pins c_counter_binary_1/CLK]
  connect_bd_net -net adc_trigger_0_t_last [get_bd_pins t_last] [get_bd_pins adc_trigger_0/t_last] [get_bd_pins and_gate_1/a]
  connect_bd_net -net adc_trigger_0_t_valid [get_bd_pins t_valid] [get_bd_pins adc_trigger_0/t_valid] [get_bd_pins and_gate_0/a]
  connect_bd_net -net adc_trigger_in_1 [get_bd_pins adc_trigger_in] [get_bd_pins adc_trigger_0/adc_trigger_in]
  connect_bd_net -net and_gate_0_out1 [get_bd_pins out1] [get_bd_pins and_gate_0/out1] [get_bd_pins axis_data_fifo_0/s_axis_tvalid]
  connect_bd_net -net axi_dma_0_s2mm_introut [get_bd_pins s2mm_introut] [get_bd_pins axi_dma_0/s2mm_introut]
  connect_bd_net -net axi_dma_0_s_axis_s2mm_tready [get_bd_pins axi_dma_0/s_axis_s2mm_tready] [get_bd_pins axis_data_fifo_0/m_axis_tready]
  connect_bd_net -net axi_resetn_1 [get_bd_pins axi_resetn] [get_bd_pins axi_dma_0/axi_resetn] [get_bd_pins axis_data_fifo_0/s_axis_aresetn]
  connect_bd_net -net axis_data_fifo_0_m_axis_tdata [get_bd_pins m_axis_tdata] [get_bd_pins axi_dma_0/s_axis_s2mm_tdata] [get_bd_pins axis_data_fifo_0/m_axis_tdata]
  connect_bd_net -net axis_data_fifo_0_m_axis_tlast [get_bd_pins axi_dma_0/s_axis_s2mm_tlast] [get_bd_pins axis_data_fifo_0/m_axis_tlast]
  connect_bd_net -net axis_data_fifo_0_m_axis_tvalid [get_bd_pins axi_dma_0/s_axis_s2mm_tvalid] [get_bd_pins axis_data_fifo_0/m_axis_tvalid]
  connect_bd_net -net b_1 [get_bd_pins b] [get_bd_pins and_gate_0/b] [get_bd_pins and_gate_1/b]
  connect_bd_net -net s_axi_lite_aclk_1 [get_bd_pins s_axi_lite_aclk] [get_bd_pins adc_trigger_0/clk] [get_bd_pins axi_dma_0/m_axi_s2mm_aclk] [get_bd_pins axi_dma_0/m_axi_sg_aclk] [get_bd_pins axi_dma_0/s_axi_lite_aclk] [get_bd_pins axis_data_fifo_0/s_axis_aclk]
  connect_bd_net -net s_axis_tdata_1 [get_bd_pins s_axis_tdata] [get_bd_pins axis_data_fifo_0/s_axis_tdata]
  connect_bd_net -net xlconstant_2_dout [get_bd_pins axi_dma_0/s_axis_s2mm_tkeep] [get_bd_pins xlconstant_2/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Readout_DMA_1
proc create_hier_cell_Readout_DMA_1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Readout_DMA_1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M00_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M_AXI_S2MM

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M_AXI_SG

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI_LITE


  # Create pins
  create_bd_pin -dir I adc_trigger_in
  create_bd_pin -dir I -type rst axi_resetn
  create_bd_pin -dir I b
  create_bd_pin -dir O -from 127 -to 0 m_axis_tdata
  create_bd_pin -dir O out1
  create_bd_pin -dir O out2
  create_bd_pin -dir O -type intr s2mm_introut
  create_bd_pin -dir I -type clk s_axi_lite_aclk
  create_bd_pin -dir I -from 127 -to 0 s_axis_tdata
  create_bd_pin -dir O t_last
  create_bd_pin -dir O t_valid

  # Create instance: adc_trigger_0, and set properties
  set block_name adc_trigger
  set block_cell_name adc_trigger_0
  if { [catch {set adc_trigger_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $adc_trigger_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: and_gate_0, and set properties
  set block_name and_gate
  set block_cell_name and_gate_0
  if { [catch {set and_gate_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $and_gate_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: and_gate_1, and set properties
  set block_name and_gate
  set block_cell_name and_gate_1
  if { [catch {set and_gate_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $and_gate_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: axi_dma_0, and set properties
  set axi_dma_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_dma:7.1 axi_dma_0 ]
  set_property -dict [ list \
   CONFIG.c_include_mm2s {0} \
   CONFIG.c_m_axi_s2mm_data_width {128} \
   CONFIG.c_s2mm_burst_size {64} \
   CONFIG.c_s_axis_s2mm_tdata_width {128} \
   CONFIG.c_sg_include_stscntrl_strm {0} \
   CONFIG.c_sg_length_width {26} \
 ] $axi_dma_0

  # Create instance: axis_data_fifo_0, and set properties
  set axis_data_fifo_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axis_data_fifo:2.0 axis_data_fifo_0 ]
  set_property -dict [ list \
   CONFIG.FIFO_DEPTH {8192} \
   CONFIG.FIFO_MODE {2} \
   CONFIG.TDATA_NUM_BYTES {16} \
 ] $axis_data_fifo_0

  # Create instance: c_counter_binary_1, and set properties
  set c_counter_binary_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:c_counter_binary:12.0 c_counter_binary_1 ]
  set_property -dict [ list \
   CONFIG.Output_Width {64} \
 ] $c_counter_binary_1

  # Create instance: xlconstant_2, and set properties
  set xlconstant_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_2 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0xffff} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_2

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins S_AXI_LITE] [get_bd_intf_pins axi_dma_0/S_AXI_LITE]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins M_AXI_SG] [get_bd_intf_pins axi_dma_0/M_AXI_SG]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins M_AXI_S2MM] [get_bd_intf_pins axi_dma_0/M_AXI_S2MM]
  connect_bd_intf_net -intf_net axis_data_fifo_0_M_AXIS [get_bd_intf_pins axi_dma_0/S_AXIS_S2MM] [get_bd_intf_pins axis_data_fifo_0/M_AXIS]

  # Create port connections
  connect_bd_net -net CLK_1 [get_bd_pins out2] [get_bd_pins and_gate_1/out1] [get_bd_pins axis_data_fifo_0/s_axis_tlast] [get_bd_pins c_counter_binary_1/CLK]
  connect_bd_net -net adc_trigger_0_t_last [get_bd_pins t_last] [get_bd_pins adc_trigger_0/t_last] [get_bd_pins and_gate_1/a]
  connect_bd_net -net adc_trigger_0_t_valid [get_bd_pins t_valid] [get_bd_pins adc_trigger_0/t_valid] [get_bd_pins and_gate_0/a]
  connect_bd_net -net adc_trigger_in_1 [get_bd_pins adc_trigger_in] [get_bd_pins adc_trigger_0/adc_trigger_in]
  connect_bd_net -net and_gate_0_out1 [get_bd_pins out1] [get_bd_pins and_gate_0/out1] [get_bd_pins axis_data_fifo_0/s_axis_tvalid]
  connect_bd_net -net axi_dma_0_s2mm_introut [get_bd_pins s2mm_introut] [get_bd_pins axi_dma_0/s2mm_introut]
  connect_bd_net -net axi_dma_0_s_axis_s2mm_tready [get_bd_pins axi_dma_0/s_axis_s2mm_tready] [get_bd_pins axis_data_fifo_0/m_axis_tready]
  connect_bd_net -net axi_resetn_1 [get_bd_pins axi_resetn] [get_bd_pins axi_dma_0/axi_resetn] [get_bd_pins axis_data_fifo_0/s_axis_aresetn]
  connect_bd_net -net axis_data_fifo_0_m_axis_tdata [get_bd_pins m_axis_tdata] [get_bd_pins axi_dma_0/s_axis_s2mm_tdata] [get_bd_pins axis_data_fifo_0/m_axis_tdata]
  connect_bd_net -net axis_data_fifo_0_m_axis_tlast [get_bd_pins axi_dma_0/s_axis_s2mm_tlast] [get_bd_pins axis_data_fifo_0/m_axis_tlast]
  connect_bd_net -net axis_data_fifo_0_m_axis_tvalid [get_bd_pins axi_dma_0/s_axis_s2mm_tvalid] [get_bd_pins axis_data_fifo_0/m_axis_tvalid]
  connect_bd_net -net b_1 [get_bd_pins b] [get_bd_pins and_gate_0/b] [get_bd_pins and_gate_1/b]
  connect_bd_net -net s_axi_lite_aclk_1 [get_bd_pins s_axi_lite_aclk] [get_bd_pins adc_trigger_0/clk] [get_bd_pins axi_dma_0/m_axi_s2mm_aclk] [get_bd_pins axi_dma_0/m_axi_sg_aclk] [get_bd_pins axi_dma_0/s_axi_lite_aclk] [get_bd_pins axis_data_fifo_0/s_axis_aclk]
  connect_bd_net -net s_axis_tdata_1 [get_bd_pins s_axis_tdata] [get_bd_pins axis_data_fifo_0/s_axis_tdata]
  connect_bd_net -net xlconstant_2_dout [get_bd_pins axi_dma_0/s_axis_s2mm_tkeep] [get_bd_pins xlconstant_2/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Readout_DMA_0
proc create_hier_cell_Readout_DMA_0 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Readout_DMA_0() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M00_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M_AXI_S2MM

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M_AXI_SG

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI_LITE


  # Create pins
  create_bd_pin -dir I adc_trigger_in
  create_bd_pin -dir I -type rst axi_resetn
  create_bd_pin -dir I b
  create_bd_pin -dir O -from 127 -to 0 m_axis_tdata
  create_bd_pin -dir O out1
  create_bd_pin -dir O out2
  create_bd_pin -dir O -type intr s2mm_introut
  create_bd_pin -dir I -type clk s_axi_lite_aclk
  create_bd_pin -dir I -from 127 -to 0 s_axis_tdata
  create_bd_pin -dir O t_last
  create_bd_pin -dir O t_valid

  # Create instance: adc_trigger_0, and set properties
  set block_name adc_trigger
  set block_cell_name adc_trigger_0
  if { [catch {set adc_trigger_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $adc_trigger_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: and_gate_0, and set properties
  set block_name and_gate
  set block_cell_name and_gate_0
  if { [catch {set and_gate_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $and_gate_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: and_gate_1, and set properties
  set block_name and_gate
  set block_cell_name and_gate_1
  if { [catch {set and_gate_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $and_gate_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: axi_dma_0, and set properties
  set axi_dma_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_dma:7.1 axi_dma_0 ]
  set_property -dict [ list \
   CONFIG.c_include_mm2s {0} \
   CONFIG.c_m_axi_s2mm_data_width {128} \
   CONFIG.c_s2mm_burst_size {64} \
   CONFIG.c_s_axis_s2mm_tdata_width {128} \
   CONFIG.c_sg_include_stscntrl_strm {0} \
   CONFIG.c_sg_length_width {26} \
 ] $axi_dma_0

  # Create instance: axis_data_fifo_0, and set properties
  set axis_data_fifo_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axis_data_fifo:2.0 axis_data_fifo_0 ]
  set_property -dict [ list \
   CONFIG.FIFO_DEPTH {8192} \
   CONFIG.FIFO_MODE {2} \
   CONFIG.TDATA_NUM_BYTES {16} \
 ] $axis_data_fifo_0

  # Create instance: c_counter_binary_1, and set properties
  set c_counter_binary_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:c_counter_binary:12.0 c_counter_binary_1 ]
  set_property -dict [ list \
   CONFIG.Output_Width {64} \
 ] $c_counter_binary_1

  # Create instance: xlconstant_2, and set properties
  set xlconstant_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_2 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0xffff} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_2

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins S_AXI_LITE] [get_bd_intf_pins axi_dma_0/S_AXI_LITE]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins M_AXI_SG] [get_bd_intf_pins axi_dma_0/M_AXI_SG]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins M_AXI_S2MM] [get_bd_intf_pins axi_dma_0/M_AXI_S2MM]
  connect_bd_intf_net -intf_net axis_data_fifo_0_M_AXIS [get_bd_intf_pins axi_dma_0/S_AXIS_S2MM] [get_bd_intf_pins axis_data_fifo_0/M_AXIS]

  # Create port connections
  connect_bd_net -net CLK_1 [get_bd_pins out2] [get_bd_pins and_gate_1/out1] [get_bd_pins axis_data_fifo_0/s_axis_tlast] [get_bd_pins c_counter_binary_1/CLK]
  connect_bd_net -net adc_trigger_0_t_last [get_bd_pins t_last] [get_bd_pins adc_trigger_0/t_last] [get_bd_pins and_gate_1/a]
  connect_bd_net -net adc_trigger_0_t_valid [get_bd_pins t_valid] [get_bd_pins adc_trigger_0/t_valid] [get_bd_pins and_gate_0/a]
  connect_bd_net -net adc_trigger_in_1 [get_bd_pins adc_trigger_in] [get_bd_pins adc_trigger_0/adc_trigger_in]
  connect_bd_net -net and_gate_0_out1 [get_bd_pins out1] [get_bd_pins and_gate_0/out1] [get_bd_pins axis_data_fifo_0/s_axis_tvalid]
  connect_bd_net -net axi_dma_0_s2mm_introut [get_bd_pins s2mm_introut] [get_bd_pins axi_dma_0/s2mm_introut]
  connect_bd_net -net axi_dma_0_s_axis_s2mm_tready [get_bd_pins axi_dma_0/s_axis_s2mm_tready] [get_bd_pins axis_data_fifo_0/m_axis_tready]
  connect_bd_net -net axi_resetn_1 [get_bd_pins axi_resetn] [get_bd_pins axi_dma_0/axi_resetn] [get_bd_pins axis_data_fifo_0/s_axis_aresetn]
  connect_bd_net -net axis_data_fifo_0_m_axis_tdata [get_bd_pins m_axis_tdata] [get_bd_pins axi_dma_0/s_axis_s2mm_tdata] [get_bd_pins axis_data_fifo_0/m_axis_tdata]
  connect_bd_net -net axis_data_fifo_0_m_axis_tlast [get_bd_pins axi_dma_0/s_axis_s2mm_tlast] [get_bd_pins axis_data_fifo_0/m_axis_tlast]
  connect_bd_net -net axis_data_fifo_0_m_axis_tvalid [get_bd_pins axi_dma_0/s_axis_s2mm_tvalid] [get_bd_pins axis_data_fifo_0/m_axis_tvalid]
  connect_bd_net -net b_1 [get_bd_pins b] [get_bd_pins and_gate_0/b] [get_bd_pins and_gate_1/b]
  connect_bd_net -net s_axi_lite_aclk_1 [get_bd_pins s_axi_lite_aclk] [get_bd_pins adc_trigger_0/clk] [get_bd_pins axi_dma_0/m_axi_s2mm_aclk] [get_bd_pins axi_dma_0/m_axi_sg_aclk] [get_bd_pins axi_dma_0/s_axi_lite_aclk] [get_bd_pins axis_data_fifo_0/s_axis_aclk]
  connect_bd_net -net s_axis_tdata_1 [get_bd_pins s_axis_tdata] [get_bd_pins axis_data_fifo_0/s_axis_tdata]
  connect_bd_net -net xlconstant_2_dout [get_bd_pins axi_dma_0/s_axis_s2mm_tkeep] [get_bd_pins xlconstant_2/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Filters_Rotation_ADC_12_32
proc create_hier_cell_Filters_Rotation_ADC_12_32 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Filters_Rotation_ADC_12_32() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir O -from 127 -to 0 Data_out_6
  create_bd_pin -dir I -from 63 -to 0 I
  create_bd_pin -dir O -from 39 -to 0 I_mul_out
  create_bd_pin -dir O -from 39 -to 0 I_mul_out1
  create_bd_pin -dir O -from 39 -to 0 I_out
  create_bd_pin -dir I I_valid
  create_bd_pin -dir O -from 60 -to 0 O1
  create_bd_pin -dir O -from 60 -to 0 O2
  create_bd_pin -dir I -from 63 -to 0 Q
  create_bd_pin -dir O -from 39 -to 0 Q_out
  create_bd_pin -dir I Q_valid
  create_bd_pin -dir I a
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_1
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_1
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_1
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_1
  create_bd_pin -dir I -from 15 -to 0 coeff_b_1
  create_bd_pin -dir O -from 19 -to 0 cos_thetha
  create_bd_pin -dir O -from 19 -to 0 cos_thetha1
  create_bd_pin -dir O cos_thetha_valid_out
  create_bd_pin -dir O cos_thetha_valid_out1
  create_bd_pin -dir O -from 63 -to 0 data_out
  create_bd_pin -dir O -from 63 -to 0 data_out1
  create_bd_pin -dir O -from 39 -to 0 data_out_0
  create_bd_pin -dir O -from 39 -to 0 data_out_0_0
  create_bd_pin -dir O -from 0 -to 0 data_out_1
  create_bd_pin -dir O -from 0 -to 0 data_out_1_0
  create_bd_pin -dir O -from 0 -to 0 data_out_2
  create_bd_pin -dir O -from 0 -to 0 data_out_3
  create_bd_pin -dir O -from 39 -to 0 data_out_4
  create_bd_pin -dir O -from 39 -to 0 data_out_5
  create_bd_pin -dir I filter_bypass
  create_bd_pin -dir O -from 39 -to 0 filter_op_0
  create_bd_pin -dir O -from 39 -to 0 filter_op_0_0
  create_bd_pin -dir I -from 1 -to 0 filterstack_sel
  create_bd_pin -dir O main_valid
  create_bd_pin -dir O -from 59 -to 0 mul_output
  create_bd_pin -dir O -from 59 -to 0 mul_output1
  create_bd_pin -dir O -from 59 -to 0 mul_output2
  create_bd_pin -dir O -from 59 -to 0 mul_output3
  create_bd_pin -dir O mul_output_valid
  create_bd_pin -dir O mul_output_valid1
  create_bd_pin -dir O mul_output_valid2
  create_bd_pin -dir O mul_output_valid3
  create_bd_pin -dir O op_valid_0
  create_bd_pin -dir O op_valid_0_0
  create_bd_pin -dir I -from 1 -to 0 qubit_in
  create_bd_pin -dir O -from 1 -to 0 qubit_out
  create_bd_pin -dir I rotation_bypass
  create_bd_pin -dir I -from 23 -to 0 thetha_3
  create_bd_pin -dir O -from 23 -to 0 thetha_cos
  create_bd_pin -dir O -from 23 -to 0 thetha_sin
  create_bd_pin -dir O thetha_valid_out
  create_bd_pin -dir O -from 63 -to 0 y
  create_bd_pin -dir O -from 63 -to 0 y1
  create_bd_pin -dir O -from 63 -to 0 y2
  create_bd_pin -dir O -from 63 -to 0 y3

  # Create instance: Filtering
  create_hier_cell_Filtering_3 $hier_obj Filtering

  # Create instance: R_Theta
  create_hier_cell_R_Theta_3 $hier_obj R_Theta

  # Create port connections
  connect_bd_net -net R_Theta_I_mul_out [get_bd_pins I_mul_out] [get_bd_pins R_Theta/I_mul_out]
  connect_bd_net -net R_Theta_I_mul_out1 [get_bd_pins I_mul_out1] [get_bd_pins R_Theta/I_mul_out1]
  connect_bd_net -net R_Theta_I_out [get_bd_pins I_out] [get_bd_pins R_Theta/I_out]
  connect_bd_net -net R_Theta_O1 [get_bd_pins O1] [get_bd_pins R_Theta/O1]
  connect_bd_net -net R_Theta_O2 [get_bd_pins O2] [get_bd_pins R_Theta/O2]
  connect_bd_net -net R_Theta_Q_out [get_bd_pins Q_out] [get_bd_pins R_Theta/Q_out]
  connect_bd_net -net R_Theta_cos_thetha [get_bd_pins cos_thetha] [get_bd_pins R_Theta/cos_thetha]
  connect_bd_net -net R_Theta_cos_thetha1 [get_bd_pins cos_thetha1] [get_bd_pins R_Theta/cos_thetha1]
  connect_bd_net -net R_Theta_cos_thetha_valid_out [get_bd_pins cos_thetha_valid_out] [get_bd_pins R_Theta/cos_thetha_valid_out]
  connect_bd_net -net R_Theta_cos_thetha_valid_out1 [get_bd_pins cos_thetha_valid_out1] [get_bd_pins R_Theta/cos_thetha_valid_out1]
  connect_bd_net -net R_Theta_data_out [get_bd_pins data_out] [get_bd_pins R_Theta/data_out]
  connect_bd_net -net R_Theta_data_out1 [get_bd_pins data_out1] [get_bd_pins R_Theta/data_out1]
  connect_bd_net -net R_Theta_main_valid [get_bd_pins main_valid] [get_bd_pins R_Theta/main_valid]
  connect_bd_net -net R_Theta_mul_output [get_bd_pins mul_output] [get_bd_pins R_Theta/mul_output]
  connect_bd_net -net R_Theta_mul_output1 [get_bd_pins mul_output1] [get_bd_pins R_Theta/mul_output1]
  connect_bd_net -net R_Theta_mul_output2 [get_bd_pins mul_output2] [get_bd_pins R_Theta/mul_output2]
  connect_bd_net -net R_Theta_mul_output3 [get_bd_pins mul_output3] [get_bd_pins R_Theta/mul_output3]
  connect_bd_net -net R_Theta_mul_output_valid [get_bd_pins mul_output_valid] [get_bd_pins R_Theta/mul_output_valid]
  connect_bd_net -net R_Theta_mul_output_valid1 [get_bd_pins mul_output_valid1] [get_bd_pins R_Theta/mul_output_valid1]
  connect_bd_net -net R_Theta_mul_output_valid2 [get_bd_pins mul_output_valid2] [get_bd_pins R_Theta/mul_output_valid2]
  connect_bd_net -net R_Theta_mul_output_valid3 [get_bd_pins mul_output_valid3] [get_bd_pins R_Theta/mul_output_valid3]
  connect_bd_net -net R_Theta_qubit_out [get_bd_pins qubit_out] [get_bd_pins R_Theta/qubit_out]
  connect_bd_net -net R_Theta_thetha_cos [get_bd_pins thetha_cos] [get_bd_pins R_Theta/thetha_cos]
  connect_bd_net -net R_Theta_thetha_sin [get_bd_pins thetha_sin] [get_bd_pins R_Theta/thetha_sin]
  connect_bd_net -net R_Theta_thetha_valid_out [get_bd_pins thetha_valid_out] [get_bd_pins R_Theta/thetha_valid_out]
  connect_bd_net -net R_Theta_y [get_bd_pins y] [get_bd_pins R_Theta/y]
  connect_bd_net -net R_Theta_y1 [get_bd_pins y1] [get_bd_pins R_Theta/y1]
  connect_bd_net -net R_Theta_y2 [get_bd_pins y2] [get_bd_pins R_Theta/y2]
  connect_bd_net -net R_Theta_y3 [get_bd_pins y3] [get_bd_pins R_Theta/y3]
  connect_bd_net -net a_0_1 [get_bd_pins rotation_bypass] [get_bd_pins R_Theta/a_0]
  connect_bd_net -net coeff_a2b_1_1 [get_bd_pins coeff_a2b_1] [get_bd_pins Filtering/coeff_a2b_1]
  connect_bd_net -net coeff_a3b_1_1 [get_bd_pins coeff_a3b_1] [get_bd_pins Filtering/coeff_a3b_1]
  connect_bd_net -net coeff_a4_1_1 [get_bd_pins coeff_a4_1] [get_bd_pins Filtering/coeff_a4_1]
  connect_bd_net -net coeff_ab_1_1 [get_bd_pins coeff_ab_1] [get_bd_pins Filtering/coeff_ab_1]
  connect_bd_net -net coeff_b_1_1 [get_bd_pins coeff_b_1] [get_bd_pins Filtering/coeff_b_1]
  connect_bd_net -net filter_mav_Q_data_out_0 [get_bd_pins data_out_0_0] [get_bd_pins Filtering/data_out_0_0]
  connect_bd_net -net filter_mav_Q_data_out_1 [get_bd_pins data_out_1_0] [get_bd_pins Filtering/data_out_1_0]
  connect_bd_net -net filter_mav_Q_filter_op_0 [get_bd_pins filter_op_0_0] [get_bd_pins Filtering/filter_op_0_0]
  connect_bd_net -net filter_mav_Q_op_valid_0 [get_bd_pins op_valid_0_0] [get_bd_pins Filtering/op_valid_0_0]
  connect_bd_net -net filter_mav_data_out_0 [get_bd_pins data_out_0] [get_bd_pins Filtering/data_out_0]
  connect_bd_net -net filter_mav_data_out_1 [get_bd_pins data_out_1] [get_bd_pins Filtering/data_out_1]
  connect_bd_net -net fir_bypass_mux_I1_data_out [get_bd_pins data_out_2] [get_bd_pins Filtering/data_out_2] [get_bd_pins R_Theta/data_out_2]
  connect_bd_net -net fir_bypass_mux_I_data_out [get_bd_pins data_out_5] [get_bd_pins Filtering/data_out_5] [get_bd_pins R_Theta/data_out_5]
  connect_bd_net -net fir_bypass_mux_Q1_data_out [get_bd_pins data_out_3] [get_bd_pins Filtering/data_out_3] [get_bd_pins R_Theta/data_out_3]
  connect_bd_net -net fir_bypass_mux_Q_data_out [get_bd_pins data_out_4] [get_bd_pins Filtering/data_out_4] [get_bd_pins R_Theta/data_out_4]
  connect_bd_net -net merger_2_0_Data_out [get_bd_pins Data_out_6] [get_bd_pins R_Theta/Data_out_6]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins filter_op_0] [get_bd_pins Filtering/filter_op_0]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins op_valid_0] [get_bd_pins Filtering/op_valid_0]
  connect_bd_net -net param_mux_0_data_out [get_bd_pins a] [get_bd_pins Filtering/a]
  connect_bd_net -net qubit_in_1 [get_bd_pins qubit_in] [get_bd_pins R_Theta/qubit_in]
  connect_bd_net -net sel_0 [get_bd_pins filter_bypass] [get_bd_pins Filtering/sel]
  connect_bd_net -net sel_0_1 [get_bd_pins filterstack_sel] [get_bd_pins Filtering/sel_0]
  connect_bd_net -net thetha_3_1 [get_bd_pins thetha_3] [get_bd_pins R_Theta/thetha_3]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins Filtering/clk_0] [get_bd_pins R_Theta/clk]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tdata [get_bd_pins I] [get_bd_pins Filtering/I]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tvalid [get_bd_pins I_valid] [get_bd_pins Filtering/b1]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tdata [get_bd_pins Q] [get_bd_pins Filtering/Q]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tvalid [get_bd_pins Q_valid] [get_bd_pins Filtering/b]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Filters_Rotation_ADC_10_30
proc create_hier_cell_Filters_Rotation_ADC_10_30 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Filters_Rotation_ADC_10_30() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir O -from 127 -to 0 Data_out_6
  create_bd_pin -dir I -from 63 -to 0 I
  create_bd_pin -dir O -from 39 -to 0 I_mul_out
  create_bd_pin -dir O -from 39 -to 0 I_mul_out1
  create_bd_pin -dir O -from 39 -to 0 I_out
  create_bd_pin -dir I I_valid
  create_bd_pin -dir O -from 60 -to 0 O1
  create_bd_pin -dir O -from 60 -to 0 O2
  create_bd_pin -dir I -from 63 -to 0 Q
  create_bd_pin -dir O -from 39 -to 0 Q_out
  create_bd_pin -dir I Q_valid
  create_bd_pin -dir I a
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_2
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_2
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_2
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_2
  create_bd_pin -dir I -from 15 -to 0 coeff_b_2
  create_bd_pin -dir O -from 19 -to 0 cos_thetha
  create_bd_pin -dir O -from 19 -to 0 cos_thetha1
  create_bd_pin -dir O cos_thetha_valid_out
  create_bd_pin -dir O cos_thetha_valid_out1
  create_bd_pin -dir O -from 63 -to 0 data_out
  create_bd_pin -dir O -from 63 -to 0 data_out1
  create_bd_pin -dir O -from 39 -to 0 data_out_0
  create_bd_pin -dir O -from 39 -to 0 data_out_0_0
  create_bd_pin -dir O -from 0 -to 0 data_out_1
  create_bd_pin -dir O -from 0 -to 0 data_out_1_0
  create_bd_pin -dir O -from 0 -to 0 data_out_2
  create_bd_pin -dir O -from 0 -to 0 data_out_3
  create_bd_pin -dir O -from 39 -to 0 data_out_4
  create_bd_pin -dir O -from 39 -to 0 data_out_5
  create_bd_pin -dir I filter_bypass
  create_bd_pin -dir O -from 39 -to 0 filter_op_0
  create_bd_pin -dir O -from 39 -to 0 filter_op_0_0
  create_bd_pin -dir I -from 1 -to 0 filterstack_sel
  create_bd_pin -dir O main_valid
  create_bd_pin -dir O -from 59 -to 0 mul_output
  create_bd_pin -dir O -from 59 -to 0 mul_output1
  create_bd_pin -dir O -from 59 -to 0 mul_output2
  create_bd_pin -dir O -from 59 -to 0 mul_output3
  create_bd_pin -dir O mul_output_valid
  create_bd_pin -dir O mul_output_valid1
  create_bd_pin -dir O mul_output_valid2
  create_bd_pin -dir O mul_output_valid3
  create_bd_pin -dir O op_valid_0
  create_bd_pin -dir O op_valid_0_0
  create_bd_pin -dir I -from 1 -to 0 qubit_in
  create_bd_pin -dir O -from 1 -to 0 qubit_out
  create_bd_pin -dir I rotation_bypass
  create_bd_pin -dir I -from 23 -to 0 thetha_1
  create_bd_pin -dir O -from 23 -to 0 thetha_cos
  create_bd_pin -dir O -from 23 -to 0 thetha_sin
  create_bd_pin -dir O thetha_valid_out
  create_bd_pin -dir O -from 63 -to 0 y
  create_bd_pin -dir O -from 63 -to 0 y1
  create_bd_pin -dir O -from 63 -to 0 y2
  create_bd_pin -dir O -from 63 -to 0 y3

  # Create instance: Filtering
  create_hier_cell_Filtering_2 $hier_obj Filtering

  # Create instance: R_Theta
  create_hier_cell_R_Theta_2 $hier_obj R_Theta

  # Create port connections
  connect_bd_net -net R_Theta_I_mul_out [get_bd_pins I_mul_out] [get_bd_pins R_Theta/I_mul_out]
  connect_bd_net -net R_Theta_I_mul_out1 [get_bd_pins I_mul_out1] [get_bd_pins R_Theta/I_mul_out1]
  connect_bd_net -net R_Theta_I_out [get_bd_pins I_out] [get_bd_pins R_Theta/I_out]
  connect_bd_net -net R_Theta_O1 [get_bd_pins O1] [get_bd_pins R_Theta/O1]
  connect_bd_net -net R_Theta_O2 [get_bd_pins O2] [get_bd_pins R_Theta/O2]
  connect_bd_net -net R_Theta_Q_out [get_bd_pins Q_out] [get_bd_pins R_Theta/Q_out]
  connect_bd_net -net R_Theta_cos_thetha [get_bd_pins cos_thetha] [get_bd_pins R_Theta/cos_thetha]
  connect_bd_net -net R_Theta_cos_thetha1 [get_bd_pins cos_thetha1] [get_bd_pins R_Theta/cos_thetha1]
  connect_bd_net -net R_Theta_cos_thetha_valid_out [get_bd_pins cos_thetha_valid_out] [get_bd_pins R_Theta/cos_thetha_valid_out]
  connect_bd_net -net R_Theta_cos_thetha_valid_out1 [get_bd_pins cos_thetha_valid_out1] [get_bd_pins R_Theta/cos_thetha_valid_out1]
  connect_bd_net -net R_Theta_data_out [get_bd_pins data_out] [get_bd_pins R_Theta/data_out]
  connect_bd_net -net R_Theta_data_out1 [get_bd_pins data_out1] [get_bd_pins R_Theta/data_out1]
  connect_bd_net -net R_Theta_main_valid [get_bd_pins main_valid] [get_bd_pins R_Theta/main_valid]
  connect_bd_net -net R_Theta_mul_output [get_bd_pins mul_output] [get_bd_pins R_Theta/mul_output]
  connect_bd_net -net R_Theta_mul_output1 [get_bd_pins mul_output1] [get_bd_pins R_Theta/mul_output1]
  connect_bd_net -net R_Theta_mul_output2 [get_bd_pins mul_output2] [get_bd_pins R_Theta/mul_output2]
  connect_bd_net -net R_Theta_mul_output3 [get_bd_pins mul_output3] [get_bd_pins R_Theta/mul_output3]
  connect_bd_net -net R_Theta_mul_output_valid [get_bd_pins mul_output_valid] [get_bd_pins R_Theta/mul_output_valid]
  connect_bd_net -net R_Theta_mul_output_valid1 [get_bd_pins mul_output_valid1] [get_bd_pins R_Theta/mul_output_valid1]
  connect_bd_net -net R_Theta_mul_output_valid2 [get_bd_pins mul_output_valid2] [get_bd_pins R_Theta/mul_output_valid2]
  connect_bd_net -net R_Theta_mul_output_valid3 [get_bd_pins mul_output_valid3] [get_bd_pins R_Theta/mul_output_valid3]
  connect_bd_net -net R_Theta_qubit_out [get_bd_pins qubit_out] [get_bd_pins R_Theta/qubit_out]
  connect_bd_net -net R_Theta_thetha_cos [get_bd_pins thetha_cos] [get_bd_pins R_Theta/thetha_cos]
  connect_bd_net -net R_Theta_thetha_sin [get_bd_pins thetha_sin] [get_bd_pins R_Theta/thetha_sin]
  connect_bd_net -net R_Theta_thetha_valid_out [get_bd_pins thetha_valid_out] [get_bd_pins R_Theta/thetha_valid_out]
  connect_bd_net -net R_Theta_y [get_bd_pins y] [get_bd_pins R_Theta/y]
  connect_bd_net -net R_Theta_y1 [get_bd_pins y1] [get_bd_pins R_Theta/y1]
  connect_bd_net -net R_Theta_y2 [get_bd_pins y2] [get_bd_pins R_Theta/y2]
  connect_bd_net -net R_Theta_y3 [get_bd_pins y3] [get_bd_pins R_Theta/y3]
  connect_bd_net -net a_0_1 [get_bd_pins rotation_bypass] [get_bd_pins R_Theta/a_0]
  connect_bd_net -net coeff_a2b_2_1 [get_bd_pins coeff_a2b_2] [get_bd_pins Filtering/coeff_a2b_2]
  connect_bd_net -net coeff_a3b_2_1 [get_bd_pins coeff_a3b_2] [get_bd_pins Filtering/coeff_a3b_2]
  connect_bd_net -net coeff_a4_2_1 [get_bd_pins coeff_a4_2] [get_bd_pins Filtering/coeff_a4_2]
  connect_bd_net -net coeff_ab_2_1 [get_bd_pins coeff_ab_2] [get_bd_pins Filtering/coeff_ab_2]
  connect_bd_net -net coeff_b_2_1 [get_bd_pins coeff_b_2] [get_bd_pins Filtering/coeff_b_2]
  connect_bd_net -net filter_mav_Q_data_out_0 [get_bd_pins data_out_0_0] [get_bd_pins Filtering/data_out_0_0]
  connect_bd_net -net filter_mav_Q_data_out_1 [get_bd_pins data_out_1_0] [get_bd_pins Filtering/data_out_1_0]
  connect_bd_net -net filter_mav_Q_filter_op_0 [get_bd_pins filter_op_0_0] [get_bd_pins Filtering/filter_op_0_0]
  connect_bd_net -net filter_mav_Q_op_valid_0 [get_bd_pins op_valid_0_0] [get_bd_pins Filtering/op_valid_0_0]
  connect_bd_net -net filter_mav_data_out_0 [get_bd_pins data_out_0] [get_bd_pins Filtering/data_out_0]
  connect_bd_net -net filter_mav_data_out_1 [get_bd_pins data_out_1] [get_bd_pins Filtering/data_out_1]
  connect_bd_net -net fir_bypass_mux_I1_data_out [get_bd_pins data_out_2] [get_bd_pins Filtering/data_out_2] [get_bd_pins R_Theta/data_out_2]
  connect_bd_net -net fir_bypass_mux_I_data_out [get_bd_pins data_out_5] [get_bd_pins Filtering/data_out_5] [get_bd_pins R_Theta/data_out_5]
  connect_bd_net -net fir_bypass_mux_Q1_data_out [get_bd_pins data_out_3] [get_bd_pins Filtering/data_out_3] [get_bd_pins R_Theta/data_out_3]
  connect_bd_net -net fir_bypass_mux_Q_data_out [get_bd_pins data_out_4] [get_bd_pins Filtering/data_out_4] [get_bd_pins R_Theta/data_out_4]
  connect_bd_net -net merger_2_0_Data_out [get_bd_pins Data_out_6] [get_bd_pins R_Theta/Data_out_6]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins filter_op_0] [get_bd_pins Filtering/filter_op_0]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins op_valid_0] [get_bd_pins Filtering/op_valid_0]
  connect_bd_net -net param_mux_0_data_out [get_bd_pins a] [get_bd_pins Filtering/a]
  connect_bd_net -net qubit_in_1 [get_bd_pins qubit_in] [get_bd_pins R_Theta/qubit_in]
  connect_bd_net -net sel_0 [get_bd_pins filter_bypass] [get_bd_pins Filtering/sel]
  connect_bd_net -net sel_0_1 [get_bd_pins filterstack_sel] [get_bd_pins Filtering/sel_0]
  connect_bd_net -net thetha_1_1 [get_bd_pins thetha_1] [get_bd_pins R_Theta/thetha_1]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins Filtering/clk_0] [get_bd_pins R_Theta/clk]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tdata [get_bd_pins I] [get_bd_pins Filtering/I]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tvalid [get_bd_pins I_valid] [get_bd_pins Filtering/b1]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tdata [get_bd_pins Q] [get_bd_pins Filtering/Q]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tvalid [get_bd_pins Q_valid] [get_bd_pins Filtering/b]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Filters_Rotation_ADC_02_22
proc create_hier_cell_Filters_Rotation_ADC_02_22 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Filters_Rotation_ADC_02_22() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir O -from 127 -to 0 Data_out_6
  create_bd_pin -dir I -from 63 -to 0 I
  create_bd_pin -dir O -from 39 -to 0 I_mul_out
  create_bd_pin -dir O -from 39 -to 0 I_mul_out1
  create_bd_pin -dir O -from 39 -to 0 I_out
  create_bd_pin -dir I I_valid
  create_bd_pin -dir O -from 60 -to 0 O1
  create_bd_pin -dir O -from 60 -to 0 O2
  create_bd_pin -dir I -from 63 -to 0 Q
  create_bd_pin -dir O -from 39 -to 0 Q_out
  create_bd_pin -dir I Q_valid
  create_bd_pin -dir I a
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_3
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_3
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_3
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_3
  create_bd_pin -dir I -from 15 -to 0 coeff_b_3
  create_bd_pin -dir O -from 19 -to 0 cos_thetha
  create_bd_pin -dir O -from 19 -to 0 cos_thetha1
  create_bd_pin -dir O cos_thetha_valid_out
  create_bd_pin -dir O cos_thetha_valid_out1
  create_bd_pin -dir O -from 63 -to 0 data_out
  create_bd_pin -dir O -from 63 -to 0 data_out1
  create_bd_pin -dir O -from 39 -to 0 data_out_0
  create_bd_pin -dir O -from 39 -to 0 data_out_0_0
  create_bd_pin -dir O -from 0 -to 0 data_out_1
  create_bd_pin -dir O -from 0 -to 0 data_out_1_0
  create_bd_pin -dir O -from 0 -to 0 data_out_2
  create_bd_pin -dir O -from 0 -to 0 data_out_3
  create_bd_pin -dir O -from 39 -to 0 data_out_4
  create_bd_pin -dir O -from 39 -to 0 data_out_5
  create_bd_pin -dir I filter_bypass
  create_bd_pin -dir O -from 39 -to 0 filter_op_0
  create_bd_pin -dir O -from 39 -to 0 filter_op_0_0
  create_bd_pin -dir I -from 1 -to 0 filterstack_sel
  create_bd_pin -dir O main_valid
  create_bd_pin -dir O -from 59 -to 0 mul_output
  create_bd_pin -dir O -from 59 -to 0 mul_output1
  create_bd_pin -dir O -from 59 -to 0 mul_output2
  create_bd_pin -dir O -from 59 -to 0 mul_output3
  create_bd_pin -dir O mul_output_valid
  create_bd_pin -dir O mul_output_valid1
  create_bd_pin -dir O mul_output_valid2
  create_bd_pin -dir O mul_output_valid3
  create_bd_pin -dir O op_valid_0
  create_bd_pin -dir O op_valid_0_0
  create_bd_pin -dir I -from 1 -to 0 qubit_in
  create_bd_pin -dir O -from 1 -to 0 qubit_out
  create_bd_pin -dir I rotation_bypass
  create_bd_pin -dir I -from 23 -to 0 thetha_0
  create_bd_pin -dir O -from 23 -to 0 thetha_cos
  create_bd_pin -dir O -from 23 -to 0 thetha_sin
  create_bd_pin -dir O thetha_valid_out
  create_bd_pin -dir O -from 63 -to 0 y
  create_bd_pin -dir O -from 63 -to 0 y1
  create_bd_pin -dir O -from 63 -to 0 y2
  create_bd_pin -dir O -from 63 -to 0 y3

  # Create instance: Filtering
  create_hier_cell_Filtering_1 $hier_obj Filtering

  # Create instance: R_Theta
  create_hier_cell_R_Theta_1 $hier_obj R_Theta

  # Create port connections
  connect_bd_net -net R_Theta_I_mul_out [get_bd_pins I_mul_out] [get_bd_pins R_Theta/I_mul_out]
  connect_bd_net -net R_Theta_I_mul_out1 [get_bd_pins I_mul_out1] [get_bd_pins R_Theta/I_mul_out1]
  connect_bd_net -net R_Theta_I_out [get_bd_pins I_out] [get_bd_pins R_Theta/I_out]
  connect_bd_net -net R_Theta_O1 [get_bd_pins O1] [get_bd_pins R_Theta/O1]
  connect_bd_net -net R_Theta_O2 [get_bd_pins O2] [get_bd_pins R_Theta/O2]
  connect_bd_net -net R_Theta_Q_out [get_bd_pins Q_out] [get_bd_pins R_Theta/Q_out]
  connect_bd_net -net R_Theta_cos_thetha [get_bd_pins cos_thetha] [get_bd_pins R_Theta/cos_thetha]
  connect_bd_net -net R_Theta_cos_thetha1 [get_bd_pins cos_thetha1] [get_bd_pins R_Theta/cos_thetha1]
  connect_bd_net -net R_Theta_cos_thetha_valid_out [get_bd_pins cos_thetha_valid_out] [get_bd_pins R_Theta/cos_thetha_valid_out]
  connect_bd_net -net R_Theta_cos_thetha_valid_out1 [get_bd_pins cos_thetha_valid_out1] [get_bd_pins R_Theta/cos_thetha_valid_out1]
  connect_bd_net -net R_Theta_data_out [get_bd_pins data_out] [get_bd_pins R_Theta/data_out]
  connect_bd_net -net R_Theta_data_out1 [get_bd_pins data_out1] [get_bd_pins R_Theta/data_out1]
  connect_bd_net -net R_Theta_main_valid [get_bd_pins main_valid] [get_bd_pins R_Theta/main_valid]
  connect_bd_net -net R_Theta_mul_output [get_bd_pins mul_output] [get_bd_pins R_Theta/mul_output]
  connect_bd_net -net R_Theta_mul_output1 [get_bd_pins mul_output1] [get_bd_pins R_Theta/mul_output1]
  connect_bd_net -net R_Theta_mul_output2 [get_bd_pins mul_output2] [get_bd_pins R_Theta/mul_output2]
  connect_bd_net -net R_Theta_mul_output3 [get_bd_pins mul_output3] [get_bd_pins R_Theta/mul_output3]
  connect_bd_net -net R_Theta_mul_output_valid [get_bd_pins mul_output_valid] [get_bd_pins R_Theta/mul_output_valid]
  connect_bd_net -net R_Theta_mul_output_valid1 [get_bd_pins mul_output_valid1] [get_bd_pins R_Theta/mul_output_valid1]
  connect_bd_net -net R_Theta_mul_output_valid2 [get_bd_pins mul_output_valid2] [get_bd_pins R_Theta/mul_output_valid2]
  connect_bd_net -net R_Theta_mul_output_valid3 [get_bd_pins mul_output_valid3] [get_bd_pins R_Theta/mul_output_valid3]
  connect_bd_net -net R_Theta_qubit_out [get_bd_pins qubit_out] [get_bd_pins R_Theta/qubit_out]
  connect_bd_net -net R_Theta_thetha_cos [get_bd_pins thetha_cos] [get_bd_pins R_Theta/thetha_cos]
  connect_bd_net -net R_Theta_thetha_sin [get_bd_pins thetha_sin] [get_bd_pins R_Theta/thetha_sin]
  connect_bd_net -net R_Theta_thetha_valid_out [get_bd_pins thetha_valid_out] [get_bd_pins R_Theta/thetha_valid_out]
  connect_bd_net -net R_Theta_y [get_bd_pins y] [get_bd_pins R_Theta/y]
  connect_bd_net -net R_Theta_y1 [get_bd_pins y1] [get_bd_pins R_Theta/y1]
  connect_bd_net -net R_Theta_y2 [get_bd_pins y2] [get_bd_pins R_Theta/y2]
  connect_bd_net -net R_Theta_y3 [get_bd_pins y3] [get_bd_pins R_Theta/y3]
  connect_bd_net -net a_0_1 [get_bd_pins rotation_bypass] [get_bd_pins R_Theta/a_0]
  connect_bd_net -net coeff_a2b_3_1 [get_bd_pins coeff_a2b_3] [get_bd_pins Filtering/coeff_a2b_3]
  connect_bd_net -net coeff_a3b_3_1 [get_bd_pins coeff_a3b_3] [get_bd_pins Filtering/coeff_a3b_3]
  connect_bd_net -net coeff_a4_3_1 [get_bd_pins coeff_a4_3] [get_bd_pins Filtering/coeff_a4_3]
  connect_bd_net -net coeff_ab_3_1 [get_bd_pins coeff_ab_3] [get_bd_pins Filtering/coeff_ab_3]
  connect_bd_net -net coeff_b_3_1 [get_bd_pins coeff_b_3] [get_bd_pins Filtering/coeff_b_3]
  connect_bd_net -net filter_mav_Q_data_out_0 [get_bd_pins data_out_0_0] [get_bd_pins Filtering/data_out_0_0]
  connect_bd_net -net filter_mav_Q_data_out_1 [get_bd_pins data_out_1_0] [get_bd_pins Filtering/data_out_1_0]
  connect_bd_net -net filter_mav_Q_filter_op_0 [get_bd_pins filter_op_0_0] [get_bd_pins Filtering/filter_op_0_0]
  connect_bd_net -net filter_mav_Q_op_valid_0 [get_bd_pins op_valid_0_0] [get_bd_pins Filtering/op_valid_0_0]
  connect_bd_net -net filter_mav_data_out_0 [get_bd_pins data_out_0] [get_bd_pins Filtering/data_out_0]
  connect_bd_net -net filter_mav_data_out_1 [get_bd_pins data_out_1] [get_bd_pins Filtering/data_out_1]
  connect_bd_net -net fir_bypass_mux_I1_data_out [get_bd_pins data_out_2] [get_bd_pins Filtering/data_out_2] [get_bd_pins R_Theta/data_out_2]
  connect_bd_net -net fir_bypass_mux_I_data_out [get_bd_pins data_out_5] [get_bd_pins Filtering/data_out_5] [get_bd_pins R_Theta/data_out_5]
  connect_bd_net -net fir_bypass_mux_Q1_data_out [get_bd_pins data_out_3] [get_bd_pins Filtering/data_out_3] [get_bd_pins R_Theta/data_out_3]
  connect_bd_net -net fir_bypass_mux_Q_data_out [get_bd_pins data_out_4] [get_bd_pins Filtering/data_out_4] [get_bd_pins R_Theta/data_out_4]
  connect_bd_net -net merger_2_0_Data_out [get_bd_pins Data_out_6] [get_bd_pins R_Theta/Data_out_6]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins filter_op_0] [get_bd_pins Filtering/filter_op_0]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins op_valid_0] [get_bd_pins Filtering/op_valid_0]
  connect_bd_net -net param_mux_0_data_out [get_bd_pins a] [get_bd_pins Filtering/a]
  connect_bd_net -net qubit_in_1 [get_bd_pins qubit_in] [get_bd_pins R_Theta/qubit_in]
  connect_bd_net -net sel_0 [get_bd_pins filter_bypass] [get_bd_pins Filtering/sel]
  connect_bd_net -net sel_0_1 [get_bd_pins filterstack_sel] [get_bd_pins Filtering/sel_0]
  connect_bd_net -net thetha_0_1 [get_bd_pins thetha_0] [get_bd_pins R_Theta/thetha_0]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins Filtering/clk_0] [get_bd_pins R_Theta/clk]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tdata [get_bd_pins I] [get_bd_pins Filtering/I]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tvalid [get_bd_pins I_valid] [get_bd_pins Filtering/b1]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tdata [get_bd_pins Q] [get_bd_pins Filtering/Q]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tvalid [get_bd_pins Q_valid] [get_bd_pins Filtering/b]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: Filters_Rotation_ADC_00_20
proc create_hier_cell_Filters_Rotation_ADC_00_20 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Filters_Rotation_ADC_00_20() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir O -from 127 -to 0 Data_out_6
  create_bd_pin -dir I -from 63 -to 0 I
  create_bd_pin -dir O -from 39 -to 0 I_mul_out
  create_bd_pin -dir O -from 39 -to 0 I_mul_out1
  create_bd_pin -dir O -from 39 -to 0 I_out
  create_bd_pin -dir I I_valid
  create_bd_pin -dir O -from 60 -to 0 O1
  create_bd_pin -dir O -from 60 -to 0 O2
  create_bd_pin -dir I -from 63 -to 0 Q
  create_bd_pin -dir O -from 39 -to 0 Q_out
  create_bd_pin -dir I Q_valid
  create_bd_pin -dir I a
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 15 -to 0 coeff_a2b_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a3b_0
  create_bd_pin -dir I -from 15 -to 0 coeff_a4_0
  create_bd_pin -dir I -from 15 -to 0 coeff_ab_0
  create_bd_pin -dir I -from 15 -to 0 coeff_b_0
  create_bd_pin -dir O -from 19 -to 0 cos_thetha
  create_bd_pin -dir O -from 19 -to 0 cos_thetha1
  create_bd_pin -dir O cos_thetha_valid_out
  create_bd_pin -dir O cos_thetha_valid_out1
  create_bd_pin -dir O -from 63 -to 0 data_out
  create_bd_pin -dir O -from 63 -to 0 data_out1
  create_bd_pin -dir I filter_bypass
  create_bd_pin -dir O -from 39 -to 0 filteringout_00_20_I
  create_bd_pin -dir O -from 0 -to 0 filteringout_00_20_Ivalid
  create_bd_pin -dir O -from 39 -to 0 filteringout_00_20_Q
  create_bd_pin -dir O -from 0 -to 0 filteringout_00_20_Qvalid
  create_bd_pin -dir I -from 1 -to 0 filterstack_sel
  create_bd_pin -dir O -from 39 -to 0 firmavout_00_20_I
  create_bd_pin -dir O firmavout_00_20_Ivalid
  create_bd_pin -dir O -from 39 -to 0 firmavout_00_20_Q
  create_bd_pin -dir O firmavout_00_20_Qvalid
  create_bd_pin -dir O -from 39 -to 0 firout_00_20_I
  create_bd_pin -dir O -from 0 -to 0 firout_00_20_Ivalid
  create_bd_pin -dir O -from 39 -to 0 firout_00_20_Q
  create_bd_pin -dir O -from 0 -to 0 firout_00_20_Qvalid
  create_bd_pin -dir O main_valid
  create_bd_pin -dir O -from 59 -to 0 mul_output
  create_bd_pin -dir O -from 59 -to 0 mul_output1
  create_bd_pin -dir O -from 59 -to 0 mul_output2
  create_bd_pin -dir O -from 59 -to 0 mul_output3
  create_bd_pin -dir O mul_output_valid
  create_bd_pin -dir O mul_output_valid1
  create_bd_pin -dir O mul_output_valid2
  create_bd_pin -dir O mul_output_valid3
  create_bd_pin -dir I -from 1 -to 0 qubit_in
  create_bd_pin -dir O -from 1 -to 0 qubit_out
  create_bd_pin -dir I rotation_bypass
  create_bd_pin -dir I -from 23 -to 0 thetha_2
  create_bd_pin -dir O -from 23 -to 0 thetha_cos
  create_bd_pin -dir O -from 23 -to 0 thetha_sin
  create_bd_pin -dir O thetha_valid_out
  create_bd_pin -dir O -from 63 -to 0 y
  create_bd_pin -dir O -from 63 -to 0 y1
  create_bd_pin -dir O -from 63 -to 0 y2
  create_bd_pin -dir O -from 63 -to 0 y3

  # Create instance: Filtering
  create_hier_cell_Filtering $hier_obj Filtering

  # Create instance: R_Theta
  create_hier_cell_R_Theta $hier_obj R_Theta

  # Create port connections
  connect_bd_net -net R_Theta_I_mul_out [get_bd_pins I_mul_out] [get_bd_pins R_Theta/I_mul_out]
  connect_bd_net -net R_Theta_I_mul_out1 [get_bd_pins I_mul_out1] [get_bd_pins R_Theta/I_mul_out1]
  connect_bd_net -net R_Theta_I_out [get_bd_pins I_out] [get_bd_pins R_Theta/I_out]
  connect_bd_net -net R_Theta_O1 [get_bd_pins O1] [get_bd_pins R_Theta/O1]
  connect_bd_net -net R_Theta_O2 [get_bd_pins O2] [get_bd_pins R_Theta/O2]
  connect_bd_net -net R_Theta_Q_out [get_bd_pins Q_out] [get_bd_pins R_Theta/Q_out]
  connect_bd_net -net R_Theta_cos_thetha [get_bd_pins cos_thetha] [get_bd_pins R_Theta/cos_thetha]
  connect_bd_net -net R_Theta_cos_thetha1 [get_bd_pins cos_thetha1] [get_bd_pins R_Theta/cos_thetha1]
  connect_bd_net -net R_Theta_cos_thetha_valid_out [get_bd_pins cos_thetha_valid_out] [get_bd_pins R_Theta/cos_thetha_valid_out]
  connect_bd_net -net R_Theta_cos_thetha_valid_out1 [get_bd_pins cos_thetha_valid_out1] [get_bd_pins R_Theta/cos_thetha_valid_out1]
  connect_bd_net -net R_Theta_data_out [get_bd_pins data_out] [get_bd_pins R_Theta/data_out]
  connect_bd_net -net R_Theta_data_out1 [get_bd_pins data_out1] [get_bd_pins R_Theta/data_out1]
  connect_bd_net -net R_Theta_main_valid [get_bd_pins main_valid] [get_bd_pins R_Theta/main_valid]
  connect_bd_net -net R_Theta_mul_output [get_bd_pins mul_output] [get_bd_pins R_Theta/mul_output]
  connect_bd_net -net R_Theta_mul_output1 [get_bd_pins mul_output1] [get_bd_pins R_Theta/mul_output1]
  connect_bd_net -net R_Theta_mul_output2 [get_bd_pins mul_output2] [get_bd_pins R_Theta/mul_output2]
  connect_bd_net -net R_Theta_mul_output3 [get_bd_pins mul_output3] [get_bd_pins R_Theta/mul_output3]
  connect_bd_net -net R_Theta_mul_output_valid [get_bd_pins mul_output_valid] [get_bd_pins R_Theta/mul_output_valid]
  connect_bd_net -net R_Theta_mul_output_valid1 [get_bd_pins mul_output_valid1] [get_bd_pins R_Theta/mul_output_valid1]
  connect_bd_net -net R_Theta_mul_output_valid2 [get_bd_pins mul_output_valid2] [get_bd_pins R_Theta/mul_output_valid2]
  connect_bd_net -net R_Theta_mul_output_valid3 [get_bd_pins mul_output_valid3] [get_bd_pins R_Theta/mul_output_valid3]
  connect_bd_net -net R_Theta_qubit_out [get_bd_pins qubit_out] [get_bd_pins R_Theta/qubit_out]
  connect_bd_net -net R_Theta_thetha_cos [get_bd_pins thetha_cos] [get_bd_pins R_Theta/thetha_cos]
  connect_bd_net -net R_Theta_thetha_sin [get_bd_pins thetha_sin] [get_bd_pins R_Theta/thetha_sin]
  connect_bd_net -net R_Theta_thetha_valid_out [get_bd_pins thetha_valid_out] [get_bd_pins R_Theta/thetha_valid_out]
  connect_bd_net -net R_Theta_y [get_bd_pins y] [get_bd_pins R_Theta/y]
  connect_bd_net -net R_Theta_y1 [get_bd_pins y1] [get_bd_pins R_Theta/y1]
  connect_bd_net -net R_Theta_y2 [get_bd_pins y2] [get_bd_pins R_Theta/y2]
  connect_bd_net -net R_Theta_y3 [get_bd_pins y3] [get_bd_pins R_Theta/y3]
  connect_bd_net -net a_0_1 [get_bd_pins rotation_bypass] [get_bd_pins R_Theta/a_0]
  connect_bd_net -net coeff_a2b_0_1 [get_bd_pins coeff_a2b_0] [get_bd_pins Filtering/coeff_a2b_0]
  connect_bd_net -net coeff_a3b_0_1 [get_bd_pins coeff_a3b_0] [get_bd_pins Filtering/coeff_a3b_0]
  connect_bd_net -net coeff_a4_0_1 [get_bd_pins coeff_a4_0] [get_bd_pins Filtering/coeff_a4_0]
  connect_bd_net -net coeff_ab_0_1 [get_bd_pins coeff_ab_0] [get_bd_pins Filtering/coeff_ab_0]
  connect_bd_net -net coeff_b_0_1 [get_bd_pins coeff_b_0] [get_bd_pins Filtering/coeff_b_0]
  connect_bd_net -net filter_mav_Q_data_out_0 [get_bd_pins firout_00_20_Q] [get_bd_pins Filtering/data_out_0_0]
  connect_bd_net -net filter_mav_Q_data_out_1 [get_bd_pins firout_00_20_Qvalid] [get_bd_pins Filtering/data_out_1_0]
  connect_bd_net -net filter_mav_Q_filter_op_0 [get_bd_pins firmavout_00_20_Q] [get_bd_pins Filtering/filter_op_0_0]
  connect_bd_net -net filter_mav_Q_op_valid_0 [get_bd_pins firmavout_00_20_Qvalid] [get_bd_pins Filtering/op_valid_0_0]
  connect_bd_net -net filter_mav_data_out_0 [get_bd_pins firout_00_20_I] [get_bd_pins Filtering/data_out_0]
  connect_bd_net -net filter_mav_data_out_1 [get_bd_pins firout_00_20_Ivalid] [get_bd_pins Filtering/data_out_1]
  connect_bd_net -net fir_bypass_mux_I1_data_out [get_bd_pins filteringout_00_20_Ivalid] [get_bd_pins Filtering/data_out_2] [get_bd_pins R_Theta/data_out_2]
  connect_bd_net -net fir_bypass_mux_I_data_out [get_bd_pins filteringout_00_20_I] [get_bd_pins Filtering/data_out_5] [get_bd_pins R_Theta/data_out_5]
  connect_bd_net -net fir_bypass_mux_Q1_data_out [get_bd_pins filteringout_00_20_Qvalid] [get_bd_pins Filtering/data_out_3] [get_bd_pins R_Theta/data_out_3]
  connect_bd_net -net fir_bypass_mux_Q_data_out [get_bd_pins filteringout_00_20_Q] [get_bd_pins Filtering/data_out_4] [get_bd_pins R_Theta/data_out_4]
  connect_bd_net -net merger_2_0_Data_out [get_bd_pins Data_out_6] [get_bd_pins R_Theta/Data_out_6]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins firmavout_00_20_I] [get_bd_pins Filtering/filter_op_0]
  connect_bd_net -net mvng_avg_fil_0_op_valid [get_bd_pins firmavout_00_20_Ivalid] [get_bd_pins Filtering/op_valid_0]
  connect_bd_net -net param_mux_0_data_out [get_bd_pins a] [get_bd_pins Filtering/a]
  connect_bd_net -net qubit_in_1 [get_bd_pins qubit_in] [get_bd_pins R_Theta/qubit_in]
  connect_bd_net -net sel_0 [get_bd_pins filter_bypass] [get_bd_pins Filtering/sel]
  connect_bd_net -net sel_0_1 [get_bd_pins filterstack_sel] [get_bd_pins Filtering/sel_0]
  connect_bd_net -net thetha_2_1 [get_bd_pins thetha_2] [get_bd_pins R_Theta/thetha_2]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins clk] [get_bd_pins Filtering/clk_0] [get_bd_pins R_Theta/clk]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tdata [get_bd_pins I] [get_bd_pins Filtering/I]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tvalid [get_bd_pins I_valid] [get_bd_pins Filtering/b1]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tdata [get_bd_pins Q] [get_bd_pins Filtering/Q]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tvalid [get_bd_pins Q_valid] [get_bd_pins Filtering/b]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: DAC_03_13
proc create_hier_cell_DAC_03_13 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_DAC_03_13() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI1

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI2

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI3


  # Create pins
  create_bd_pin -dir O -from 127 -to 0 D_out
  create_bd_pin -dir I -from 2 -to 0 Din
  create_bd_pin -dir O -from 0 -to 0 Dout1
  create_bd_pin -dir O -from 31 -to 0 I1
  create_bd_pin -dir O -from 15 -to 0 Iavg1
  create_bd_pin -dir I -from 31 -to 0 M
  create_bd_pin -dir O -from 12 -to 0 address
  create_bd_pin -dir O -from 12 -to 0 address0
  create_bd_pin -dir O -from 15 -to 0 amp_increment
  create_bd_pin -dir I -from 15 -to 0 b
  create_bd_pin -dir O -from 12 -to 0 bram_addr_out
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir O -from 15 -to 0 data_out
  create_bd_pin -dir O -from 15 -to 0 data_out2
  create_bd_pin -dir O -from 63 -to 0 data_out_I
  create_bd_pin -dir O -from 63 -to 0 data_out_Q
  create_bd_pin -dir O -from 31 -to 0 doutb
  create_bd_pin -dir O half_reg
  create_bd_pin -dir I -from 31 -to 0 ini_amp_del
  create_bd_pin -dir I -from 31 -to 0 ite_per_mes
  create_bd_pin -dir I -from 31 -to 0 ite_tot
  create_bd_pin -dir I -from 1 -to 0 mode
  create_bd_pin -dir O -from 1 -to 0 mode_out
  create_bd_pin -dir I -from 31 -to 0 off_time1
  create_bd_pin -dir O -from 15 -to 0 out1
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -type rst s_axi_aresetn
  create_bd_pin -dir I sel
  create_bd_pin -dir I -from 31 -to 0 sleep_time
  create_bd_pin -dir I -from 31 -to 0 step_size
  create_bd_pin -dir I -from 31 -to 0 time_bwn_pulses
  create_bd_pin -dir O -from 15 -to 0 trigger
  create_bd_pin -dir O -from 15 -to 0 trigger_out
  create_bd_pin -dir I -from 31 -to 0 trigger_time

  # Create instance: Address_Gen, and set properties
  set block_name param_mux
  set block_cell_name Address_Gen
  if { [catch {set Address_Gen [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Address_Gen eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $Address_Gen

  # Create instance: Block_Mem_I_LSB
  create_hier_cell_Block_Mem_I_LSB_3 $hier_obj Block_Mem_I_LSB

  # Create instance: Block_Mem_I_MSB
  create_hier_cell_Block_Mem_I_MSB_3 $hier_obj Block_Mem_I_MSB

  # Create instance: Block_Mem_Q_LSB
  create_hier_cell_Block_Mem_Q_LSB_3 $hier_obj Block_Mem_Q_LSB

  # Create instance: Block_Mem_Q_MSB
  create_hier_cell_Block_Mem_Q_MSB_3 $hier_obj Block_Mem_Q_MSB

  # Create instance: Data_I, and set properties
  set block_name data_split
  set block_cell_name Data_I
  if { [catch {set Data_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {31} \
   CONFIG.N {64} \
 ] $Data_I

  # Create instance: Data_I_31_0, and set properties
  set block_name data_split
  set block_cell_name Data_I_31_0
  if { [catch {set Data_I_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_I_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Data_I_63_32, and set properties
  set block_name data_split
  set block_cell_name Data_I_63_32
  if { [catch {set Data_I_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_I_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Data_Q, and set properties
  set block_name data_split
  set block_cell_name Data_Q
  if { [catch {set Data_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {31} \
   CONFIG.N {64} \
 ] $Data_Q

  # Create instance: Data_Q_31_0, and set properties
  set block_name data_split
  set block_cell_name Data_Q_31_0
  if { [catch {set Data_Q_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_Q_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Data_Q_63_32, and set properties
  set block_name data_split
  set block_cell_name Data_Q_63_32
  if { [catch {set Data_Q_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_Q_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: I, and set properties
  set block_name merger_2
  set block_cell_name I
  if { [catch {set I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: I0_MAD
  create_hier_cell_I0_MAD_3 $hier_obj I0_MAD

  # Create instance: I1_MAD
  create_hier_cell_I1_MAD_3 $hier_obj I1_MAD

  # Create instance: I2_MAD
  create_hier_cell_I2_MAD_3 $hier_obj I2_MAD

  # Create instance: I3_MAD
  create_hier_cell_I3_MAD_3 $hier_obj I3_MAD

  # Create instance: I_31_0, and set properties
  set block_name data_split
  set block_cell_name I_31_0
  if { [catch {set I_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $I_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $I_31_0

  # Create instance: I_63_32, and set properties
  set block_name data_split
  set block_cell_name I_63_32
  if { [catch {set I_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $I_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $I_63_32

  # Create instance: Q, and set properties
  set block_name merger_2
  set block_cell_name Q
  if { [catch {set Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Q0_MAD
  create_hier_cell_Q0_MAD_3 $hier_obj Q0_MAD

  # Create instance: Q1_MAD
  create_hier_cell_Q1_MAD_3 $hier_obj Q1_MAD

  # Create instance: Q2_MAD
  create_hier_cell_Q2_MAD_3 $hier_obj Q2_MAD

  # Create instance: Q3_MAD
  create_hier_cell_Q3_MAD_3 $hier_obj Q3_MAD

  # Create instance: Q_31_0, and set properties
  set block_name data_split
  set block_cell_name Q_31_0
  if { [catch {set Q_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Q_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $Q_31_0

  # Create instance: Q_63_32, and set properties
  set block_name data_split
  set block_cell_name Q_63_32
  if { [catch {set Q_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Q_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $Q_63_32

  # Create instance: arbitary_wave_gen_0, and set properties
  set block_name arbitary_wave_gen
  set block_cell_name arbitary_wave_gen_0
  if { [catch {set arbitary_wave_gen_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $arbitary_wave_gen_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $arbitary_wave_gen_0

  # Create instance: flip_flop_0, and set properties
  set block_name flip_flop
  set block_cell_name flip_flop_0
  if { [catch {set flip_flop_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $flip_flop_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {128} \
 ] $flip_flop_0

  # Create instance: gaussian_gen1_0, and set properties
  set block_name gaussian_gen1
  set block_cell_name gaussian_gen1_0
  if { [catch {set gaussian_gen1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $gaussian_gen1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.add_bits {13} \
 ] $gaussian_gen1_0

  # Create instance: merger1_0, and set properties
  set block_name merger1
  set block_cell_name merger1_0
  if { [catch {set merger1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: mux_0, and set properties
  set block_name mux
  set block_cell_name mux_0
  if { [catch {set mux_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mux_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: param_mux_I0, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I0
  if { [catch {set param_mux_I0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I0

  # Create instance: param_mux_I1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I1
  if { [catch {set param_mux_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I1

  # Create instance: param_mux_I2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I2
  if { [catch {set param_mux_I2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I2

  # Create instance: param_mux_I3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I3
  if { [catch {set param_mux_I3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I3

  # Create instance: param_mux_Q0, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q0
  if { [catch {set param_mux_Q0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q0

  # Create instance: param_mux_Q1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q1
  if { [catch {set param_mux_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q1

  # Create instance: param_mux_Q2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q2
  if { [catch {set param_mux_Q2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q2

  # Create instance: param_mux_Q3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q3
  if { [catch {set param_mux_Q3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q3

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $xlconstant_1

  # Create instance: xlconstant_3, and set properties
  set xlconstant_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_3 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {32767} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_3

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {0} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {3} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_0

  # Create instance: xlslice_1, and set properties
  set xlslice_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_1 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {3} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_1

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {2} \
   CONFIG.DIN_TO {2} \
   CONFIG.DIN_WIDTH {3} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_2

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins S_AXI] [get_bd_intf_pins Block_Mem_I_LSB/S_AXI]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins S_AXI1] [get_bd_intf_pins Block_Mem_I_MSB/S_AXI]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins S_AXI2] [get_bd_intf_pins Block_Mem_Q_LSB/S_AXI]
  connect_bd_intf_net -intf_net Conn4 [get_bd_intf_pins S_AXI3] [get_bd_intf_pins Block_Mem_Q_MSB/S_AXI]

  # Create port connections
  connect_bd_net -net Block_Mem_I_LSB_doutb [get_bd_pins doutb] [get_bd_pins Block_Mem_I_LSB/doutb] [get_bd_pins I/L] [get_bd_pins I_31_0/data_in]
  connect_bd_net -net Block_Mem_I_MSB_doutb [get_bd_pins Block_Mem_I_MSB/doutb] [get_bd_pins I/U] [get_bd_pins I_63_32/data_in]
  connect_bd_net -net Data_I_31_0_data_out1 [get_bd_pins Data_I_31_0/data_out1] [get_bd_pins I0_MAD/I]
  connect_bd_net -net Data_I_31_0_data_out2 [get_bd_pins data_out2] [get_bd_pins Data_I_31_0/data_out2] [get_bd_pins I1_MAD/I]
  connect_bd_net -net Data_I_63_32_data_out1 [get_bd_pins Data_I_63_32/data_out1] [get_bd_pins I2_MAD/I]
  connect_bd_net -net Data_I_63_32_data_out2 [get_bd_pins Data_I_63_32/data_out2] [get_bd_pins I3_MAD/I]
  connect_bd_net -net Data_I_data_out1 [get_bd_pins Data_I/data_out1] [get_bd_pins Data_I_31_0/data_in]
  connect_bd_net -net Data_I_data_out2 [get_bd_pins Data_I/data_out2] [get_bd_pins Data_I_63_32/data_in]
  connect_bd_net -net Data_Q_31_0_data_out1 [get_bd_pins Data_Q_31_0/data_out1] [get_bd_pins Q0_MAD/I]
  connect_bd_net -net Data_Q_31_0_data_out2 [get_bd_pins Data_Q_31_0/data_out2] [get_bd_pins Q1_MAD/I]
  connect_bd_net -net Data_Q_63_32_data_out1 [get_bd_pins Data_Q_63_32/data_out1] [get_bd_pins Q2_MAD/I]
  connect_bd_net -net Data_Q_63_32_data_out2 [get_bd_pins Data_Q_63_32/data_out2] [get_bd_pins Q3_MAD/I]
  connect_bd_net -net Data_Q_data_out1 [get_bd_pins Data_Q/data_out1] [get_bd_pins Data_Q_31_0/data_in]
  connect_bd_net -net Data_Q_data_out2 [get_bd_pins Data_Q/data_out2] [get_bd_pins Data_Q_63_32/data_in]
  connect_bd_net -net Din_1 [get_bd_pins Din] [get_bd_pins xlslice_0/Din] [get_bd_pins xlslice_1/Din] [get_bd_pins xlslice_2/Din]
  connect_bd_net -net I0_MAD_Iavg1 [get_bd_pins I0_MAD/Iavg1] [get_bd_pins param_mux_I0/data1]
  connect_bd_net -net I0_MAD_trigger_out [get_bd_pins trigger_out] [get_bd_pins I0_MAD/trigger_out]
  connect_bd_net -net I1_MAD_I1 [get_bd_pins I1] [get_bd_pins I1_MAD/I1]
  connect_bd_net -net I1_MAD_Iavg1 [get_bd_pins Iavg1] [get_bd_pins I1_MAD/Iavg1] [get_bd_pins param_mux_I1/data1]
  connect_bd_net -net I2_MAD_Iavg1 [get_bd_pins I2_MAD/Iavg1] [get_bd_pins param_mux_I2/data1]
  connect_bd_net -net I3_MAD_Iavg1 [get_bd_pins I3_MAD/Iavg1] [get_bd_pins param_mux_I3/data1]
  connect_bd_net -net I_31_0_data_out1 [get_bd_pins I_31_0/data_out1] [get_bd_pins param_mux_I0/data2]
  connect_bd_net -net I_31_0_data_out2 [get_bd_pins I_31_0/data_out2] [get_bd_pins param_mux_I1/data2]
  connect_bd_net -net I_63_32_data_out1 [get_bd_pins I_63_32/data_out1] [get_bd_pins param_mux_I2/data2]
  connect_bd_net -net I_63_32_data_out2 [get_bd_pins I_63_32/data_out2] [get_bd_pins param_mux_I3/data2]
  connect_bd_net -net I_Data_out [get_bd_pins I/Data_out] [get_bd_pins gaussian_gen1_0/data_I]
  connect_bd_net -net M_1 [get_bd_pins M] [get_bd_pins arbitary_wave_gen_0/M] [get_bd_pins gaussian_gen1_0/M]
  connect_bd_net -net Q0_MAD_Iavg1 [get_bd_pins Q0_MAD/Iavg1] [get_bd_pins param_mux_Q0/data1]
  connect_bd_net -net Q1_MAD_Iavg1 [get_bd_pins Q1_MAD/Iavg1] [get_bd_pins param_mux_Q1/data1]
  connect_bd_net -net Q2_MAD_Iavg1 [get_bd_pins Q2_MAD/Iavg1] [get_bd_pins param_mux_Q2/data1]
  connect_bd_net -net Q3_MAD_Iavg1 [get_bd_pins Q3_MAD/Iavg1] [get_bd_pins param_mux_Q3/data1]
  connect_bd_net -net Q_31_0_data_out1 [get_bd_pins Q_31_0/data_out1] [get_bd_pins param_mux_Q1/data2]
  connect_bd_net -net Q_31_0_data_out2 [get_bd_pins Q_31_0/data_out2] [get_bd_pins param_mux_Q0/data2]
  connect_bd_net -net Q_63_32_data_out1 [get_bd_pins Q_63_32/data_out1] [get_bd_pins param_mux_Q3/data2]
  connect_bd_net -net Q_63_32_data_out2 [get_bd_pins Q_63_32/data_out2] [get_bd_pins param_mux_Q2/data2]
  connect_bd_net -net Q_Data_out [get_bd_pins Q/Data_out] [get_bd_pins gaussian_gen1_0/data_Q]
  connect_bd_net -net addrb_1 [get_bd_pins bram_addr_out] [get_bd_pins Address_Gen/data_out] [get_bd_pins Block_Mem_I_LSB/addrb] [get_bd_pins Block_Mem_I_MSB/addrb] [get_bd_pins Block_Mem_Q_LSB/addrb] [get_bd_pins Block_Mem_Q_MSB/addrb]
  connect_bd_net -net arbitary_wave_gen_0_address [get_bd_pins address] [get_bd_pins Address_Gen/data2] [get_bd_pins arbitary_wave_gen_0/address]
  connect_bd_net -net b_1 [get_bd_pins b] [get_bd_pins mux_0/b]
  connect_bd_net -net clk_1 [get_bd_pins clk] [get_bd_pins Block_Mem_I_LSB/clkb] [get_bd_pins Block_Mem_I_LSB/s_axi_aclk] [get_bd_pins Block_Mem_I_MSB/clkb] [get_bd_pins Block_Mem_I_MSB/s_axi_aclk] [get_bd_pins Block_Mem_Q_LSB/clkb] [get_bd_pins Block_Mem_Q_LSB/s_axi_aclk] [get_bd_pins Block_Mem_Q_MSB/clkb] [get_bd_pins Block_Mem_Q_MSB/s_axi_aclk] [get_bd_pins I0_MAD/clk] [get_bd_pins I1_MAD/clk] [get_bd_pins I2_MAD/clk] [get_bd_pins I3_MAD/clk] [get_bd_pins Q0_MAD/clk] [get_bd_pins Q1_MAD/clk] [get_bd_pins Q2_MAD/clk] [get_bd_pins Q3_MAD/clk] [get_bd_pins arbitary_wave_gen_0/clk] [get_bd_pins flip_flop_0/clk] [get_bd_pins gaussian_gen1_0/clk]
  connect_bd_net -net coeff_value_1 [get_bd_pins out1] [get_bd_pins I0_MAD/coeff_value] [get_bd_pins I1_MAD/coeff_value] [get_bd_pins I2_MAD/coeff_value] [get_bd_pins I3_MAD/coeff_value] [get_bd_pins Q0_MAD/coeff_value] [get_bd_pins Q1_MAD/coeff_value] [get_bd_pins Q2_MAD/coeff_value] [get_bd_pins Q3_MAD/coeff_value] [get_bd_pins mux_0/out1]
  connect_bd_net -net data_in1_1 [get_bd_pins Block_Mem_Q_LSB/doutb] [get_bd_pins Q/L] [get_bd_pins Q_31_0/data_in]
  connect_bd_net -net data_in_1 [get_bd_pins Block_Mem_Q_MSB/doutb] [get_bd_pins Q/U] [get_bd_pins Q_63_32/data_in]
  connect_bd_net -net den1_1 [get_bd_pins I0_MAD/den1] [get_bd_pins I1_MAD/den1] [get_bd_pins I2_MAD/den1] [get_bd_pins I3_MAD/den1] [get_bd_pins Q0_MAD/den1] [get_bd_pins Q1_MAD/den1] [get_bd_pins Q2_MAD/den1] [get_bd_pins Q3_MAD/den1] [get_bd_pins xlconstant_3/dout]
  connect_bd_net -net flip_flop_0_D_out [get_bd_pins D_out] [get_bd_pins flip_flop_0/D_out]
  connect_bd_net -net gaussian_gen1_0_address0 [get_bd_pins address0] [get_bd_pins Address_Gen/data1] [get_bd_pins gaussian_gen1_0/address0]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins amp_increment] [get_bd_pins gaussian_gen1_0/amp_increment] [get_bd_pins mux_0/a]
  connect_bd_net -net gaussian_gen1_0_data_out_I [get_bd_pins data_out_I] [get_bd_pins Data_I/data_in] [get_bd_pins gaussian_gen1_0/data_out_I]
  connect_bd_net -net gaussian_gen1_0_data_out_Q [get_bd_pins data_out_Q] [get_bd_pins Data_Q/data_in] [get_bd_pins gaussian_gen1_0/data_out_Q]
  connect_bd_net -net gaussian_gen1_0_half_reg [get_bd_pins half_reg] [get_bd_pins I0_MAD/half_in] [get_bd_pins I1_MAD/half_in] [get_bd_pins I2_MAD/half_in] [get_bd_pins I3_MAD/half_in] [get_bd_pins Q0_MAD/half_in] [get_bd_pins Q1_MAD/half_in] [get_bd_pins Q2_MAD/half_in] [get_bd_pins Q3_MAD/half_in] [get_bd_pins gaussian_gen1_0/half_reg]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins mode_out] [get_bd_pins I0_MAD/mode_in] [get_bd_pins I1_MAD/mode_in] [get_bd_pins I2_MAD/mode_in] [get_bd_pins I3_MAD/mode_in] [get_bd_pins Q0_MAD/mode_in] [get_bd_pins Q1_MAD/mode_in] [get_bd_pins Q2_MAD/mode_in] [get_bd_pins Q3_MAD/mode_in] [get_bd_pins gaussian_gen1_0/mode_out]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins trigger] [get_bd_pins I0_MAD/trigger_in] [get_bd_pins I1_MAD/trigger_in] [get_bd_pins I2_MAD/trigger_in] [get_bd_pins I3_MAD/trigger_in] [get_bd_pins Q0_MAD/trigger_in] [get_bd_pins Q1_MAD/trigger_in] [get_bd_pins Q2_MAD/trigger_in] [get_bd_pins Q3_MAD/trigger_in] [get_bd_pins gaussian_gen1_0/trigger]
  connect_bd_net -net in_valid_1 [get_bd_pins I0_MAD/in_valid] [get_bd_pins I1_MAD/in_valid] [get_bd_pins I2_MAD/in_valid] [get_bd_pins I3_MAD/in_valid] [get_bd_pins Q0_MAD/in_valid] [get_bd_pins Q1_MAD/in_valid] [get_bd_pins Q2_MAD/in_valid] [get_bd_pins Q3_MAD/in_valid] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net ini_amp_del_1 [get_bd_pins ini_amp_del] [get_bd_pins gaussian_gen1_0/ini_amp_del]
  connect_bd_net -net ite_per_mes_1 [get_bd_pins ite_per_mes] [get_bd_pins gaussian_gen1_0/ite_per_mes]
  connect_bd_net -net ite_tot_1 [get_bd_pins ite_tot] [get_bd_pins gaussian_gen1_0/ite_tot]
  connect_bd_net -net merger1_0_Dout [get_bd_pins flip_flop_0/D_in] [get_bd_pins merger1_0/Dout]
  connect_bd_net -net mode_1 [get_bd_pins mode] [get_bd_pins gaussian_gen1_0/mode]
  connect_bd_net -net off_time1_1 [get_bd_pins off_time1] [get_bd_pins gaussian_gen1_0/off_time1]
  connect_bd_net -net param_mux_I0_data_out [get_bd_pins merger1_0/DI0] [get_bd_pins param_mux_I0/data_out]
  connect_bd_net -net param_mux_I1_data_out [get_bd_pins data_out] [get_bd_pins merger1_0/DI1] [get_bd_pins param_mux_I1/data_out]
  connect_bd_net -net param_mux_I2_data_out [get_bd_pins merger1_0/DI2] [get_bd_pins param_mux_I2/data_out]
  connect_bd_net -net param_mux_I3_data_out [get_bd_pins merger1_0/DI3] [get_bd_pins param_mux_I3/data_out]
  connect_bd_net -net param_mux_Q0_data_out [get_bd_pins merger1_0/DQ0] [get_bd_pins param_mux_Q0/data_out]
  connect_bd_net -net param_mux_Q1_data_out [get_bd_pins merger1_0/DQ1] [get_bd_pins param_mux_Q1/data_out]
  connect_bd_net -net param_mux_Q2_data_out [get_bd_pins merger1_0/DQ2] [get_bd_pins param_mux_Q2/data_out]
  connect_bd_net -net param_mux_Q3_data_out [get_bd_pins merger1_0/DQ3] [get_bd_pins param_mux_Q3/data_out]
  connect_bd_net -net rst_1 [get_bd_pins rst] [get_bd_pins gaussian_gen1_0/rst]
  connect_bd_net -net rst_2 [get_bd_pins I0_MAD/rst] [get_bd_pins I1_MAD/rst] [get_bd_pins I2_MAD/rst] [get_bd_pins I3_MAD/rst] [get_bd_pins Q0_MAD/rst] [get_bd_pins Q1_MAD/rst] [get_bd_pins Q2_MAD/rst] [get_bd_pins Q3_MAD/rst] [get_bd_pins arbitary_wave_gen_0/rst] [get_bd_pins xlconstant_1/dout]
  connect_bd_net -net s_axi_aresetn_1 [get_bd_pins s_axi_aresetn] [get_bd_pins Block_Mem_I_LSB/s_axi_aresetn] [get_bd_pins Block_Mem_I_MSB/s_axi_aresetn] [get_bd_pins Block_Mem_Q_LSB/s_axi_aresetn] [get_bd_pins Block_Mem_Q_MSB/s_axi_aresetn]
  connect_bd_net -net sel_1 [get_bd_pins sel] [get_bd_pins Address_Gen/sel] [get_bd_pins param_mux_I0/sel] [get_bd_pins param_mux_I1/sel] [get_bd_pins param_mux_I2/sel] [get_bd_pins param_mux_I3/sel] [get_bd_pins param_mux_Q0/sel] [get_bd_pins param_mux_Q1/sel] [get_bd_pins param_mux_Q2/sel] [get_bd_pins param_mux_Q3/sel]
  connect_bd_net -net sleep_time_1 [get_bd_pins sleep_time] [get_bd_pins gaussian_gen1_0/sleep_time]
  connect_bd_net -net step_size_1 [get_bd_pins step_size] [get_bd_pins gaussian_gen1_0/step_size]
  connect_bd_net -net time_bwn_pulses_1 [get_bd_pins time_bwn_pulses] [get_bd_pins gaussian_gen1_0/time_bwn_pulses]
  connect_bd_net -net trigger_time_1 [get_bd_pins trigger_time] [get_bd_pins gaussian_gen1_0/trigger_time]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins Dout1] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net xlslice_1_Dout [get_bd_pins gaussian_gen1_0/continuous] [get_bd_pins xlslice_1/Dout]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins gaussian_gen1_0/amp_inc] [get_bd_pins mux_0/sel] [get_bd_pins xlslice_2/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: DAC_02_trigger
proc create_hier_cell_DAC_02_trigger { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_DAC_02_trigger() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir O -from 63 -to 0 D_out
  create_bd_pin -dir I -from 15 -to 0 I2
  create_bd_pin -dir I -type clk clk

  # Create instance: flip_flop_2, and set properties
  set block_name flip_flop
  set block_cell_name flip_flop_2
  if { [catch {set flip_flop_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $flip_flop_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $flip_flop_2

  # Create instance: merger_0, and set properties
  set block_name merger
  set block_cell_name merger_0
  if { [catch {set merger_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N1 {16} \
 ] $merger_0

  # Create port connections
  connect_bd_net -net I2_1 [get_bd_pins I2] [get_bd_pins merger_0/I1] [get_bd_pins merger_0/I2] [get_bd_pins merger_0/I3] [get_bd_pins merger_0/I4]
  connect_bd_net -net clk_1 [get_bd_pins clk] [get_bd_pins flip_flop_2/clk]
  connect_bd_net -net flip_flop_2_D_out [get_bd_pins D_out] [get_bd_pins flip_flop_2/D_out]
  connect_bd_net -net merger_0_y [get_bd_pins flip_flop_2/D_in] [get_bd_pins merger_0/y]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: DAC_02_12
proc create_hier_cell_DAC_02_12 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_DAC_02_12() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI1

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI2

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI3


  # Create pins
  create_bd_pin -dir O -from 127 -to 0 D_out
  create_bd_pin -dir I -from 2 -to 0 Din
  create_bd_pin -dir O -from 0 -to 0 Dout1
  create_bd_pin -dir I -from 31 -to 0 M
  create_bd_pin -dir O -from 12 -to 0 address0
  create_bd_pin -dir I -from 15 -to 0 b
  create_bd_pin -dir O -from 12 -to 0 bram_addr_out
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 31 -to 0 ini_amp_del
  create_bd_pin -dir I -from 31 -to 0 ite_per_mes
  create_bd_pin -dir I -from 31 -to 0 ite_tot
  create_bd_pin -dir I -from 1 -to 0 mode
  create_bd_pin -dir I -from 31 -to 0 off_time1
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -type rst s_axi_aresetn
  create_bd_pin -dir I sel
  create_bd_pin -dir I -from 31 -to 0 sleep_time
  create_bd_pin -dir I -from 31 -to 0 step_size
  create_bd_pin -dir I -from 31 -to 0 time_bwn_pulses
  create_bd_pin -dir O -from 15 -to 0 trigger_out
  create_bd_pin -dir I -from 31 -to 0 trigger_time

  # Create instance: Address_Gen, and set properties
  set block_name param_mux
  set block_cell_name Address_Gen
  if { [catch {set Address_Gen [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Address_Gen eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $Address_Gen

  # Create instance: Block_Mem_I_LSB
  create_hier_cell_Block_Mem_I_LSB_2 $hier_obj Block_Mem_I_LSB

  # Create instance: Block_Mem_I_MSB
  create_hier_cell_Block_Mem_I_MSB_2 $hier_obj Block_Mem_I_MSB

  # Create instance: Block_Mem_Q_LSB
  create_hier_cell_Block_Mem_Q_LSB_2 $hier_obj Block_Mem_Q_LSB

  # Create instance: Block_Mem_Q_MSB
  create_hier_cell_Block_Mem_Q_MSB_2 $hier_obj Block_Mem_Q_MSB

  # Create instance: Data_I, and set properties
  set block_name data_split
  set block_cell_name Data_I
  if { [catch {set Data_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {31} \
   CONFIG.N {64} \
 ] $Data_I

  # Create instance: Data_I_31_0, and set properties
  set block_name data_split
  set block_cell_name Data_I_31_0
  if { [catch {set Data_I_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_I_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Data_I_63_32, and set properties
  set block_name data_split
  set block_cell_name Data_I_63_32
  if { [catch {set Data_I_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_I_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Data_Q, and set properties
  set block_name data_split
  set block_cell_name Data_Q
  if { [catch {set Data_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {31} \
   CONFIG.N {64} \
 ] $Data_Q

  # Create instance: Data_Q_31_0, and set properties
  set block_name data_split
  set block_cell_name Data_Q_31_0
  if { [catch {set Data_Q_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_Q_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Data_Q_63_32, and set properties
  set block_name data_split
  set block_cell_name Data_Q_63_32
  if { [catch {set Data_Q_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_Q_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: I, and set properties
  set block_name merger_2
  set block_cell_name I
  if { [catch {set I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: I0_MAD
  create_hier_cell_I0_MAD_2 $hier_obj I0_MAD

  # Create instance: I1_MAD
  create_hier_cell_I1_MAD_2 $hier_obj I1_MAD

  # Create instance: I2_MAD
  create_hier_cell_I2_MAD_2 $hier_obj I2_MAD

  # Create instance: I3_MAD
  create_hier_cell_I3_MAD_2 $hier_obj I3_MAD

  # Create instance: I_31_0, and set properties
  set block_name data_split
  set block_cell_name I_31_0
  if { [catch {set I_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $I_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $I_31_0

  # Create instance: I_63_32, and set properties
  set block_name data_split
  set block_cell_name I_63_32
  if { [catch {set I_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $I_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $I_63_32

  # Create instance: Q, and set properties
  set block_name merger_2
  set block_cell_name Q
  if { [catch {set Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Q0_MAD
  create_hier_cell_Q0_MAD_2 $hier_obj Q0_MAD

  # Create instance: Q1_MAD
  create_hier_cell_Q1_MAD_2 $hier_obj Q1_MAD

  # Create instance: Q2_MAD
  create_hier_cell_Q2_MAD_2 $hier_obj Q2_MAD

  # Create instance: Q3_MAD
  create_hier_cell_Q3_MAD_2 $hier_obj Q3_MAD

  # Create instance: Q_31_0, and set properties
  set block_name data_split
  set block_cell_name Q_31_0
  if { [catch {set Q_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Q_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $Q_31_0

  # Create instance: Q_63_32, and set properties
  set block_name data_split
  set block_cell_name Q_63_32
  if { [catch {set Q_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Q_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $Q_63_32

  # Create instance: arbitary_wave_gen_0, and set properties
  set block_name arbitary_wave_gen
  set block_cell_name arbitary_wave_gen_0
  if { [catch {set arbitary_wave_gen_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $arbitary_wave_gen_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $arbitary_wave_gen_0

  # Create instance: flip_flop_0, and set properties
  set block_name flip_flop
  set block_cell_name flip_flop_0
  if { [catch {set flip_flop_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $flip_flop_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {128} \
 ] $flip_flop_0

  # Create instance: gaussian_gen1_0, and set properties
  set block_name gaussian_gen1
  set block_cell_name gaussian_gen1_0
  if { [catch {set gaussian_gen1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $gaussian_gen1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.add_bits {13} \
 ] $gaussian_gen1_0

  # Create instance: merger1_0, and set properties
  set block_name merger1
  set block_cell_name merger1_0
  if { [catch {set merger1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: mux_0, and set properties
  set block_name mux
  set block_cell_name mux_0
  if { [catch {set mux_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mux_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: param_mux_I0, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I0
  if { [catch {set param_mux_I0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I0

  # Create instance: param_mux_I1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I1
  if { [catch {set param_mux_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I1

  # Create instance: param_mux_I2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I2
  if { [catch {set param_mux_I2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I2

  # Create instance: param_mux_I3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I3
  if { [catch {set param_mux_I3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I3

  # Create instance: param_mux_Q0, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q0
  if { [catch {set param_mux_Q0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q0

  # Create instance: param_mux_Q1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q1
  if { [catch {set param_mux_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q1

  # Create instance: param_mux_Q2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q2
  if { [catch {set param_mux_Q2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q2

  # Create instance: param_mux_Q3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q3
  if { [catch {set param_mux_Q3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q3

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $xlconstant_1

  # Create instance: xlconstant_3, and set properties
  set xlconstant_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_3 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {32767} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_3

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {0} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {3} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_0

  # Create instance: xlslice_1, and set properties
  set xlslice_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_1 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {3} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_1

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {2} \
   CONFIG.DIN_TO {2} \
   CONFIG.DIN_WIDTH {3} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_2

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins S_AXI] [get_bd_intf_pins Block_Mem_I_LSB/S_AXI]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins S_AXI1] [get_bd_intf_pins Block_Mem_I_MSB/S_AXI]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins S_AXI2] [get_bd_intf_pins Block_Mem_Q_LSB/S_AXI]
  connect_bd_intf_net -intf_net Conn4 [get_bd_intf_pins S_AXI3] [get_bd_intf_pins Block_Mem_Q_MSB/S_AXI]

  # Create port connections
  connect_bd_net -net Block_Mem_I_LSB_doutb [get_bd_pins Block_Mem_I_LSB/doutb] [get_bd_pins I/L] [get_bd_pins I_31_0/data_in]
  connect_bd_net -net Block_Mem_I_MSB_doutb [get_bd_pins Block_Mem_I_MSB/doutb] [get_bd_pins I/U] [get_bd_pins I_63_32/data_in]
  connect_bd_net -net Data_I_31_0_data_out1 [get_bd_pins Data_I_31_0/data_out1] [get_bd_pins I0_MAD/I]
  connect_bd_net -net Data_I_31_0_data_out2 [get_bd_pins Data_I_31_0/data_out2] [get_bd_pins I1_MAD/I]
  connect_bd_net -net Data_I_63_32_data_out1 [get_bd_pins Data_I_63_32/data_out1] [get_bd_pins I2_MAD/I]
  connect_bd_net -net Data_I_63_32_data_out2 [get_bd_pins Data_I_63_32/data_out2] [get_bd_pins I3_MAD/I]
  connect_bd_net -net Data_I_data_out1 [get_bd_pins Data_I/data_out1] [get_bd_pins Data_I_31_0/data_in]
  connect_bd_net -net Data_I_data_out2 [get_bd_pins Data_I/data_out2] [get_bd_pins Data_I_63_32/data_in]
  connect_bd_net -net Data_Q_31_0_data_out1 [get_bd_pins Data_Q_31_0/data_out1] [get_bd_pins Q0_MAD/I]
  connect_bd_net -net Data_Q_31_0_data_out2 [get_bd_pins Data_Q_31_0/data_out2] [get_bd_pins Q1_MAD/I]
  connect_bd_net -net Data_Q_63_32_data_out1 [get_bd_pins Data_Q_63_32/data_out1] [get_bd_pins Q2_MAD/I]
  connect_bd_net -net Data_Q_63_32_data_out2 [get_bd_pins Data_Q_63_32/data_out2] [get_bd_pins Q3_MAD/I]
  connect_bd_net -net Data_Q_data_out1 [get_bd_pins Data_Q/data_out1] [get_bd_pins Data_Q_31_0/data_in]
  connect_bd_net -net Data_Q_data_out2 [get_bd_pins Data_Q/data_out2] [get_bd_pins Data_Q_63_32/data_in]
  connect_bd_net -net Din_1 [get_bd_pins Din] [get_bd_pins xlslice_0/Din] [get_bd_pins xlslice_1/Din] [get_bd_pins xlslice_2/Din]
  connect_bd_net -net I0_MAD_Iavg1 [get_bd_pins I0_MAD/Iavg1] [get_bd_pins param_mux_I0/data1]
  connect_bd_net -net I0_MAD_trigger_out [get_bd_pins trigger_out] [get_bd_pins I0_MAD/trigger_out]
  connect_bd_net -net I1_MAD_Iavg1 [get_bd_pins I1_MAD/Iavg1] [get_bd_pins param_mux_I1/data1]
  connect_bd_net -net I2_MAD_Iavg1 [get_bd_pins I2_MAD/Iavg1] [get_bd_pins param_mux_I2/data1]
  connect_bd_net -net I3_MAD_Iavg1 [get_bd_pins I3_MAD/Iavg1] [get_bd_pins param_mux_I3/data1]
  connect_bd_net -net I_31_0_data_out1 [get_bd_pins I_31_0/data_out1] [get_bd_pins param_mux_I0/data2]
  connect_bd_net -net I_31_0_data_out2 [get_bd_pins I_31_0/data_out2] [get_bd_pins param_mux_I1/data2]
  connect_bd_net -net I_63_32_data_out1 [get_bd_pins I_63_32/data_out1] [get_bd_pins param_mux_I2/data2]
  connect_bd_net -net I_63_32_data_out2 [get_bd_pins I_63_32/data_out2] [get_bd_pins param_mux_I3/data2]
  connect_bd_net -net I_Data_out [get_bd_pins I/Data_out] [get_bd_pins gaussian_gen1_0/data_I]
  connect_bd_net -net M_1 [get_bd_pins M] [get_bd_pins arbitary_wave_gen_0/M] [get_bd_pins gaussian_gen1_0/M]
  connect_bd_net -net Q0_MAD_Iavg1 [get_bd_pins Q0_MAD/Iavg1] [get_bd_pins param_mux_Q0/data1]
  connect_bd_net -net Q1_MAD_Iavg1 [get_bd_pins Q1_MAD/Iavg1] [get_bd_pins param_mux_Q1/data1]
  connect_bd_net -net Q2_MAD_Iavg1 [get_bd_pins Q2_MAD/Iavg1] [get_bd_pins param_mux_Q2/data1]
  connect_bd_net -net Q3_MAD_Iavg1 [get_bd_pins Q3_MAD/Iavg1] [get_bd_pins param_mux_Q3/data1]
  connect_bd_net -net Q_31_0_data_out1 [get_bd_pins Q_31_0/data_out1] [get_bd_pins param_mux_Q1/data2]
  connect_bd_net -net Q_31_0_data_out2 [get_bd_pins Q_31_0/data_out2] [get_bd_pins param_mux_Q0/data2]
  connect_bd_net -net Q_63_32_data_out1 [get_bd_pins Q_63_32/data_out1] [get_bd_pins param_mux_Q3/data2]
  connect_bd_net -net Q_63_32_data_out2 [get_bd_pins Q_63_32/data_out2] [get_bd_pins param_mux_Q2/data2]
  connect_bd_net -net Q_Data_out [get_bd_pins Q/Data_out] [get_bd_pins gaussian_gen1_0/data_Q]
  connect_bd_net -net addrb_1 [get_bd_pins bram_addr_out] [get_bd_pins Address_Gen/data_out] [get_bd_pins Block_Mem_I_LSB/addrb] [get_bd_pins Block_Mem_I_MSB/addrb] [get_bd_pins Block_Mem_Q_LSB/addrb] [get_bd_pins Block_Mem_Q_MSB/addrb]
  connect_bd_net -net arbitary_wave_gen_0_address [get_bd_pins Address_Gen/data2] [get_bd_pins arbitary_wave_gen_0/address]
  connect_bd_net -net b_1 [get_bd_pins b] [get_bd_pins mux_0/b]
  connect_bd_net -net clk_1 [get_bd_pins clk] [get_bd_pins Block_Mem_I_LSB/clkb] [get_bd_pins Block_Mem_I_LSB/s_axi_aclk] [get_bd_pins Block_Mem_I_MSB/clkb] [get_bd_pins Block_Mem_I_MSB/s_axi_aclk] [get_bd_pins Block_Mem_Q_LSB/clkb] [get_bd_pins Block_Mem_Q_LSB/s_axi_aclk] [get_bd_pins Block_Mem_Q_MSB/clkb] [get_bd_pins Block_Mem_Q_MSB/s_axi_aclk] [get_bd_pins I0_MAD/clk] [get_bd_pins I1_MAD/clk] [get_bd_pins I2_MAD/clk] [get_bd_pins I3_MAD/clk] [get_bd_pins Q0_MAD/clk] [get_bd_pins Q1_MAD/clk] [get_bd_pins Q2_MAD/clk] [get_bd_pins Q3_MAD/clk] [get_bd_pins arbitary_wave_gen_0/clk] [get_bd_pins flip_flop_0/clk] [get_bd_pins gaussian_gen1_0/clk]
  connect_bd_net -net coeff_value_1 [get_bd_pins I0_MAD/coeff_value] [get_bd_pins I1_MAD/coeff_value] [get_bd_pins I2_MAD/coeff_value] [get_bd_pins I3_MAD/coeff_value] [get_bd_pins Q0_MAD/coeff_value] [get_bd_pins Q1_MAD/coeff_value] [get_bd_pins Q2_MAD/coeff_value] [get_bd_pins Q3_MAD/coeff_value] [get_bd_pins mux_0/out1]
  connect_bd_net -net data_in1_1 [get_bd_pins Block_Mem_Q_LSB/doutb] [get_bd_pins Q/L] [get_bd_pins Q_31_0/data_in]
  connect_bd_net -net data_in_1 [get_bd_pins Block_Mem_Q_MSB/doutb] [get_bd_pins Q/U] [get_bd_pins Q_63_32/data_in]
  connect_bd_net -net den1_1 [get_bd_pins I0_MAD/den1] [get_bd_pins I1_MAD/den1] [get_bd_pins I2_MAD/den1] [get_bd_pins I3_MAD/den1] [get_bd_pins Q0_MAD/den1] [get_bd_pins Q1_MAD/den1] [get_bd_pins Q2_MAD/den1] [get_bd_pins Q3_MAD/den1] [get_bd_pins xlconstant_3/dout]
  connect_bd_net -net flip_flop_0_D_out [get_bd_pins D_out] [get_bd_pins flip_flop_0/D_out]
  connect_bd_net -net gaussian_gen1_0_address0 [get_bd_pins address0] [get_bd_pins Address_Gen/data1] [get_bd_pins gaussian_gen1_0/address0]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins gaussian_gen1_0/amp_increment] [get_bd_pins mux_0/a]
  connect_bd_net -net gaussian_gen1_0_data_out_I [get_bd_pins Data_I/data_in] [get_bd_pins gaussian_gen1_0/data_out_I]
  connect_bd_net -net gaussian_gen1_0_data_out_Q [get_bd_pins Data_Q/data_in] [get_bd_pins gaussian_gen1_0/data_out_Q]
  connect_bd_net -net gaussian_gen1_0_half_reg [get_bd_pins I0_MAD/half_in] [get_bd_pins I1_MAD/half_in] [get_bd_pins I2_MAD/half_in] [get_bd_pins I3_MAD/half_in] [get_bd_pins Q0_MAD/half_in] [get_bd_pins Q1_MAD/half_in] [get_bd_pins Q2_MAD/half_in] [get_bd_pins Q3_MAD/half_in] [get_bd_pins gaussian_gen1_0/half_reg]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins I0_MAD/mode_in] [get_bd_pins I1_MAD/mode_in] [get_bd_pins I2_MAD/mode_in] [get_bd_pins I3_MAD/mode_in] [get_bd_pins Q0_MAD/mode_in] [get_bd_pins Q1_MAD/mode_in] [get_bd_pins Q2_MAD/mode_in] [get_bd_pins Q3_MAD/mode_in] [get_bd_pins gaussian_gen1_0/mode_out]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins I0_MAD/trigger_in] [get_bd_pins I1_MAD/trigger_in] [get_bd_pins I2_MAD/trigger_in] [get_bd_pins I3_MAD/trigger_in] [get_bd_pins Q0_MAD/trigger_in] [get_bd_pins Q1_MAD/trigger_in] [get_bd_pins Q2_MAD/trigger_in] [get_bd_pins Q3_MAD/trigger_in] [get_bd_pins gaussian_gen1_0/trigger]
  connect_bd_net -net in_valid_1 [get_bd_pins I0_MAD/in_valid] [get_bd_pins I1_MAD/in_valid] [get_bd_pins I2_MAD/in_valid] [get_bd_pins I3_MAD/in_valid] [get_bd_pins Q0_MAD/in_valid] [get_bd_pins Q1_MAD/in_valid] [get_bd_pins Q2_MAD/in_valid] [get_bd_pins Q3_MAD/in_valid] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net ini_amp_del_1 [get_bd_pins ini_amp_del] [get_bd_pins gaussian_gen1_0/ini_amp_del]
  connect_bd_net -net ite_per_mes_1 [get_bd_pins ite_per_mes] [get_bd_pins gaussian_gen1_0/ite_per_mes]
  connect_bd_net -net ite_tot_1 [get_bd_pins ite_tot] [get_bd_pins gaussian_gen1_0/ite_tot]
  connect_bd_net -net merger1_0_Dout [get_bd_pins flip_flop_0/D_in] [get_bd_pins merger1_0/Dout]
  connect_bd_net -net mode_1 [get_bd_pins mode] [get_bd_pins gaussian_gen1_0/mode]
  connect_bd_net -net off_time1_1 [get_bd_pins off_time1] [get_bd_pins gaussian_gen1_0/off_time1]
  connect_bd_net -net param_mux_I0_data_out [get_bd_pins merger1_0/DI0] [get_bd_pins param_mux_I0/data_out]
  connect_bd_net -net param_mux_I1_data_out [get_bd_pins merger1_0/DI1] [get_bd_pins param_mux_I1/data_out]
  connect_bd_net -net param_mux_I2_data_out [get_bd_pins merger1_0/DI2] [get_bd_pins param_mux_I2/data_out]
  connect_bd_net -net param_mux_I3_data_out [get_bd_pins merger1_0/DI3] [get_bd_pins param_mux_I3/data_out]
  connect_bd_net -net param_mux_Q0_data_out [get_bd_pins merger1_0/DQ0] [get_bd_pins param_mux_Q0/data_out]
  connect_bd_net -net param_mux_Q1_data_out [get_bd_pins merger1_0/DQ1] [get_bd_pins param_mux_Q1/data_out]
  connect_bd_net -net param_mux_Q2_data_out [get_bd_pins merger1_0/DQ2] [get_bd_pins param_mux_Q2/data_out]
  connect_bd_net -net param_mux_Q3_data_out [get_bd_pins merger1_0/DQ3] [get_bd_pins param_mux_Q3/data_out]
  connect_bd_net -net rst_1 [get_bd_pins rst] [get_bd_pins gaussian_gen1_0/rst]
  connect_bd_net -net rst_2 [get_bd_pins I0_MAD/rst] [get_bd_pins I1_MAD/rst] [get_bd_pins I2_MAD/rst] [get_bd_pins I3_MAD/rst] [get_bd_pins Q0_MAD/rst] [get_bd_pins Q1_MAD/rst] [get_bd_pins Q2_MAD/rst] [get_bd_pins Q3_MAD/rst] [get_bd_pins arbitary_wave_gen_0/rst] [get_bd_pins xlconstant_1/dout]
  connect_bd_net -net s_axi_aresetn_1 [get_bd_pins s_axi_aresetn] [get_bd_pins Block_Mem_I_LSB/s_axi_aresetn] [get_bd_pins Block_Mem_I_MSB/s_axi_aresetn] [get_bd_pins Block_Mem_Q_LSB/s_axi_aresetn] [get_bd_pins Block_Mem_Q_MSB/s_axi_aresetn]
  connect_bd_net -net sel_1 [get_bd_pins sel] [get_bd_pins Address_Gen/sel] [get_bd_pins param_mux_I0/sel] [get_bd_pins param_mux_I1/sel] [get_bd_pins param_mux_I2/sel] [get_bd_pins param_mux_I3/sel] [get_bd_pins param_mux_Q0/sel] [get_bd_pins param_mux_Q1/sel] [get_bd_pins param_mux_Q2/sel] [get_bd_pins param_mux_Q3/sel]
  connect_bd_net -net sleep_time_1 [get_bd_pins sleep_time] [get_bd_pins gaussian_gen1_0/sleep_time]
  connect_bd_net -net step_size_1 [get_bd_pins step_size] [get_bd_pins gaussian_gen1_0/step_size]
  connect_bd_net -net time_bwn_pulses_1 [get_bd_pins time_bwn_pulses] [get_bd_pins gaussian_gen1_0/time_bwn_pulses]
  connect_bd_net -net trigger_time_1 [get_bd_pins trigger_time] [get_bd_pins gaussian_gen1_0/trigger_time]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins Dout1] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net xlslice_1_Dout [get_bd_pins gaussian_gen1_0/continuous] [get_bd_pins xlslice_1/Dout]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins gaussian_gen1_0/amp_inc] [get_bd_pins mux_0/sel] [get_bd_pins xlslice_2/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: DAC_01_11
proc create_hier_cell_DAC_01_11 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_DAC_01_11() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI1

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI2

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI3


  # Create pins
  create_bd_pin -dir O -from 127 -to 0 D_out
  create_bd_pin -dir I -from 2 -to 0 Din
  create_bd_pin -dir O -from 0 -to 0 Dout1
  create_bd_pin -dir I -from 31 -to 0 M
  create_bd_pin -dir O -from 12 -to 0 address0
  create_bd_pin -dir I -from 15 -to 0 b
  create_bd_pin -dir O -from 12 -to 0 bram_addr_out
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 31 -to 0 ini_amp_del
  create_bd_pin -dir I -from 31 -to 0 ite_per_mes
  create_bd_pin -dir I -from 31 -to 0 ite_tot
  create_bd_pin -dir I -from 1 -to 0 mode
  create_bd_pin -dir I -from 31 -to 0 off_time1
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -type rst s_axi_aresetn
  create_bd_pin -dir I sel
  create_bd_pin -dir I -from 31 -to 0 sleep_time
  create_bd_pin -dir I -from 31 -to 0 step_size
  create_bd_pin -dir I -from 31 -to 0 time_bwn_pulses
  create_bd_pin -dir O -from 15 -to 0 trigger_out
  create_bd_pin -dir I -from 31 -to 0 trigger_time

  # Create instance: Address_Gen, and set properties
  set block_name param_mux
  set block_cell_name Address_Gen
  if { [catch {set Address_Gen [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Address_Gen eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $Address_Gen

  # Create instance: Block_Mem_I_LSB
  create_hier_cell_Block_Mem_I_LSB_1 $hier_obj Block_Mem_I_LSB

  # Create instance: Block_Mem_I_MSB
  create_hier_cell_Block_Mem_I_MSB_1 $hier_obj Block_Mem_I_MSB

  # Create instance: Block_Mem_Q_LSB
  create_hier_cell_Block_Mem_Q_LSB_1 $hier_obj Block_Mem_Q_LSB

  # Create instance: Block_Mem_Q_MSB
  create_hier_cell_Block_Mem_Q_MSB_1 $hier_obj Block_Mem_Q_MSB

  # Create instance: Data_I, and set properties
  set block_name data_split
  set block_cell_name Data_I
  if { [catch {set Data_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {31} \
   CONFIG.N {64} \
 ] $Data_I

  # Create instance: Data_I_31_0, and set properties
  set block_name data_split
  set block_cell_name Data_I_31_0
  if { [catch {set Data_I_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_I_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Data_I_63_32, and set properties
  set block_name data_split
  set block_cell_name Data_I_63_32
  if { [catch {set Data_I_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_I_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Data_Q, and set properties
  set block_name data_split
  set block_cell_name Data_Q
  if { [catch {set Data_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {31} \
   CONFIG.N {64} \
 ] $Data_Q

  # Create instance: Data_Q_31_0, and set properties
  set block_name data_split
  set block_cell_name Data_Q_31_0
  if { [catch {set Data_Q_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_Q_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Data_Q_63_32, and set properties
  set block_name data_split
  set block_cell_name Data_Q_63_32
  if { [catch {set Data_Q_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_Q_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: I, and set properties
  set block_name merger_2
  set block_cell_name I
  if { [catch {set I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: I0_MAD
  create_hier_cell_I0_MAD_1 $hier_obj I0_MAD

  # Create instance: I1_MAD
  create_hier_cell_I1_MAD_1 $hier_obj I1_MAD

  # Create instance: I2_MAD
  create_hier_cell_I2_MAD_1 $hier_obj I2_MAD

  # Create instance: I3_MAD
  create_hier_cell_I3_MAD_1 $hier_obj I3_MAD

  # Create instance: I_31_0, and set properties
  set block_name data_split
  set block_cell_name I_31_0
  if { [catch {set I_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $I_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $I_31_0

  # Create instance: I_63_32, and set properties
  set block_name data_split
  set block_cell_name I_63_32
  if { [catch {set I_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $I_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $I_63_32

  # Create instance: Q, and set properties
  set block_name merger_2
  set block_cell_name Q
  if { [catch {set Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Q0_MAD
  create_hier_cell_Q0_MAD_1 $hier_obj Q0_MAD

  # Create instance: Q1_MAD
  create_hier_cell_Q1_MAD_1 $hier_obj Q1_MAD

  # Create instance: Q2_MAD
  create_hier_cell_Q2_MAD_1 $hier_obj Q2_MAD

  # Create instance: Q3_MAD
  create_hier_cell_Q3_MAD_1 $hier_obj Q3_MAD

  # Create instance: Q_31_0, and set properties
  set block_name data_split
  set block_cell_name Q_31_0
  if { [catch {set Q_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Q_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $Q_31_0

  # Create instance: Q_63_32, and set properties
  set block_name data_split
  set block_cell_name Q_63_32
  if { [catch {set Q_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Q_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $Q_63_32

  # Create instance: arbitary_wave_gen_0, and set properties
  set block_name arbitary_wave_gen
  set block_cell_name arbitary_wave_gen_0
  if { [catch {set arbitary_wave_gen_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $arbitary_wave_gen_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $arbitary_wave_gen_0

  # Create instance: flip_flop_0, and set properties
  set block_name flip_flop
  set block_cell_name flip_flop_0
  if { [catch {set flip_flop_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $flip_flop_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {128} \
 ] $flip_flop_0

  # Create instance: gaussian_gen1_0, and set properties
  set block_name gaussian_gen1
  set block_cell_name gaussian_gen1_0
  if { [catch {set gaussian_gen1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $gaussian_gen1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.add_bits {13} \
 ] $gaussian_gen1_0

  # Create instance: merger1_0, and set properties
  set block_name merger1
  set block_cell_name merger1_0
  if { [catch {set merger1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: mux_0, and set properties
  set block_name mux
  set block_cell_name mux_0
  if { [catch {set mux_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mux_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: param_mux_I0, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I0
  if { [catch {set param_mux_I0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I0

  # Create instance: param_mux_I1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I1
  if { [catch {set param_mux_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I1

  # Create instance: param_mux_I2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I2
  if { [catch {set param_mux_I2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I2

  # Create instance: param_mux_I3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I3
  if { [catch {set param_mux_I3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I3

  # Create instance: param_mux_Q0, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q0
  if { [catch {set param_mux_Q0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q0

  # Create instance: param_mux_Q1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q1
  if { [catch {set param_mux_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q1

  # Create instance: param_mux_Q2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q2
  if { [catch {set param_mux_Q2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q2

  # Create instance: param_mux_Q3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q3
  if { [catch {set param_mux_Q3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q3

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $xlconstant_1

  # Create instance: xlconstant_3, and set properties
  set xlconstant_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_3 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {32767} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_3

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {0} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {3} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_0

  # Create instance: xlslice_1, and set properties
  set xlslice_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_1 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {3} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_1

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {2} \
   CONFIG.DIN_TO {2} \
   CONFIG.DIN_WIDTH {3} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_2

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins S_AXI] [get_bd_intf_pins Block_Mem_I_LSB/S_AXI]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins S_AXI1] [get_bd_intf_pins Block_Mem_I_MSB/S_AXI]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins S_AXI2] [get_bd_intf_pins Block_Mem_Q_LSB/S_AXI]
  connect_bd_intf_net -intf_net Conn4 [get_bd_intf_pins S_AXI3] [get_bd_intf_pins Block_Mem_Q_MSB/S_AXI]

  # Create port connections
  connect_bd_net -net Block_Mem_I_LSB_doutb [get_bd_pins Block_Mem_I_LSB/doutb] [get_bd_pins I/L] [get_bd_pins I_31_0/data_in]
  connect_bd_net -net Block_Mem_I_MSB_doutb [get_bd_pins Block_Mem_I_MSB/doutb] [get_bd_pins I/U] [get_bd_pins I_63_32/data_in]
  connect_bd_net -net Data_I_31_0_data_out1 [get_bd_pins Data_I_31_0/data_out1] [get_bd_pins I0_MAD/I]
  connect_bd_net -net Data_I_31_0_data_out2 [get_bd_pins Data_I_31_0/data_out2] [get_bd_pins I1_MAD/I]
  connect_bd_net -net Data_I_63_32_data_out1 [get_bd_pins Data_I_63_32/data_out1] [get_bd_pins I2_MAD/I]
  connect_bd_net -net Data_I_63_32_data_out2 [get_bd_pins Data_I_63_32/data_out2] [get_bd_pins I3_MAD/I]
  connect_bd_net -net Data_I_data_out1 [get_bd_pins Data_I/data_out1] [get_bd_pins Data_I_31_0/data_in]
  connect_bd_net -net Data_I_data_out2 [get_bd_pins Data_I/data_out2] [get_bd_pins Data_I_63_32/data_in]
  connect_bd_net -net Data_Q_31_0_data_out1 [get_bd_pins Data_Q_31_0/data_out1] [get_bd_pins Q0_MAD/I]
  connect_bd_net -net Data_Q_31_0_data_out2 [get_bd_pins Data_Q_31_0/data_out2] [get_bd_pins Q1_MAD/I]
  connect_bd_net -net Data_Q_63_32_data_out1 [get_bd_pins Data_Q_63_32/data_out1] [get_bd_pins Q2_MAD/I]
  connect_bd_net -net Data_Q_63_32_data_out2 [get_bd_pins Data_Q_63_32/data_out2] [get_bd_pins Q3_MAD/I]
  connect_bd_net -net Data_Q_data_out1 [get_bd_pins Data_Q/data_out1] [get_bd_pins Data_Q_31_0/data_in]
  connect_bd_net -net Data_Q_data_out2 [get_bd_pins Data_Q/data_out2] [get_bd_pins Data_Q_63_32/data_in]
  connect_bd_net -net Din_1 [get_bd_pins Din] [get_bd_pins xlslice_0/Din] [get_bd_pins xlslice_1/Din] [get_bd_pins xlslice_2/Din]
  connect_bd_net -net I0_MAD_Iavg1 [get_bd_pins I0_MAD/Iavg1] [get_bd_pins param_mux_I0/data1]
  connect_bd_net -net I0_MAD_trigger_out [get_bd_pins trigger_out] [get_bd_pins I0_MAD/trigger_out]
  connect_bd_net -net I1_MAD_Iavg1 [get_bd_pins I1_MAD/Iavg1] [get_bd_pins param_mux_I1/data1]
  connect_bd_net -net I2_MAD_Iavg1 [get_bd_pins I2_MAD/Iavg1] [get_bd_pins param_mux_I2/data1]
  connect_bd_net -net I3_MAD_Iavg1 [get_bd_pins I3_MAD/Iavg1] [get_bd_pins param_mux_I3/data1]
  connect_bd_net -net I_31_0_data_out1 [get_bd_pins I_31_0/data_out1] [get_bd_pins param_mux_I0/data2]
  connect_bd_net -net I_31_0_data_out2 [get_bd_pins I_31_0/data_out2] [get_bd_pins param_mux_I1/data2]
  connect_bd_net -net I_63_32_data_out1 [get_bd_pins I_63_32/data_out1] [get_bd_pins param_mux_I2/data2]
  connect_bd_net -net I_63_32_data_out2 [get_bd_pins I_63_32/data_out2] [get_bd_pins param_mux_I3/data2]
  connect_bd_net -net I_Data_out [get_bd_pins I/Data_out] [get_bd_pins gaussian_gen1_0/data_I]
  connect_bd_net -net M_1 [get_bd_pins M] [get_bd_pins arbitary_wave_gen_0/M] [get_bd_pins gaussian_gen1_0/M]
  connect_bd_net -net Q0_MAD_Iavg1 [get_bd_pins Q0_MAD/Iavg1] [get_bd_pins param_mux_Q0/data1]
  connect_bd_net -net Q1_MAD_Iavg1 [get_bd_pins Q1_MAD/Iavg1] [get_bd_pins param_mux_Q1/data1]
  connect_bd_net -net Q2_MAD_Iavg1 [get_bd_pins Q2_MAD/Iavg1] [get_bd_pins param_mux_Q2/data1]
  connect_bd_net -net Q3_MAD_Iavg1 [get_bd_pins Q3_MAD/Iavg1] [get_bd_pins param_mux_Q3/data1]
  connect_bd_net -net Q_31_0_data_out1 [get_bd_pins Q_31_0/data_out1] [get_bd_pins param_mux_Q1/data2]
  connect_bd_net -net Q_31_0_data_out2 [get_bd_pins Q_31_0/data_out2] [get_bd_pins param_mux_Q0/data2]
  connect_bd_net -net Q_63_32_data_out1 [get_bd_pins Q_63_32/data_out1] [get_bd_pins param_mux_Q3/data2]
  connect_bd_net -net Q_63_32_data_out2 [get_bd_pins Q_63_32/data_out2] [get_bd_pins param_mux_Q2/data2]
  connect_bd_net -net Q_Data_out [get_bd_pins Q/Data_out] [get_bd_pins gaussian_gen1_0/data_Q]
  connect_bd_net -net addrb_1 [get_bd_pins bram_addr_out] [get_bd_pins Address_Gen/data_out] [get_bd_pins Block_Mem_I_LSB/addrb] [get_bd_pins Block_Mem_I_MSB/addrb] [get_bd_pins Block_Mem_Q_LSB/addrb] [get_bd_pins Block_Mem_Q_MSB/addrb]
  connect_bd_net -net arbitary_wave_gen_0_address [get_bd_pins Address_Gen/data2] [get_bd_pins arbitary_wave_gen_0/address]
  connect_bd_net -net b_1 [get_bd_pins b] [get_bd_pins mux_0/b]
  connect_bd_net -net clk_1 [get_bd_pins clk] [get_bd_pins Block_Mem_I_LSB/clkb] [get_bd_pins Block_Mem_I_LSB/s_axi_aclk] [get_bd_pins Block_Mem_I_MSB/clkb] [get_bd_pins Block_Mem_I_MSB/s_axi_aclk] [get_bd_pins Block_Mem_Q_LSB/clkb] [get_bd_pins Block_Mem_Q_LSB/s_axi_aclk] [get_bd_pins Block_Mem_Q_MSB/clkb] [get_bd_pins Block_Mem_Q_MSB/s_axi_aclk] [get_bd_pins I0_MAD/clk] [get_bd_pins I1_MAD/clk] [get_bd_pins I2_MAD/clk] [get_bd_pins I3_MAD/clk] [get_bd_pins Q0_MAD/clk] [get_bd_pins Q1_MAD/clk] [get_bd_pins Q2_MAD/clk] [get_bd_pins Q3_MAD/clk] [get_bd_pins arbitary_wave_gen_0/clk] [get_bd_pins flip_flop_0/clk] [get_bd_pins gaussian_gen1_0/clk]
  connect_bd_net -net coeff_value_1 [get_bd_pins I0_MAD/coeff_value] [get_bd_pins I1_MAD/coeff_value] [get_bd_pins I2_MAD/coeff_value] [get_bd_pins I3_MAD/coeff_value] [get_bd_pins Q0_MAD/coeff_value] [get_bd_pins Q1_MAD/coeff_value] [get_bd_pins Q2_MAD/coeff_value] [get_bd_pins Q3_MAD/coeff_value] [get_bd_pins mux_0/out1]
  connect_bd_net -net data_in1_1 [get_bd_pins Block_Mem_Q_LSB/doutb] [get_bd_pins Q/L] [get_bd_pins Q_31_0/data_in]
  connect_bd_net -net data_in_1 [get_bd_pins Block_Mem_Q_MSB/doutb] [get_bd_pins Q/U] [get_bd_pins Q_63_32/data_in]
  connect_bd_net -net den1_1 [get_bd_pins I0_MAD/den1] [get_bd_pins I1_MAD/den1] [get_bd_pins I2_MAD/den1] [get_bd_pins I3_MAD/den1] [get_bd_pins Q0_MAD/den1] [get_bd_pins Q1_MAD/den1] [get_bd_pins Q2_MAD/den1] [get_bd_pins Q3_MAD/den1] [get_bd_pins xlconstant_3/dout]
  connect_bd_net -net flip_flop_0_D_out [get_bd_pins D_out] [get_bd_pins flip_flop_0/D_out]
  connect_bd_net -net gaussian_gen1_0_address0 [get_bd_pins address0] [get_bd_pins Address_Gen/data1] [get_bd_pins gaussian_gen1_0/address0]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins gaussian_gen1_0/amp_increment] [get_bd_pins mux_0/a]
  connect_bd_net -net gaussian_gen1_0_data_out_I [get_bd_pins Data_I/data_in] [get_bd_pins gaussian_gen1_0/data_out_I]
  connect_bd_net -net gaussian_gen1_0_data_out_Q [get_bd_pins Data_Q/data_in] [get_bd_pins gaussian_gen1_0/data_out_Q]
  connect_bd_net -net gaussian_gen1_0_half_reg [get_bd_pins I0_MAD/half_in] [get_bd_pins I1_MAD/half_in] [get_bd_pins I2_MAD/half_in] [get_bd_pins I3_MAD/half_in] [get_bd_pins Q0_MAD/half_in] [get_bd_pins Q1_MAD/half_in] [get_bd_pins Q2_MAD/half_in] [get_bd_pins Q3_MAD/half_in] [get_bd_pins gaussian_gen1_0/half_reg]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins I0_MAD/mode_in] [get_bd_pins I1_MAD/mode_in] [get_bd_pins I2_MAD/mode_in] [get_bd_pins I3_MAD/mode_in] [get_bd_pins Q0_MAD/mode_in] [get_bd_pins Q1_MAD/mode_in] [get_bd_pins Q2_MAD/mode_in] [get_bd_pins Q3_MAD/mode_in] [get_bd_pins gaussian_gen1_0/mode_out]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins I0_MAD/trigger_in] [get_bd_pins I1_MAD/trigger_in] [get_bd_pins I2_MAD/trigger_in] [get_bd_pins I3_MAD/trigger_in] [get_bd_pins Q0_MAD/trigger_in] [get_bd_pins Q1_MAD/trigger_in] [get_bd_pins Q2_MAD/trigger_in] [get_bd_pins Q3_MAD/trigger_in] [get_bd_pins gaussian_gen1_0/trigger]
  connect_bd_net -net in_valid_1 [get_bd_pins I0_MAD/in_valid] [get_bd_pins I1_MAD/in_valid] [get_bd_pins I2_MAD/in_valid] [get_bd_pins I3_MAD/in_valid] [get_bd_pins Q0_MAD/in_valid] [get_bd_pins Q1_MAD/in_valid] [get_bd_pins Q2_MAD/in_valid] [get_bd_pins Q3_MAD/in_valid] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net ini_amp_del_1 [get_bd_pins ini_amp_del] [get_bd_pins gaussian_gen1_0/ini_amp_del]
  connect_bd_net -net ite_per_mes_1 [get_bd_pins ite_per_mes] [get_bd_pins gaussian_gen1_0/ite_per_mes]
  connect_bd_net -net ite_tot_1 [get_bd_pins ite_tot] [get_bd_pins gaussian_gen1_0/ite_tot]
  connect_bd_net -net merger1_0_Dout [get_bd_pins flip_flop_0/D_in] [get_bd_pins merger1_0/Dout]
  connect_bd_net -net mode_1 [get_bd_pins mode] [get_bd_pins gaussian_gen1_0/mode]
  connect_bd_net -net off_time1_1 [get_bd_pins off_time1] [get_bd_pins gaussian_gen1_0/off_time1]
  connect_bd_net -net param_mux_I0_data_out [get_bd_pins merger1_0/DI0] [get_bd_pins param_mux_I0/data_out]
  connect_bd_net -net param_mux_I1_data_out [get_bd_pins merger1_0/DI1] [get_bd_pins param_mux_I1/data_out]
  connect_bd_net -net param_mux_I2_data_out [get_bd_pins merger1_0/DI2] [get_bd_pins param_mux_I2/data_out]
  connect_bd_net -net param_mux_I3_data_out [get_bd_pins merger1_0/DI3] [get_bd_pins param_mux_I3/data_out]
  connect_bd_net -net param_mux_Q0_data_out [get_bd_pins merger1_0/DQ0] [get_bd_pins param_mux_Q0/data_out]
  connect_bd_net -net param_mux_Q1_data_out [get_bd_pins merger1_0/DQ1] [get_bd_pins param_mux_Q1/data_out]
  connect_bd_net -net param_mux_Q2_data_out [get_bd_pins merger1_0/DQ2] [get_bd_pins param_mux_Q2/data_out]
  connect_bd_net -net param_mux_Q3_data_out [get_bd_pins merger1_0/DQ3] [get_bd_pins param_mux_Q3/data_out]
  connect_bd_net -net rst_1 [get_bd_pins rst] [get_bd_pins gaussian_gen1_0/rst]
  connect_bd_net -net rst_2 [get_bd_pins I0_MAD/rst] [get_bd_pins I1_MAD/rst] [get_bd_pins I2_MAD/rst] [get_bd_pins I3_MAD/rst] [get_bd_pins Q0_MAD/rst] [get_bd_pins Q1_MAD/rst] [get_bd_pins Q2_MAD/rst] [get_bd_pins Q3_MAD/rst] [get_bd_pins arbitary_wave_gen_0/rst] [get_bd_pins xlconstant_1/dout]
  connect_bd_net -net s_axi_aresetn_1 [get_bd_pins s_axi_aresetn] [get_bd_pins Block_Mem_I_LSB/s_axi_aresetn] [get_bd_pins Block_Mem_I_MSB/s_axi_aresetn] [get_bd_pins Block_Mem_Q_LSB/s_axi_aresetn] [get_bd_pins Block_Mem_Q_MSB/s_axi_aresetn]
  connect_bd_net -net sel_1 [get_bd_pins sel] [get_bd_pins Address_Gen/sel] [get_bd_pins param_mux_I0/sel] [get_bd_pins param_mux_I1/sel] [get_bd_pins param_mux_I2/sel] [get_bd_pins param_mux_I3/sel] [get_bd_pins param_mux_Q0/sel] [get_bd_pins param_mux_Q1/sel] [get_bd_pins param_mux_Q2/sel] [get_bd_pins param_mux_Q3/sel]
  connect_bd_net -net sleep_time_1 [get_bd_pins sleep_time] [get_bd_pins gaussian_gen1_0/sleep_time]
  connect_bd_net -net step_size_1 [get_bd_pins step_size] [get_bd_pins gaussian_gen1_0/step_size]
  connect_bd_net -net time_bwn_pulses_1 [get_bd_pins time_bwn_pulses] [get_bd_pins gaussian_gen1_0/time_bwn_pulses]
  connect_bd_net -net trigger_time_1 [get_bd_pins trigger_time] [get_bd_pins gaussian_gen1_0/trigger_time]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins Dout1] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net xlslice_1_Dout [get_bd_pins gaussian_gen1_0/continuous] [get_bd_pins xlslice_1/Dout]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins gaussian_gen1_0/amp_inc] [get_bd_pins mux_0/sel] [get_bd_pins xlslice_2/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: DAC_00_10
proc create_hier_cell_DAC_00_10 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_DAC_00_10() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI1

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI2

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI3


  # Create pins
  create_bd_pin -dir O -from 127 -to 0 D_out
  create_bd_pin -dir I -from 2 -to 0 Din
  create_bd_pin -dir O -from 0 -to 0 Dout1
  create_bd_pin -dir I -from 31 -to 0 M
  create_bd_pin -dir O -from 12 -to 0 address0
  create_bd_pin -dir I -from 15 -to 0 b
  create_bd_pin -dir O -from 12 -to 0 bram_addr_out
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -from 31 -to 0 ini_amp_del
  create_bd_pin -dir I -from 31 -to 0 ite_per_mes
  create_bd_pin -dir I -from 31 -to 0 ite_tot
  create_bd_pin -dir I -from 1 -to 0 mode
  create_bd_pin -dir I -from 31 -to 0 off_time1
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir I -type rst s_axi_aresetn
  create_bd_pin -dir I sel
  create_bd_pin -dir I -from 31 -to 0 sleep_time
  create_bd_pin -dir I -from 31 -to 0 step_size
  create_bd_pin -dir I -from 31 -to 0 time_bwn_pulses
  create_bd_pin -dir O -from 15 -to 0 trigger_out
  create_bd_pin -dir I -from 31 -to 0 trigger_time

  # Create instance: Address_Gen, and set properties
  set block_name param_mux
  set block_cell_name Address_Gen
  if { [catch {set Address_Gen [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Address_Gen eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $Address_Gen

  # Create instance: Block_Mem_I_LSB
  create_hier_cell_Block_Mem_I_LSB $hier_obj Block_Mem_I_LSB

  # Create instance: Block_Mem_I_MSB
  create_hier_cell_Block_Mem_I_MSB $hier_obj Block_Mem_I_MSB

  # Create instance: Block_Mem_Q_LSB
  create_hier_cell_Block_Mem_Q_LSB $hier_obj Block_Mem_Q_LSB

  # Create instance: Block_Mem_Q_MSB
  create_hier_cell_Block_Mem_Q_MSB $hier_obj Block_Mem_Q_MSB

  # Create instance: Data_I, and set properties
  set block_name data_split
  set block_cell_name Data_I
  if { [catch {set Data_I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {31} \
   CONFIG.N {64} \
 ] $Data_I

  # Create instance: Data_I_31_0, and set properties
  set block_name data_split
  set block_cell_name Data_I_31_0
  if { [catch {set Data_I_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_I_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Data_I_63_32, and set properties
  set block_name data_split
  set block_cell_name Data_I_63_32
  if { [catch {set Data_I_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_I_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Data_Q, and set properties
  set block_name data_split
  set block_cell_name Data_Q
  if { [catch {set Data_Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {31} \
   CONFIG.N {64} \
 ] $Data_Q

  # Create instance: Data_Q_31_0, and set properties
  set block_name data_split
  set block_cell_name Data_Q_31_0
  if { [catch {set Data_Q_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_Q_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Data_Q_63_32, and set properties
  set block_name data_split
  set block_cell_name Data_Q_63_32
  if { [catch {set Data_Q_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_Q_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: I, and set properties
  set block_name merger_2
  set block_cell_name I
  if { [catch {set I [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $I eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: I0_MAD
  create_hier_cell_I0_MAD $hier_obj I0_MAD

  # Create instance: I1_MAD
  create_hier_cell_I1_MAD $hier_obj I1_MAD

  # Create instance: I2_MAD
  create_hier_cell_I2_MAD $hier_obj I2_MAD

  # Create instance: I3_MAD
  create_hier_cell_I3_MAD $hier_obj I3_MAD

  # Create instance: I_31_0, and set properties
  set block_name data_split
  set block_cell_name I_31_0
  if { [catch {set I_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $I_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $I_31_0

  # Create instance: I_63_32, and set properties
  set block_name data_split
  set block_cell_name I_63_32
  if { [catch {set I_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $I_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $I_63_32

  # Create instance: Q, and set properties
  set block_name merger_2
  set block_cell_name Q
  if { [catch {set Q [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Q eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Q0_MAD
  create_hier_cell_Q0_MAD $hier_obj Q0_MAD

  # Create instance: Q1_MAD
  create_hier_cell_Q1_MAD $hier_obj Q1_MAD

  # Create instance: Q2_MAD
  create_hier_cell_Q2_MAD $hier_obj Q2_MAD

  # Create instance: Q3_MAD
  create_hier_cell_Q3_MAD $hier_obj Q3_MAD

  # Create instance: Q_31_0, and set properties
  set block_name data_split
  set block_cell_name Q_31_0
  if { [catch {set Q_31_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Q_31_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $Q_31_0

  # Create instance: Q_63_32, and set properties
  set block_name data_split
  set block_cell_name Q_63_32
  if { [catch {set Q_63_32 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Q_63_32 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.M {15} \
   CONFIG.N {32} \
 ] $Q_63_32

  # Create instance: arbitary_wave_gen_0, and set properties
  set block_name arbitary_wave_gen
  set block_cell_name arbitary_wave_gen_0
  if { [catch {set arbitary_wave_gen_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $arbitary_wave_gen_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {13} \
 ] $arbitary_wave_gen_0

  # Create instance: flip_flop_0, and set properties
  set block_name flip_flop
  set block_cell_name flip_flop_0
  if { [catch {set flip_flop_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $flip_flop_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {128} \
 ] $flip_flop_0

  # Create instance: gaussian_gen1_0, and set properties
  set block_name gaussian_gen1
  set block_cell_name gaussian_gen1_0
  if { [catch {set gaussian_gen1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $gaussian_gen1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.add_bits {13} \
 ] $gaussian_gen1_0

  # Create instance: merger1_0, and set properties
  set block_name merger1
  set block_cell_name merger1_0
  if { [catch {set merger1_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $merger1_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: mux_0, and set properties
  set block_name mux
  set block_cell_name mux_0
  if { [catch {set mux_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mux_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: param_mux_I0, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I0
  if { [catch {set param_mux_I0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I0

  # Create instance: param_mux_I1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I1
  if { [catch {set param_mux_I1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I1

  # Create instance: param_mux_I2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I2
  if { [catch {set param_mux_I2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I2

  # Create instance: param_mux_I3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_I3
  if { [catch {set param_mux_I3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_I3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_I3

  # Create instance: param_mux_Q0, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q0
  if { [catch {set param_mux_Q0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q0

  # Create instance: param_mux_Q1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q1
  if { [catch {set param_mux_Q1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q1

  # Create instance: param_mux_Q2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q2
  if { [catch {set param_mux_Q2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q2

  # Create instance: param_mux_Q3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_Q3
  if { [catch {set param_mux_Q3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_Q3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {16} \
 ] $param_mux_Q3

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $xlconstant_1

  # Create instance: xlconstant_3, and set properties
  set xlconstant_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_3 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {32767} \
   CONFIG.CONST_WIDTH {16} \
 ] $xlconstant_3

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {0} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {3} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_0

  # Create instance: xlslice_1, and set properties
  set xlslice_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_1 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {3} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_1

  # Create instance: xlslice_2, and set properties
  set xlslice_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_2 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {2} \
   CONFIG.DIN_TO {2} \
   CONFIG.DIN_WIDTH {3} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_2

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins S_AXI] [get_bd_intf_pins Block_Mem_I_LSB/S_AXI]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins S_AXI1] [get_bd_intf_pins Block_Mem_I_MSB/S_AXI]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins S_AXI2] [get_bd_intf_pins Block_Mem_Q_LSB/S_AXI]
  connect_bd_intf_net -intf_net Conn4 [get_bd_intf_pins S_AXI3] [get_bd_intf_pins Block_Mem_Q_MSB/S_AXI]

  # Create port connections
  connect_bd_net -net Block_Mem_I_LSB_doutb [get_bd_pins Block_Mem_I_LSB/doutb] [get_bd_pins I/L] [get_bd_pins I_31_0/data_in]
  connect_bd_net -net Block_Mem_I_MSB_doutb [get_bd_pins Block_Mem_I_MSB/doutb] [get_bd_pins I/U] [get_bd_pins I_63_32/data_in]
  connect_bd_net -net Data_I_31_0_data_out1 [get_bd_pins Data_I_31_0/data_out1] [get_bd_pins I0_MAD/I]
  connect_bd_net -net Data_I_31_0_data_out2 [get_bd_pins Data_I_31_0/data_out2] [get_bd_pins I1_MAD/I]
  connect_bd_net -net Data_I_63_32_data_out1 [get_bd_pins Data_I_63_32/data_out1] [get_bd_pins I2_MAD/I]
  connect_bd_net -net Data_I_63_32_data_out2 [get_bd_pins Data_I_63_32/data_out2] [get_bd_pins I3_MAD/I]
  connect_bd_net -net Data_I_data_out1 [get_bd_pins Data_I/data_out1] [get_bd_pins Data_I_31_0/data_in]
  connect_bd_net -net Data_I_data_out2 [get_bd_pins Data_I/data_out2] [get_bd_pins Data_I_63_32/data_in]
  connect_bd_net -net Data_Q_31_0_data_out1 [get_bd_pins Data_Q_31_0/data_out1] [get_bd_pins Q0_MAD/I]
  connect_bd_net -net Data_Q_31_0_data_out2 [get_bd_pins Data_Q_31_0/data_out2] [get_bd_pins Q1_MAD/I]
  connect_bd_net -net Data_Q_63_32_data_out1 [get_bd_pins Data_Q_63_32/data_out1] [get_bd_pins Q2_MAD/I]
  connect_bd_net -net Data_Q_63_32_data_out2 [get_bd_pins Data_Q_63_32/data_out2] [get_bd_pins Q3_MAD/I]
  connect_bd_net -net Data_Q_data_out1 [get_bd_pins Data_Q/data_out1] [get_bd_pins Data_Q_31_0/data_in]
  connect_bd_net -net Data_Q_data_out2 [get_bd_pins Data_Q/data_out2] [get_bd_pins Data_Q_63_32/data_in]
  connect_bd_net -net Din_1 [get_bd_pins Din] [get_bd_pins xlslice_0/Din] [get_bd_pins xlslice_1/Din] [get_bd_pins xlslice_2/Din]
  connect_bd_net -net I0_MAD_Iavg1 [get_bd_pins I0_MAD/Iavg1] [get_bd_pins param_mux_I0/data1]
  connect_bd_net -net I0_MAD_trigger_out [get_bd_pins trigger_out] [get_bd_pins I0_MAD/trigger_out]
  connect_bd_net -net I1_MAD_Iavg1 [get_bd_pins I1_MAD/Iavg1] [get_bd_pins param_mux_I1/data1]
  connect_bd_net -net I2_MAD_Iavg1 [get_bd_pins I2_MAD/Iavg1] [get_bd_pins param_mux_I2/data1]
  connect_bd_net -net I3_MAD_Iavg1 [get_bd_pins I3_MAD/Iavg1] [get_bd_pins param_mux_I3/data1]
  connect_bd_net -net I_31_0_data_out1 [get_bd_pins I_31_0/data_out1] [get_bd_pins param_mux_I0/data2]
  connect_bd_net -net I_31_0_data_out2 [get_bd_pins I_31_0/data_out2] [get_bd_pins param_mux_I1/data2]
  connect_bd_net -net I_63_32_data_out1 [get_bd_pins I_63_32/data_out1] [get_bd_pins param_mux_I2/data2]
  connect_bd_net -net I_63_32_data_out2 [get_bd_pins I_63_32/data_out2] [get_bd_pins param_mux_I3/data2]
  connect_bd_net -net I_Data_out [get_bd_pins I/Data_out] [get_bd_pins gaussian_gen1_0/data_I]
  connect_bd_net -net M_1 [get_bd_pins M] [get_bd_pins arbitary_wave_gen_0/M] [get_bd_pins gaussian_gen1_0/M]
  connect_bd_net -net Q0_MAD_Iavg1 [get_bd_pins Q0_MAD/Iavg1] [get_bd_pins param_mux_Q0/data1]
  connect_bd_net -net Q1_MAD_Iavg1 [get_bd_pins Q1_MAD/Iavg1] [get_bd_pins param_mux_Q1/data1]
  connect_bd_net -net Q2_MAD_Iavg1 [get_bd_pins Q2_MAD/Iavg1] [get_bd_pins param_mux_Q2/data1]
  connect_bd_net -net Q3_MAD_Iavg1 [get_bd_pins Q3_MAD/Iavg1] [get_bd_pins param_mux_Q3/data1]
  connect_bd_net -net Q_31_0_data_out1 [get_bd_pins Q_31_0/data_out1] [get_bd_pins param_mux_Q1/data2]
  connect_bd_net -net Q_31_0_data_out2 [get_bd_pins Q_31_0/data_out2] [get_bd_pins param_mux_Q0/data2]
  connect_bd_net -net Q_63_32_data_out1 [get_bd_pins Q_63_32/data_out1] [get_bd_pins param_mux_Q3/data2]
  connect_bd_net -net Q_63_32_data_out2 [get_bd_pins Q_63_32/data_out2] [get_bd_pins param_mux_Q2/data2]
  connect_bd_net -net Q_Data_out [get_bd_pins Q/Data_out] [get_bd_pins gaussian_gen1_0/data_Q]
  connect_bd_net -net addrb_1 [get_bd_pins bram_addr_out] [get_bd_pins Address_Gen/data_out] [get_bd_pins Block_Mem_I_LSB/addrb] [get_bd_pins Block_Mem_I_MSB/addrb] [get_bd_pins Block_Mem_Q_LSB/addrb] [get_bd_pins Block_Mem_Q_MSB/addrb]
  connect_bd_net -net arbitary_wave_gen_0_address [get_bd_pins Address_Gen/data2] [get_bd_pins arbitary_wave_gen_0/address]
  connect_bd_net -net b_1 [get_bd_pins b] [get_bd_pins mux_0/b]
  connect_bd_net -net clk_1 [get_bd_pins clk] [get_bd_pins Block_Mem_I_LSB/clkb] [get_bd_pins Block_Mem_I_LSB/s_axi_aclk] [get_bd_pins Block_Mem_I_MSB/clkb] [get_bd_pins Block_Mem_I_MSB/s_axi_aclk] [get_bd_pins Block_Mem_Q_LSB/clkb] [get_bd_pins Block_Mem_Q_LSB/s_axi_aclk] [get_bd_pins Block_Mem_Q_MSB/clkb] [get_bd_pins Block_Mem_Q_MSB/s_axi_aclk] [get_bd_pins I0_MAD/clk] [get_bd_pins I1_MAD/clk] [get_bd_pins I2_MAD/clk] [get_bd_pins I3_MAD/clk] [get_bd_pins Q0_MAD/clk] [get_bd_pins Q1_MAD/clk] [get_bd_pins Q2_MAD/clk] [get_bd_pins Q3_MAD/clk] [get_bd_pins arbitary_wave_gen_0/clk] [get_bd_pins flip_flop_0/clk] [get_bd_pins gaussian_gen1_0/clk]
  connect_bd_net -net coeff_value_1 [get_bd_pins I0_MAD/coeff_value] [get_bd_pins I1_MAD/coeff_value] [get_bd_pins I2_MAD/coeff_value] [get_bd_pins I3_MAD/coeff_value] [get_bd_pins Q0_MAD/coeff_value] [get_bd_pins Q1_MAD/coeff_value] [get_bd_pins Q2_MAD/coeff_value] [get_bd_pins Q3_MAD/coeff_value] [get_bd_pins mux_0/out1]
  connect_bd_net -net data_in1_1 [get_bd_pins Block_Mem_Q_LSB/doutb] [get_bd_pins Q/L] [get_bd_pins Q_31_0/data_in]
  connect_bd_net -net data_in_1 [get_bd_pins Block_Mem_Q_MSB/doutb] [get_bd_pins Q/U] [get_bd_pins Q_63_32/data_in]
  connect_bd_net -net den1_1 [get_bd_pins I0_MAD/den1] [get_bd_pins I1_MAD/den1] [get_bd_pins I2_MAD/den1] [get_bd_pins I3_MAD/den1] [get_bd_pins Q0_MAD/den1] [get_bd_pins Q1_MAD/den1] [get_bd_pins Q2_MAD/den1] [get_bd_pins Q3_MAD/den1] [get_bd_pins xlconstant_3/dout]
  connect_bd_net -net flip_flop_0_D_out [get_bd_pins D_out] [get_bd_pins flip_flop_0/D_out]
  connect_bd_net -net gaussian_gen1_0_address0 [get_bd_pins address0] [get_bd_pins Address_Gen/data1] [get_bd_pins gaussian_gen1_0/address0]
  connect_bd_net -net gaussian_gen1_0_amp_increment [get_bd_pins gaussian_gen1_0/amp_increment] [get_bd_pins mux_0/a]
  connect_bd_net -net gaussian_gen1_0_data_out_I [get_bd_pins Data_I/data_in] [get_bd_pins gaussian_gen1_0/data_out_I]
  connect_bd_net -net gaussian_gen1_0_data_out_Q [get_bd_pins Data_Q/data_in] [get_bd_pins gaussian_gen1_0/data_out_Q]
  connect_bd_net -net gaussian_gen1_0_half_reg [get_bd_pins I0_MAD/half_in] [get_bd_pins I1_MAD/half_in] [get_bd_pins I2_MAD/half_in] [get_bd_pins I3_MAD/half_in] [get_bd_pins Q0_MAD/half_in] [get_bd_pins Q1_MAD/half_in] [get_bd_pins Q2_MAD/half_in] [get_bd_pins Q3_MAD/half_in] [get_bd_pins gaussian_gen1_0/half_reg]
  connect_bd_net -net gaussian_gen1_0_mode_out [get_bd_pins I0_MAD/mode_in] [get_bd_pins I1_MAD/mode_in] [get_bd_pins I2_MAD/mode_in] [get_bd_pins I3_MAD/mode_in] [get_bd_pins Q0_MAD/mode_in] [get_bd_pins Q1_MAD/mode_in] [get_bd_pins Q2_MAD/mode_in] [get_bd_pins Q3_MAD/mode_in] [get_bd_pins gaussian_gen1_0/mode_out]
  connect_bd_net -net gaussian_gen1_0_trigger [get_bd_pins I0_MAD/trigger_in] [get_bd_pins I1_MAD/trigger_in] [get_bd_pins I2_MAD/trigger_in] [get_bd_pins I3_MAD/trigger_in] [get_bd_pins Q0_MAD/trigger_in] [get_bd_pins Q1_MAD/trigger_in] [get_bd_pins Q2_MAD/trigger_in] [get_bd_pins Q3_MAD/trigger_in] [get_bd_pins gaussian_gen1_0/trigger]
  connect_bd_net -net in_valid_1 [get_bd_pins I0_MAD/in_valid] [get_bd_pins I1_MAD/in_valid] [get_bd_pins I2_MAD/in_valid] [get_bd_pins I3_MAD/in_valid] [get_bd_pins Q0_MAD/in_valid] [get_bd_pins Q1_MAD/in_valid] [get_bd_pins Q2_MAD/in_valid] [get_bd_pins Q3_MAD/in_valid] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net ini_amp_del_1 [get_bd_pins ini_amp_del] [get_bd_pins gaussian_gen1_0/ini_amp_del]
  connect_bd_net -net ite_per_mes_1 [get_bd_pins ite_per_mes] [get_bd_pins gaussian_gen1_0/ite_per_mes]
  connect_bd_net -net ite_tot_1 [get_bd_pins ite_tot] [get_bd_pins gaussian_gen1_0/ite_tot]
  connect_bd_net -net merger1_0_Dout [get_bd_pins flip_flop_0/D_in] [get_bd_pins merger1_0/Dout]
  connect_bd_net -net mode_1 [get_bd_pins mode] [get_bd_pins gaussian_gen1_0/mode]
  connect_bd_net -net off_time1_1 [get_bd_pins off_time1] [get_bd_pins gaussian_gen1_0/off_time1]
  connect_bd_net -net param_mux_I0_data_out [get_bd_pins merger1_0/DI0] [get_bd_pins param_mux_I0/data_out]
  connect_bd_net -net param_mux_I1_data_out [get_bd_pins merger1_0/DI1] [get_bd_pins param_mux_I1/data_out]
  connect_bd_net -net param_mux_I2_data_out [get_bd_pins merger1_0/DI2] [get_bd_pins param_mux_I2/data_out]
  connect_bd_net -net param_mux_I3_data_out [get_bd_pins merger1_0/DI3] [get_bd_pins param_mux_I3/data_out]
  connect_bd_net -net param_mux_Q0_data_out [get_bd_pins merger1_0/DQ0] [get_bd_pins param_mux_Q0/data_out]
  connect_bd_net -net param_mux_Q1_data_out [get_bd_pins merger1_0/DQ1] [get_bd_pins param_mux_Q1/data_out]
  connect_bd_net -net param_mux_Q2_data_out [get_bd_pins merger1_0/DQ2] [get_bd_pins param_mux_Q2/data_out]
  connect_bd_net -net param_mux_Q3_data_out [get_bd_pins merger1_0/DQ3] [get_bd_pins param_mux_Q3/data_out]
  connect_bd_net -net rst_1 [get_bd_pins rst] [get_bd_pins gaussian_gen1_0/rst]
  connect_bd_net -net rst_2 [get_bd_pins I0_MAD/rst] [get_bd_pins I1_MAD/rst] [get_bd_pins I2_MAD/rst] [get_bd_pins I3_MAD/rst] [get_bd_pins Q0_MAD/rst] [get_bd_pins Q1_MAD/rst] [get_bd_pins Q2_MAD/rst] [get_bd_pins Q3_MAD/rst] [get_bd_pins arbitary_wave_gen_0/rst] [get_bd_pins xlconstant_1/dout]
  connect_bd_net -net s_axi_aresetn_1 [get_bd_pins s_axi_aresetn] [get_bd_pins Block_Mem_I_LSB/s_axi_aresetn] [get_bd_pins Block_Mem_I_MSB/s_axi_aresetn] [get_bd_pins Block_Mem_Q_LSB/s_axi_aresetn] [get_bd_pins Block_Mem_Q_MSB/s_axi_aresetn]
  connect_bd_net -net sel_1 [get_bd_pins sel] [get_bd_pins Address_Gen/sel] [get_bd_pins param_mux_I0/sel] [get_bd_pins param_mux_I1/sel] [get_bd_pins param_mux_I2/sel] [get_bd_pins param_mux_I3/sel] [get_bd_pins param_mux_Q0/sel] [get_bd_pins param_mux_Q1/sel] [get_bd_pins param_mux_Q2/sel] [get_bd_pins param_mux_Q3/sel]
  connect_bd_net -net sleep_time_1 [get_bd_pins sleep_time] [get_bd_pins gaussian_gen1_0/sleep_time]
  connect_bd_net -net step_size_1 [get_bd_pins step_size] [get_bd_pins gaussian_gen1_0/step_size]
  connect_bd_net -net time_bwn_pulses_1 [get_bd_pins time_bwn_pulses] [get_bd_pins gaussian_gen1_0/time_bwn_pulses]
  connect_bd_net -net trigger_time_1 [get_bd_pins trigger_time] [get_bd_pins gaussian_gen1_0/trigger_time]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins Dout1] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net xlslice_1_Dout [get_bd_pins gaussian_gen1_0/continuous] [get_bd_pins xlslice_1/Dout]
  connect_bd_net -net xlslice_2_Dout [get_bd_pins gaussian_gen1_0/amp_inc] [get_bd_pins mux_0/sel] [get_bd_pins xlslice_2/Dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: ADC_12_32_mux
proc create_hier_cell_ADC_12_32_mux { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_ADC_12_32_mux() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 63 -to 0 data1
  create_bd_pin -dir I -from 63 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir I -from 0 -to 0 data5
  create_bd_pin -dir I -from 0 -to 0 data6
  create_bd_pin -dir I -from 63 -to 0 data7
  create_bd_pin -dir I -from 63 -to 0 data8
  create_bd_pin -dir O -from 63 -to 0 data_out
  create_bd_pin -dir O -from 0 -to 0 data_out1
  create_bd_pin -dir O -from 0 -to 0 data_out2
  create_bd_pin -dir O -from 63 -to 0 data_out3
  create_bd_pin -dir I sel_1

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: param_mux_4, and set properties
  set block_name param_mux
  set block_cell_name param_mux_4
  if { [catch {set param_mux_4 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_4 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_4

  # Create port connections
  connect_bd_net -net param_mux_1_data_out1 [get_bd_pins data_out3] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out [get_bd_pins data_out] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out [get_bd_pins data_out1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net param_mux_4_data_out [get_bd_pins data_out2] [get_bd_pins param_mux_4/data_out]
  connect_bd_net -net sel_1_1 [get_bd_pins sel_1] [get_bd_pins param_mux_1/sel] [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins param_mux_4/sel]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tdata [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tvalid [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tdata [get_bd_pins data7] [get_bd_pins param_mux_1/data1]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tvalid [get_bd_pins data5] [get_bd_pins param_mux_4/data1]
  connect_bd_net -net usp_rf_data_converter_0_m20_axis_tdata [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net usp_rf_data_converter_0_m20_axis_tvalid [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net usp_rf_data_converter_0_m21_axis_tdata [get_bd_pins data8] [get_bd_pins param_mux_1/data2]
  connect_bd_net -net usp_rf_data_converter_0_m21_axis_tvalid [get_bd_pins data6] [get_bd_pins param_mux_4/data2]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: ADC_10_30_mux
proc create_hier_cell_ADC_10_30_mux { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_ADC_10_30_mux() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 63 -to 0 data1
  create_bd_pin -dir I -from 63 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir I -from 0 -to 0 data5
  create_bd_pin -dir I -from 0 -to 0 data6
  create_bd_pin -dir I -from 63 -to 0 data7
  create_bd_pin -dir I -from 63 -to 0 data8
  create_bd_pin -dir O -from 63 -to 0 data_out
  create_bd_pin -dir O -from 0 -to 0 data_out1
  create_bd_pin -dir O -from 0 -to 0 data_out2
  create_bd_pin -dir O -from 63 -to 0 data_out3
  create_bd_pin -dir I sel_1

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: param_mux_4, and set properties
  set block_name param_mux
  set block_cell_name param_mux_4
  if { [catch {set param_mux_4 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_4 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_4

  # Create port connections
  connect_bd_net -net param_mux_1_data_out1 [get_bd_pins data_out3] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out [get_bd_pins data_out] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out [get_bd_pins data_out1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net param_mux_4_data_out [get_bd_pins data_out2] [get_bd_pins param_mux_4/data_out]
  connect_bd_net -net sel_1_1 [get_bd_pins sel_1] [get_bd_pins param_mux_1/sel] [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins param_mux_4/sel]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tdata [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tvalid [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tdata [get_bd_pins data7] [get_bd_pins param_mux_1/data1]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tvalid [get_bd_pins data5] [get_bd_pins param_mux_4/data1]
  connect_bd_net -net usp_rf_data_converter_0_m20_axis_tdata [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net usp_rf_data_converter_0_m20_axis_tvalid [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net usp_rf_data_converter_0_m21_axis_tdata [get_bd_pins data8] [get_bd_pins param_mux_1/data2]
  connect_bd_net -net usp_rf_data_converter_0_m21_axis_tvalid [get_bd_pins data6] [get_bd_pins param_mux_4/data2]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: ADC_02_22_mux
proc create_hier_cell_ADC_02_22_mux { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_ADC_02_22_mux() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -from 63 -to 0 data1
  create_bd_pin -dir I -from 63 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir I -from 0 -to 0 data5
  create_bd_pin -dir I -from 0 -to 0 data6
  create_bd_pin -dir I -from 63 -to 0 data7
  create_bd_pin -dir I -from 63 -to 0 data8
  create_bd_pin -dir O -from 63 -to 0 data_out
  create_bd_pin -dir O -from 0 -to 0 data_out1
  create_bd_pin -dir O -from 0 -to 0 data_out2
  create_bd_pin -dir O -from 63 -to 0 data_out3
  create_bd_pin -dir I sel_1

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: param_mux_4, and set properties
  set block_name param_mux
  set block_cell_name param_mux_4
  if { [catch {set param_mux_4 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_4 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_4

  # Create port connections
  connect_bd_net -net param_mux_1_data_out1 [get_bd_pins data_out3] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out [get_bd_pins data_out] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out [get_bd_pins data_out1] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net param_mux_4_data_out [get_bd_pins data_out2] [get_bd_pins param_mux_4/data_out]
  connect_bd_net -net sel_1_1 [get_bd_pins sel_1] [get_bd_pins param_mux_1/sel] [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins param_mux_4/sel]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tdata [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tvalid [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tdata [get_bd_pins data7] [get_bd_pins param_mux_1/data1]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tvalid [get_bd_pins data5] [get_bd_pins param_mux_4/data1]
  connect_bd_net -net usp_rf_data_converter_0_m20_axis_tdata [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net usp_rf_data_converter_0_m20_axis_tvalid [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net usp_rf_data_converter_0_m21_axis_tdata [get_bd_pins data8] [get_bd_pins param_mux_1/data2]
  connect_bd_net -net usp_rf_data_converter_0_m21_axis_tvalid [get_bd_pins data6] [get_bd_pins param_mux_4/data2]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: ADC_00_20_mux
proc create_hier_cell_ADC_00_20_mux { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_ADC_00_20_mux() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir O -from 63 -to 0 I_00_20_mux
  create_bd_pin -dir O -from 0 -to 0 I_valid_00_20_mux
  create_bd_pin -dir O -from 0 -to 0 Q_00_20_mux
  create_bd_pin -dir O -from 63 -to 0 Q_valid_00_20_mux
  create_bd_pin -dir I -from 63 -to 0 data1
  create_bd_pin -dir I -from 63 -to 0 data2
  create_bd_pin -dir I -from 0 -to 0 data3
  create_bd_pin -dir I -from 0 -to 0 data4
  create_bd_pin -dir I -from 0 -to 0 data5
  create_bd_pin -dir I -from 0 -to 0 data6
  create_bd_pin -dir I -from 63 -to 0 data7
  create_bd_pin -dir I -from 63 -to 0 data8
  create_bd_pin -dir I sel_1

  # Create instance: param_mux_1, and set properties
  set block_name param_mux
  set block_cell_name param_mux_1
  if { [catch {set param_mux_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_1 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_1

  # Create instance: param_mux_2, and set properties
  set block_name param_mux
  set block_cell_name param_mux_2
  if { [catch {set param_mux_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_2 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {64} \
 ] $param_mux_2

  # Create instance: param_mux_3, and set properties
  set block_name param_mux
  set block_cell_name param_mux_3
  if { [catch {set param_mux_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_3 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_3

  # Create instance: param_mux_4, and set properties
  set block_name param_mux
  set block_cell_name param_mux_4
  if { [catch {set param_mux_4 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_4 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_4

  # Create port connections
  connect_bd_net -net param_mux_1_data_out1 [get_bd_pins Q_valid_00_20_mux] [get_bd_pins param_mux_1/data_out]
  connect_bd_net -net param_mux_2_data_out [get_bd_pins I_00_20_mux] [get_bd_pins param_mux_2/data_out]
  connect_bd_net -net param_mux_3_data_out [get_bd_pins I_valid_00_20_mux] [get_bd_pins param_mux_3/data_out]
  connect_bd_net -net param_mux_4_data_out [get_bd_pins Q_00_20_mux] [get_bd_pins param_mux_4/data_out]
  connect_bd_net -net sel_1_1 [get_bd_pins sel_1] [get_bd_pins param_mux_1/sel] [get_bd_pins param_mux_2/sel] [get_bd_pins param_mux_3/sel] [get_bd_pins param_mux_4/sel]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tdata [get_bd_pins data1] [get_bd_pins param_mux_2/data1]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tvalid [get_bd_pins data3] [get_bd_pins param_mux_3/data1]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tdata [get_bd_pins data7] [get_bd_pins param_mux_1/data1]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tvalid [get_bd_pins data5] [get_bd_pins param_mux_4/data1]
  connect_bd_net -net usp_rf_data_converter_0_m20_axis_tdata [get_bd_pins data2] [get_bd_pins param_mux_2/data2]
  connect_bd_net -net usp_rf_data_converter_0_m20_axis_tvalid [get_bd_pins data4] [get_bd_pins param_mux_3/data2]
  connect_bd_net -net usp_rf_data_converter_0_m21_axis_tdata [get_bd_pins data8] [get_bd_pins param_mux_1/data2]
  connect_bd_net -net usp_rf_data_converter_0_m21_axis_tvalid [get_bd_pins data6] [get_bd_pins param_mux_4/data2]

  # Restore current instance
  current_bd_instance $oldCurInst
}


# Procedure to create entire design; Provide argument to make
# procedure reusable. If parentCell is "", will use root.
proc create_root_design { parentCell } {

  variable script_folder
  variable design_name

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set PL_CLK [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 PL_CLK ]
  set_property -dict [ list \
   CONFIG.FREQ_HZ {128000000} \
   ] $PL_CLK

  set adc0_clk_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 adc0_clk_0 ]

  set adc1_clk_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 adc1_clk_0 ]

  set adc2_clk_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 adc2_clk_0 ]

  set adc3_clk_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 adc3_clk_0 ]

  set dac0_clk_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 dac0_clk_0 ]

  set dac1_clk_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 dac1_clk_0 ]

  set pl_sysref_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 pl_sysref_0 ]

  set sysref_in_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:display_usp_rf_data_converter:diff_pins_rtl:1.0 sysref_in_0 ]

  set vin0_01_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vin0_01_0 ]

  set vin0_23_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vin0_23_0 ]

  set vin1_01_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vin1_01_0 ]

  set vin1_23_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vin1_23_0 ]

  set vin2_01_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vin2_01_0 ]

  set vin2_23_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vin2_23_0 ]

  set vin3_01_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vin3_01_0 ]

  set vin3_23_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vin3_23_0 ]

  set vout00_0 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vout00_0 ]

  set vout01_0 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vout01_0 ]

  set vout02_0 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vout02_0 ]

  set vout03_0 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vout03_0 ]

  set vout10_0 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vout10_0 ]

  set vout11_0 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vout11_0 ]

  set vout12_0 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vout12_0 ]

  set vout13_1 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:diff_analog_io_rtl:1.0 vout13_1 ]


  # Create ports
  set ext_reset_in_0 [ create_bd_port -dir I -type rst ext_reset_in_0 ]

  # Create instance: ADC_00_20_mux
  create_hier_cell_ADC_00_20_mux [current_bd_instance .] ADC_00_20_mux

  # Create instance: ADC_02_22_mux
  create_hier_cell_ADC_02_22_mux [current_bd_instance .] ADC_02_22_mux

  # Create instance: ADC_10_30_mux
  create_hier_cell_ADC_10_30_mux [current_bd_instance .] ADC_10_30_mux

  # Create instance: ADC_12_32_mux
  create_hier_cell_ADC_12_32_mux [current_bd_instance .] ADC_12_32_mux

  # Create instance: DAC_00_10
  create_hier_cell_DAC_00_10 [current_bd_instance .] DAC_00_10

  # Create instance: DAC_01_11
  create_hier_cell_DAC_01_11 [current_bd_instance .] DAC_01_11

  # Create instance: DAC_02_12
  create_hier_cell_DAC_02_12 [current_bd_instance .] DAC_02_12

  # Create instance: DAC_02_trigger
  create_hier_cell_DAC_02_trigger [current_bd_instance .] DAC_02_trigger

  # Create instance: DAC_03_13
  create_hier_cell_DAC_03_13 [current_bd_instance .] DAC_03_13

  # Create instance: Filters_Rotation_ADC_00_20
  create_hier_cell_Filters_Rotation_ADC_00_20 [current_bd_instance .] Filters_Rotation_ADC_00_20

  # Create instance: Filters_Rotation_ADC_02_22
  create_hier_cell_Filters_Rotation_ADC_02_22 [current_bd_instance .] Filters_Rotation_ADC_02_22

  # Create instance: Filters_Rotation_ADC_10_30
  create_hier_cell_Filters_Rotation_ADC_10_30 [current_bd_instance .] Filters_Rotation_ADC_10_30

  # Create instance: Filters_Rotation_ADC_12_32
  create_hier_cell_Filters_Rotation_ADC_12_32 [current_bd_instance .] Filters_Rotation_ADC_12_32

  # Create instance: Readout_DMA_0
  create_hier_cell_Readout_DMA_0 [current_bd_instance .] Readout_DMA_0

  # Create instance: Readout_DMA_1
  create_hier_cell_Readout_DMA_1 [current_bd_instance .] Readout_DMA_1

  # Create instance: Readout_DMA_2
  create_hier_cell_Readout_DMA_2 [current_bd_instance .] Readout_DMA_2

  # Create instance: Readout_DMA_3
  create_hier_cell_Readout_DMA_3 [current_bd_instance .] Readout_DMA_3

  # Create instance: adc_ila_mux_0
  create_hier_cell_adc_ila_mux_0 [current_bd_instance .] adc_ila_mux_0

  # Create instance: adc_ila_mux_1
  create_hier_cell_adc_ila_mux_1 [current_bd_instance .] adc_ila_mux_1

  # Create instance: adc_ila_mux_2
  create_hier_cell_adc_ila_mux_2 [current_bd_instance .] adc_ila_mux_2

  # Create instance: adc_ila_mux_3
  create_hier_cell_adc_ila_mux_3 [current_bd_instance .] adc_ila_mux_3

  # Create instance: adc_ila_mux_4
  create_hier_cell_adc_ila_mux_4 [current_bd_instance .] adc_ila_mux_4

  # Create instance: adc_ila_mux_5
  create_hier_cell_adc_ila_mux_5 [current_bd_instance .] adc_ila_mux_5

  # Create instance: adc_ila_mux_6
  create_hier_cell_adc_ila_mux_6 [current_bd_instance .] adc_ila_mux_6

  # Create instance: adc_ila_mux_7
  create_hier_cell_adc_ila_mux_7 [current_bd_instance .] adc_ila_mux_7

  # Create instance: adc_ila_mux_8
  create_hier_cell_adc_ila_mux_8 [current_bd_instance .] adc_ila_mux_8

  # Create instance: adc_ila_mux_9
  create_hier_cell_adc_ila_mux_9 [current_bd_instance .] adc_ila_mux_9

  # Create instance: adc_ila_mux_10
  create_hier_cell_adc_ila_mux_10 [current_bd_instance .] adc_ila_mux_10

  # Create instance: adc_ila_mux_11
  create_hier_cell_adc_ila_mux_11 [current_bd_instance .] adc_ila_mux_11

  # Create instance: adc_ila_mux_12
  create_hier_cell_adc_ila_mux_12 [current_bd_instance .] adc_ila_mux_12

  # Create instance: adc_ila_mux_13
  create_hier_cell_adc_ila_mux_13 [current_bd_instance .] adc_ila_mux_13

  # Create instance: adc_ila_mux_14
  create_hier_cell_adc_ila_mux_14 [current_bd_instance .] adc_ila_mux_14

  # Create instance: adc_ila_mux_15
  create_hier_cell_adc_ila_mux_15 [current_bd_instance .] adc_ila_mux_15

  # Create instance: adc_ila_mux_16
  create_hier_cell_adc_ila_mux_16 [current_bd_instance .] adc_ila_mux_16

  # Create instance: adc_ila_mux_17
  create_hier_cell_adc_ila_mux_17 [current_bd_instance .] adc_ila_mux_17

  # Create instance: adc_ila_mux_18
  create_hier_cell_adc_ila_mux_18 [current_bd_instance .] adc_ila_mux_18

  # Create instance: adc_ila_mux_19
  create_hier_cell_adc_ila_mux_19 [current_bd_instance .] adc_ila_mux_19

  # Create instance: adc_ila_mux_20
  create_hier_cell_adc_ila_mux_20 [current_bd_instance .] adc_ila_mux_20

  # Create instance: adc_ila_mux_21
  create_hier_cell_adc_ila_mux_21 [current_bd_instance .] adc_ila_mux_21

  # Create instance: adc_ila_mux_22
  create_hier_cell_adc_ila_mux_22 [current_bd_instance .] adc_ila_mux_22

  # Create instance: adc_ila_mux_23
  create_hier_cell_adc_ila_mux_23 [current_bd_instance .] adc_ila_mux_23

  # Create instance: adc_ila_mux_24
  create_hier_cell_adc_ila_mux_24 [current_bd_instance .] adc_ila_mux_24

  # Create instance: adc_ila_mux_25
  create_hier_cell_adc_ila_mux_25 [current_bd_instance .] adc_ila_mux_25

  # Create instance: adc_ila_mux_26
  create_hier_cell_adc_ila_mux_26 [current_bd_instance .] adc_ila_mux_26

  # Create instance: adc_ila_mux_27
  create_hier_cell_adc_ila_mux_27 [current_bd_instance .] adc_ila_mux_27

  # Create instance: adc_ila_mux_28
  create_hier_cell_adc_ila_mux_28 [current_bd_instance .] adc_ila_mux_28

  # Create instance: adc_ila_mux_29
  create_hier_cell_adc_ila_mux_29 [current_bd_instance .] adc_ila_mux_29

  # Create instance: adc_ila_mux_30
  create_hier_cell_adc_ila_mux_30 [current_bd_instance .] adc_ila_mux_30

  # Create instance: adc_ila_mux_31
  create_hier_cell_adc_ila_mux_31 [current_bd_instance .] adc_ila_mux_31

  # Create instance: adc_ila_mux_32
  create_hier_cell_adc_ila_mux_32 [current_bd_instance .] adc_ila_mux_32

  # Create instance: adc_ila_mux_33
  create_hier_cell_adc_ila_mux_33 [current_bd_instance .] adc_ila_mux_33

  # Create instance: adc_ila_mux_34
  create_hier_cell_adc_ila_mux_34 [current_bd_instance .] adc_ila_mux_34

  # Create instance: adc_ila_mux_35
  create_hier_cell_adc_ila_mux_35 [current_bd_instance .] adc_ila_mux_35

  # Create instance: adc_ila_mux_36
  create_hier_cell_adc_ila_mux_36 [current_bd_instance .] adc_ila_mux_36

  # Create instance: adc_ila_mux_37
  create_hier_cell_adc_ila_mux_37 [current_bd_instance .] adc_ila_mux_37

  # Create instance: adc_ila_mux_38
  create_hier_cell_adc_ila_mux_38 [current_bd_instance .] adc_ila_mux_38

  # Create instance: adc_ila_mux_39
  create_hier_cell_adc_ila_mux_39 [current_bd_instance .] adc_ila_mux_39

  # Create instance: adc_ila_mux_40
  create_hier_cell_adc_ila_mux_40 [current_bd_instance .] adc_ila_mux_40

  # Create instance: adc_ila_mux_41
  create_hier_cell_adc_ila_mux_41 [current_bd_instance .] adc_ila_mux_41

  # Create instance: adc_ila_mux_42
  create_hier_cell_adc_ila_mux_42 [current_bd_instance .] adc_ila_mux_42

  # Create instance: adc_ila_mux_43
  create_hier_cell_adc_ila_mux_43 [current_bd_instance .] adc_ila_mux_43

  # Create instance: adc_ila_mux_44
  create_hier_cell_adc_ila_mux_44 [current_bd_instance .] adc_ila_mux_44

  # Create instance: adc_ila_mux_45
  create_hier_cell_adc_ila_mux_45 [current_bd_instance .] adc_ila_mux_45

  # Create instance: adc_ila_mux_46
  create_hier_cell_adc_ila_mux_46 [current_bd_instance .] adc_ila_mux_46

  # Create instance: axi_intc_0, and set properties
  set axi_intc_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_intc:4.1 axi_intc_0 ]
  set_property -dict [ list \
   CONFIG.C_IRQ_CONNECTION {1} \
   CONFIG.C_KIND_OF_INTR {0xFFFFFFE0} \
 ] $axi_intc_0

  # Create instance: axi_interconnect_0, and set properties
  set axi_interconnect_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_interconnect_0 ]
  set_property -dict [ list \
   CONFIG.NUM_MI {14} \
   CONFIG.NUM_SI {2} \
 ] $axi_interconnect_0

  # Create instance: axi_smc, and set properties
  set axi_smc [ create_bd_cell -type ip -vlnv xilinx.com:ip:smartconnect:1.0 axi_smc ]
  set_property -dict [ list \
   CONFIG.NUM_MI {15} \
   CONFIG.NUM_SI {1} \
 ] $axi_smc

  # Create instance: axi_smc_1, and set properties
  set axi_smc_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:smartconnect:1.0 axi_smc_1 ]
  set_property -dict [ list \
   CONFIG.NUM_CLKS {1} \
   CONFIG.NUM_SI {4} \
 ] $axi_smc_1

  # Create instance: c_counter_binary_0, and set properties
  set c_counter_binary_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:c_counter_binary:12.0 c_counter_binary_0 ]
  set_property -dict [ list \
   CONFIG.CE {true} \
   CONFIG.Output_Width {128} \
 ] $c_counter_binary_0

  # Create instance: clk_wiz_0, and set properties
  set clk_wiz_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:6.0 clk_wiz_0 ]
  set_property -dict [ list \
   CONFIG.CLKIN1_JITTER_PS {78.12} \
   CONFIG.CLKOUT1_DRIVES {BUFGCE} \
   CONFIG.CLKOUT1_JITTER {106.831} \
   CONFIG.CLKOUT1_PHASE_ERROR {85.440} \
   CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {128.000} \
   CONFIG.CLKOUT2_DRIVES {BUFGCE} \
   CONFIG.CLKOUT3_DRIVES {BUFGCE} \
   CONFIG.CLKOUT4_DRIVES {BUFGCE} \
   CONFIG.CLKOUT5_DRIVES {BUFGCE} \
   CONFIG.CLKOUT6_DRIVES {BUFGCE} \
   CONFIG.CLKOUT7_DRIVES {BUFGCE} \
   CONFIG.FEEDBACK_SOURCE {FDBK_AUTO} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {9.375} \
   CONFIG.MMCM_CLKIN1_PERIOD {7.813} \
   CONFIG.MMCM_CLKOUT0_DIVIDE_F {9.375} \
   CONFIG.PRIM_IN_FREQ {128.000} \
   CONFIG.SECONDARY_SOURCE {Single_ended_clock_capable_pin} \
   CONFIG.USE_PHASE_ALIGNMENT {true} \
   CONFIG.USE_RESET {false} \
   CONFIG.USE_SAFE_CLOCK_STARTUP {true} \
 ] $clk_wiz_0

  # Create instance: hier_adc_dac_latency_0
  create_hier_cell_hier_adc_dac_latency_0 [current_bd_instance .] hier_adc_dac_latency_0

  # Create instance: hier_adc_dac_latency_1
  create_hier_cell_hier_adc_dac_latency_1 [current_bd_instance .] hier_adc_dac_latency_1

  # Create instance: hier_adc_dac_latency_2
  create_hier_cell_hier_adc_dac_latency_2 [current_bd_instance .] hier_adc_dac_latency_2

  # Create instance: hier_adc_dac_latency_3
  create_hier_cell_hier_adc_dac_latency_3 [current_bd_instance .] hier_adc_dac_latency_3

  # Create instance: hier_bram_addr_trigen_0
  create_hier_cell_hier_bram_addr_trigen_0 [current_bd_instance .] hier_bram_addr_trigen_0

  # Create instance: hier_bram_addr_trigen_1
  create_hier_cell_hier_bram_addr_trigen_1 [current_bd_instance .] hier_bram_addr_trigen_1

  # Create instance: hier_bram_addr_trigen_2
  create_hier_cell_hier_bram_addr_trigen_2 [current_bd_instance .] hier_bram_addr_trigen_2

  # Create instance: hier_bram_addr_trigen_3
  create_hier_cell_hier_bram_addr_trigen_3 [current_bd_instance .] hier_bram_addr_trigen_3

  # Create instance: hier_gaussian_width_0
  create_hier_cell_hier_gaussian_width_0 [current_bd_instance .] hier_gaussian_width_0

  # Create instance: hier_gauusian_width_1
  create_hier_cell_hier_gauusian_width_1 [current_bd_instance .] hier_gauusian_width_1

  # Create instance: hier_gauusian_width_2
  create_hier_cell_hier_gauusian_width_2 [current_bd_instance .] hier_gauusian_width_2

  # Create instance: hier_gauusian_width_3
  create_hier_cell_hier_gauusian_width_3 [current_bd_instance .] hier_gauusian_width_3

  # Create instance: hier_splitter_dac_0
  create_hier_cell_hier_splitter_dac_0 [current_bd_instance .] hier_splitter_dac_0

  # Create instance: hier_splitter_dac_1
  create_hier_cell_hier_splitter_dac_1 [current_bd_instance .] hier_splitter_dac_1

  # Create instance: hier_splitter_dac_2
  create_hier_cell_hier_splitter_dac_2 [current_bd_instance .] hier_splitter_dac_2

  # Create instance: hier_splitter_dac_3
  create_hier_cell_hier_splitter_dac_3 [current_bd_instance .] hier_splitter_dac_3

  # Create instance: hier_trig_sel
  create_hier_cell_hier_trig_sel [current_bd_instance .] hier_trig_sel

  # Create instance: hier_trig_sel1
  create_hier_cell_hier_trig_sel1 [current_bd_instance .] hier_trig_sel1

  # Create instance: hier_trig_sel2
  create_hier_cell_hier_trig_sel2 [current_bd_instance .] hier_trig_sel2

  # Create instance: hier_trig_sel3
  create_hier_cell_hier_trig_sel3 [current_bd_instance .] hier_trig_sel3

  # Create instance: hier_trig_sel4
  create_hier_cell_hier_trig_sel4 [current_bd_instance .] hier_trig_sel4

  # Create instance: hier_trig_sel5
  create_hier_cell_hier_trig_sel5 [current_bd_instance .] hier_trig_sel5

  # Create instance: hier_trig_sel6
  create_hier_cell_hier_trig_sel6 [current_bd_instance .] hier_trig_sel6

  # Create instance: hier_trig_sel7
  create_hier_cell_hier_trig_sel7 [current_bd_instance .] hier_trig_sel7

  # Create instance: hier_trigger_delay_0
  create_hier_cell_hier_trigger_delay_0 [current_bd_instance .] hier_trigger_delay_0

  # Create instance: hier_trigger_delay_1
  create_hier_cell_hier_trigger_delay_1 [current_bd_instance .] hier_trigger_delay_1

  # Create instance: hier_trigger_delay_2
  create_hier_cell_hier_trigger_delay_2 [current_bd_instance .] hier_trigger_delay_2

  # Create instance: hier_trigger_delay_3
  create_hier_cell_hier_trigger_delay_3 [current_bd_instance .] hier_trigger_delay_3

  # Create instance: hier_trigger_width_0
  create_hier_cell_hier_trigger_width_0 [current_bd_instance .] hier_trigger_width_0

  # Create instance: hier_trigger_width_1
  create_hier_cell_hier_trigger_width_1 [current_bd_instance .] hier_trigger_width_1

  # Create instance: hier_trigger_width_2
  create_hier_cell_hier_trigger_width_2 [current_bd_instance .] hier_trigger_width_2

  # Create instance: hier_trigger_width_3
  create_hier_cell_hier_trigger_width_3 [current_bd_instance .] hier_trigger_width_3

  # Create instance: iir_coeff
  create_hier_cell_iir_coeff [current_bd_instance .] iir_coeff

  # Create instance: loopback_test_sel, and set properties
  set loopback_test_sel [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 loopback_test_sel ]
  set_property -dict [ list \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_GPIO_WIDTH {1} \
 ] $loopback_test_sel

  # Create instance: param_mux_0, and set properties
  set block_name param_mux
  set block_cell_name param_mux_0
  if { [catch {set param_mux_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $param_mux_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.N {1} \
 ] $param_mux_0

  # Create instance: pl_sysref_0, and set properties
  set block_name pl_sysref
  set block_cell_name pl_sysref_0
  if { [catch {set pl_sysref_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $pl_sysref_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: rst_ps8_0_96M, and set properties
  set rst_ps8_0_96M [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 rst_ps8_0_96M ]
  set_property -dict [ list \
   CONFIG.RESET_BOARD_INTERFACE {reset} \
 ] $rst_ps8_0_96M

  # Create instance: splitter_4bit_0, and set properties
  set block_name splitter_4bit
  set block_cell_name splitter_4bit_0
  if { [catch {set splitter_4bit_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $splitter_4bit_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: splitter_dac_trigen_0, and set properties
  set block_name splitter_dac_trigen_sel
  set block_cell_name splitter_dac_trigen_0
  if { [catch {set splitter_dac_trigen_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $splitter_dac_trigen_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: splitter_trig_0, and set properties
  set block_name splitter_trig
  set block_cell_name splitter_trig_0
  if { [catch {set splitter_trig_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $splitter_trig_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: start_fifo_cap, and set properties
  set start_fifo_cap [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 start_fifo_cap ]
  set_property -dict [ list \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_GPIO_WIDTH {4} \
 ] $start_fifo_cap

  # Create instance: system_ila_1, and set properties
  set system_ila_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:system_ila:1.1 system_ila_1 ]
  set_property -dict [ list \
   CONFIG.C_BRAM_CNT {10} \
   CONFIG.C_DATA_DEPTH {4096} \
   CONFIG.C_MON_TYPE {NATIVE} \
   CONFIG.C_NUM_OF_PROBES {87} \
 ] $system_ila_1

  # Create instance: system_ila_2, and set properties
  set system_ila_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:system_ila:1.1 system_ila_2 ]
  set_property -dict [ list \
   CONFIG.ALL_PROBE_SAME_MU {true} \
   CONFIG.C_BRAM_CNT {1.5} \
   CONFIG.C_MON_TYPE {NATIVE} \
   CONFIG.C_NUM_OF_PROBES {40} \
 ] $system_ila_2

  # Create instance: trigger_gen0
  create_hier_cell_trigger_gen0 [current_bd_instance .] trigger_gen0

  # Create instance: trigger_gen1
  create_hier_cell_trigger_gen1 [current_bd_instance .] trigger_gen1

  # Create instance: trigger_gen2
  create_hier_cell_trigger_gen2 [current_bd_instance .] trigger_gen2

  # Create instance: trigger_gen3
  create_hier_cell_trigger_gen3 [current_bd_instance .] trigger_gen3

  # Create instance: trigger_valid_I_channel, and set properties
  set block_name and_gate
  set block_cell_name trigger_valid_I_channel
  if { [catch {set trigger_valid_I_channel [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $trigger_valid_I_channel eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: usp_rf_data_converter_0, and set properties
  set usp_rf_data_converter_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:usp_rf_data_converter:2.4 usp_rf_data_converter_0 ]
  set_property -dict [ list \
   CONFIG.ADC0_Enable {1} \
   CONFIG.ADC0_Fabric_Freq {128.000} \
   CONFIG.ADC0_Link_Coupling {0} \
   CONFIG.ADC0_Multi_Tile_Sync {true} \
   CONFIG.ADC0_Outclk_Freq {256.000} \
   CONFIG.ADC0_Refclk_Freq {4096.000} \
   CONFIG.ADC0_Sampling_Rate {4.096} \
   CONFIG.ADC1_Band {0} \
   CONFIG.ADC1_Enable {1} \
   CONFIG.ADC1_Fabric_Freq {128.000} \
   CONFIG.ADC1_Link_Coupling {0} \
   CONFIG.ADC1_Multi_Tile_Sync {true} \
   CONFIG.ADC1_Outclk_Freq {256.000} \
   CONFIG.ADC1_Refclk_Freq {4096.000} \
   CONFIG.ADC1_Sampling_Rate {4.096} \
   CONFIG.ADC2_Enable {1} \
   CONFIG.ADC2_Fabric_Freq {128.000} \
   CONFIG.ADC2_Multi_Tile_Sync {true} \
   CONFIG.ADC2_Outclk_Freq {256.000} \
   CONFIG.ADC2_Refclk_Freq {4096.000} \
   CONFIG.ADC2_Sampling_Rate {4.096} \
   CONFIG.ADC3_Enable {1} \
   CONFIG.ADC3_Fabric_Freq {128.000} \
   CONFIG.ADC3_Multi_Tile_Sync {true} \
   CONFIG.ADC3_Outclk_Freq {256.000} \
   CONFIG.ADC3_Refclk_Freq {4096.000} \
   CONFIG.ADC3_Sampling_Rate {4.096} \
   CONFIG.ADC_Data_Type00 {1} \
   CONFIG.ADC_Data_Type01 {1} \
   CONFIG.ADC_Data_Type02 {1} \
   CONFIG.ADC_Data_Type03 {1} \
   CONFIG.ADC_Data_Type10 {1} \
   CONFIG.ADC_Data_Type11 {1} \
   CONFIG.ADC_Data_Type12 {1} \
   CONFIG.ADC_Data_Type13 {1} \
   CONFIG.ADC_Data_Type20 {1} \
   CONFIG.ADC_Data_Type21 {1} \
   CONFIG.ADC_Data_Type22 {1} \
   CONFIG.ADC_Data_Type23 {1} \
   CONFIG.ADC_Data_Type30 {1} \
   CONFIG.ADC_Data_Type31 {1} \
   CONFIG.ADC_Data_Type32 {1} \
   CONFIG.ADC_Data_Type33 {1} \
   CONFIG.ADC_Data_Width00 {4} \
   CONFIG.ADC_Data_Width01 {4} \
   CONFIG.ADC_Data_Width02 {4} \
   CONFIG.ADC_Data_Width03 {4} \
   CONFIG.ADC_Data_Width10 {4} \
   CONFIG.ADC_Data_Width11 {4} \
   CONFIG.ADC_Data_Width12 {4} \
   CONFIG.ADC_Data_Width13 {4} \
   CONFIG.ADC_Data_Width20 {4} \
   CONFIG.ADC_Data_Width21 {4} \
   CONFIG.ADC_Data_Width22 {4} \
   CONFIG.ADC_Data_Width23 {4} \
   CONFIG.ADC_Data_Width30 {4} \
   CONFIG.ADC_Data_Width31 {4} \
   CONFIG.ADC_Data_Width32 {4} \
   CONFIG.ADC_Data_Width33 {4} \
   CONFIG.ADC_Decimation_Mode00 {8} \
   CONFIG.ADC_Decimation_Mode01 {8} \
   CONFIG.ADC_Decimation_Mode02 {8} \
   CONFIG.ADC_Decimation_Mode03 {8} \
   CONFIG.ADC_Decimation_Mode10 {8} \
   CONFIG.ADC_Decimation_Mode11 {8} \
   CONFIG.ADC_Decimation_Mode12 {8} \
   CONFIG.ADC_Decimation_Mode13 {8} \
   CONFIG.ADC_Decimation_Mode20 {8} \
   CONFIG.ADC_Decimation_Mode21 {8} \
   CONFIG.ADC_Decimation_Mode22 {8} \
   CONFIG.ADC_Decimation_Mode23 {8} \
   CONFIG.ADC_Decimation_Mode30 {8} \
   CONFIG.ADC_Decimation_Mode31 {8} \
   CONFIG.ADC_Decimation_Mode32 {8} \
   CONFIG.ADC_Decimation_Mode33 {8} \
   CONFIG.ADC_Mixer_Mode00 {0} \
   CONFIG.ADC_Mixer_Mode01 {0} \
   CONFIG.ADC_Mixer_Mode02 {0} \
   CONFIG.ADC_Mixer_Mode03 {0} \
   CONFIG.ADC_Mixer_Mode10 {0} \
   CONFIG.ADC_Mixer_Mode11 {0} \
   CONFIG.ADC_Mixer_Mode12 {0} \
   CONFIG.ADC_Mixer_Mode13 {0} \
   CONFIG.ADC_Mixer_Mode20 {0} \
   CONFIG.ADC_Mixer_Mode21 {0} \
   CONFIG.ADC_Mixer_Mode22 {0} \
   CONFIG.ADC_Mixer_Mode23 {0} \
   CONFIG.ADC_Mixer_Mode30 {0} \
   CONFIG.ADC_Mixer_Mode31 {0} \
   CONFIG.ADC_Mixer_Mode32 {0} \
   CONFIG.ADC_Mixer_Mode33 {0} \
   CONFIG.ADC_Mixer_Type00 {2} \
   CONFIG.ADC_Mixer_Type01 {2} \
   CONFIG.ADC_Mixer_Type02 {2} \
   CONFIG.ADC_Mixer_Type03 {2} \
   CONFIG.ADC_Mixer_Type10 {2} \
   CONFIG.ADC_Mixer_Type11 {2} \
   CONFIG.ADC_Mixer_Type12 {2} \
   CONFIG.ADC_Mixer_Type13 {2} \
   CONFIG.ADC_Mixer_Type20 {2} \
   CONFIG.ADC_Mixer_Type21 {2} \
   CONFIG.ADC_Mixer_Type22 {2} \
   CONFIG.ADC_Mixer_Type23 {2} \
   CONFIG.ADC_Mixer_Type30 {2} \
   CONFIG.ADC_Mixer_Type31 {2} \
   CONFIG.ADC_Mixer_Type32 {2} \
   CONFIG.ADC_Mixer_Type33 {2} \
   CONFIG.ADC_NCO_Freq00 {0.1} \
   CONFIG.ADC_NCO_Freq02 {0.1} \
   CONFIG.ADC_NCO_Freq10 {0.1} \
   CONFIG.ADC_NCO_Freq12 {0.1} \
   CONFIG.ADC_NCO_Freq20 {0.1} \
   CONFIG.ADC_NCO_Freq22 {0.1} \
   CONFIG.ADC_NCO_Freq30 {0.1} \
   CONFIG.ADC_NCO_Freq32 {0.1} \
   CONFIG.ADC_OBS02 {false} \
   CONFIG.ADC_OBS12 {false} \
   CONFIG.ADC_OBS22 {false} \
   CONFIG.ADC_OBS32 {false} \
   CONFIG.ADC_RESERVED_1_00 {false} \
   CONFIG.ADC_RESERVED_1_02 {false} \
   CONFIG.ADC_RESERVED_1_10 {false} \
   CONFIG.ADC_RESERVED_1_12 {false} \
   CONFIG.ADC_RESERVED_1_20 {false} \
   CONFIG.ADC_RESERVED_1_22 {false} \
   CONFIG.ADC_RESERVED_1_30 {false} \
   CONFIG.ADC_RESERVED_1_32 {false} \
   CONFIG.ADC_Slice00_Enable {true} \
   CONFIG.ADC_Slice01_Enable {true} \
   CONFIG.ADC_Slice02_Enable {true} \
   CONFIG.ADC_Slice03_Enable {true} \
   CONFIG.ADC_Slice10_Enable {true} \
   CONFIG.ADC_Slice11_Enable {true} \
   CONFIG.ADC_Slice12_Enable {true} \
   CONFIG.ADC_Slice13_Enable {true} \
   CONFIG.ADC_Slice20_Enable {true} \
   CONFIG.ADC_Slice21_Enable {true} \
   CONFIG.ADC_Slice22_Enable {true} \
   CONFIG.ADC_Slice23_Enable {true} \
   CONFIG.ADC_Slice30_Enable {true} \
   CONFIG.ADC_Slice31_Enable {true} \
   CONFIG.ADC_Slice32_Enable {true} \
   CONFIG.ADC_Slice33_Enable {true} \
   CONFIG.Axiclk_Freq {128} \
   CONFIG.DAC0_Enable {1} \
   CONFIG.DAC0_Fabric_Freq {128.000} \
   CONFIG.DAC0_Multi_Tile_Sync {true} \
   CONFIG.DAC0_Outclk_Freq {256.000} \
   CONFIG.DAC0_Refclk_Freq {4096.000} \
   CONFIG.DAC0_Sampling_Rate {4.096} \
   CONFIG.DAC1_Enable {1} \
   CONFIG.DAC1_Fabric_Freq {128.000} \
   CONFIG.DAC1_Multi_Tile_Sync {true} \
   CONFIG.DAC1_Outclk_Freq {256.000} \
   CONFIG.DAC1_Refclk_Freq {4096.000} \
   CONFIG.DAC1_Sampling_Rate {4.096} \
   CONFIG.DAC_Data_Type12 {0} \
   CONFIG.DAC_Data_Type13 {0} \
   CONFIG.DAC_Data_Width00 {8} \
   CONFIG.DAC_Data_Width01 {8} \
   CONFIG.DAC_Data_Width02 {8} \
   CONFIG.DAC_Data_Width03 {8} \
   CONFIG.DAC_Data_Width10 {8} \
   CONFIG.DAC_Data_Width11 {8} \
   CONFIG.DAC_Data_Width12 {8} \
   CONFIG.DAC_Data_Width13 {8} \
   CONFIG.DAC_Interpolation_Mode00 {8} \
   CONFIG.DAC_Interpolation_Mode01 {8} \
   CONFIG.DAC_Interpolation_Mode02 {8} \
   CONFIG.DAC_Interpolation_Mode03 {8} \
   CONFIG.DAC_Interpolation_Mode10 {8} \
   CONFIG.DAC_Interpolation_Mode11 {8} \
   CONFIG.DAC_Interpolation_Mode12 {8} \
   CONFIG.DAC_Interpolation_Mode13 {8} \
   CONFIG.DAC_Invsinc_Ctrl12 {false} \
   CONFIG.DAC_Mixer_Mode00 {0} \
   CONFIG.DAC_Mixer_Mode01 {0} \
   CONFIG.DAC_Mixer_Mode02 {0} \
   CONFIG.DAC_Mixer_Mode03 {0} \
   CONFIG.DAC_Mixer_Mode10 {0} \
   CONFIG.DAC_Mixer_Mode11 {0} \
   CONFIG.DAC_Mixer_Mode12 {0} \
   CONFIG.DAC_Mixer_Mode13 {0} \
   CONFIG.DAC_Mixer_Type00 {2} \
   CONFIG.DAC_Mixer_Type01 {2} \
   CONFIG.DAC_Mixer_Type02 {2} \
   CONFIG.DAC_Mixer_Type03 {2} \
   CONFIG.DAC_Mixer_Type10 {2} \
   CONFIG.DAC_Mixer_Type11 {2} \
   CONFIG.DAC_Mixer_Type12 {2} \
   CONFIG.DAC_Mixer_Type13 {2} \
   CONFIG.DAC_NCO_Freq00 {0.1} \
   CONFIG.DAC_NCO_Freq01 {0.1} \
   CONFIG.DAC_NCO_Freq02 {0.1} \
   CONFIG.DAC_NCO_Freq03 {0.1} \
   CONFIG.DAC_NCO_Freq10 {0.1} \
   CONFIG.DAC_NCO_Freq11 {0.1} \
   CONFIG.DAC_NCO_Freq12 {0.1} \
   CONFIG.DAC_NCO_Freq13 {0.1} \
   CONFIG.DAC_NCO_RTS {false} \
   CONFIG.DAC_Nyquist12 {0} \
   CONFIG.DAC_Nyquist13 {0} \
   CONFIG.DAC_RESERVED_1_00 {false} \
   CONFIG.DAC_RESERVED_1_01 {false} \
   CONFIG.DAC_RESERVED_1_02 {false} \
   CONFIG.DAC_RESERVED_1_03 {false} \
   CONFIG.DAC_RESERVED_1_10 {false} \
   CONFIG.DAC_RESERVED_1_11 {false} \
   CONFIG.DAC_RESERVED_1_12 {false} \
   CONFIG.DAC_RESERVED_1_13 {false} \
   CONFIG.DAC_Slice00_Enable {true} \
   CONFIG.DAC_Slice01_Enable {true} \
   CONFIG.DAC_Slice02_Enable {true} \
   CONFIG.DAC_Slice03_Enable {true} \
   CONFIG.DAC_Slice10_Enable {true} \
   CONFIG.DAC_Slice11_Enable {true} \
   CONFIG.DAC_Slice12_Enable {true} \
   CONFIG.DAC_Slice13_Enable {true} \
 ] $usp_rf_data_converter_0

  # Create instance: util_ds_buf_0, and set properties
  set util_ds_buf_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf:2.1 util_ds_buf_0 ]

  # Create instance: xlconcat_0, and set properties
  set xlconcat_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 xlconcat_0 ]
  set_property -dict [ list \
   CONFIG.NUM_PORTS {1} \
 ] $xlconcat_0

  # Create instance: xlconcat_2, and set properties
  set xlconcat_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 xlconcat_2 ]
  set_property -dict [ list \
   CONFIG.NUM_PORTS {5} \
 ] $xlconcat_2

  # Create instance: xlconstant_6, and set properties
  set xlconstant_6 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_6 ]

  # Create instance: xlslice_0, and set properties
  set xlslice_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_0 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {472} \
   CONFIG.DIN_TO {472} \
   CONFIG.DIN_WIDTH {512} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_0

  # Create instance: xlslice_1, and set properties
  set xlslice_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 xlslice_1 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {473} \
   CONFIG.DIN_TO {473} \
   CONFIG.DIN_WIDTH {512} \
   CONFIG.DOUT_WIDTH {1} \
 ] $xlslice_1

  # Create instance: zynq_ultra_ps_e_0, and set properties
  set zynq_ultra_ps_e_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:zynq_ultra_ps_e:3.3 zynq_ultra_ps_e_0 ]
  set_property -dict [ list \
   CONFIG.CAN0_BOARD_INTERFACE {custom} \
   CONFIG.CAN1_BOARD_INTERFACE {custom} \
   CONFIG.CSU_BOARD_INTERFACE {custom} \
   CONFIG.DP_BOARD_INTERFACE {custom} \
   CONFIG.GEM0_BOARD_INTERFACE {custom} \
   CONFIG.GEM1_BOARD_INTERFACE {custom} \
   CONFIG.GEM2_BOARD_INTERFACE {custom} \
   CONFIG.GEM3_BOARD_INTERFACE {custom} \
   CONFIG.GPIO_BOARD_INTERFACE {custom} \
   CONFIG.IIC0_BOARD_INTERFACE {custom} \
   CONFIG.IIC1_BOARD_INTERFACE {custom} \
   CONFIG.NAND_BOARD_INTERFACE {custom} \
   CONFIG.PCIE_BOARD_INTERFACE {custom} \
   CONFIG.PJTAG_BOARD_INTERFACE {custom} \
   CONFIG.PMU_BOARD_INTERFACE {custom} \
   CONFIG.PSU_BANK_0_IO_STANDARD {LVCMOS33} \
   CONFIG.PSU_BANK_1_IO_STANDARD {LVCMOS33} \
   CONFIG.PSU_BANK_2_IO_STANDARD {LVCMOS33} \
   CONFIG.PSU_BANK_3_IO_STANDARD {LVCMOS33} \
   CONFIG.PSU_DDR_RAM_HIGHADDR {0x7FFFFFFF} \
   CONFIG.PSU_DDR_RAM_HIGHADDR_OFFSET {0x00000002} \
   CONFIG.PSU_DDR_RAM_LOWADDR_OFFSET {0x80000000} \
   CONFIG.PSU_DYNAMIC_DDR_CONFIG_EN {0} \
   CONFIG.PSU_IMPORT_BOARD_PRESET {} \
   CONFIG.PSU_MIO_0_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_0_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_0_POLARITY {Default} \
   CONFIG.PSU_MIO_0_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_0_SLEW {fast} \
   CONFIG.PSU_MIO_10_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_10_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_10_POLARITY {Default} \
   CONFIG.PSU_MIO_10_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_10_SLEW {fast} \
   CONFIG.PSU_MIO_11_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_11_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_11_POLARITY {Default} \
   CONFIG.PSU_MIO_11_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_11_SLEW {fast} \
   CONFIG.PSU_MIO_12_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_12_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_12_POLARITY {Default} \
   CONFIG.PSU_MIO_12_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_12_SLEW {fast} \
   CONFIG.PSU_MIO_13_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_13_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_13_POLARITY {Default} \
   CONFIG.PSU_MIO_13_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_13_SLEW {fast} \
   CONFIG.PSU_MIO_14_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_14_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_14_POLARITY {Default} \
   CONFIG.PSU_MIO_14_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_14_SLEW {fast} \
   CONFIG.PSU_MIO_15_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_15_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_15_POLARITY {Default} \
   CONFIG.PSU_MIO_15_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_15_SLEW {fast} \
   CONFIG.PSU_MIO_16_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_16_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_16_POLARITY {Default} \
   CONFIG.PSU_MIO_16_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_16_SLEW {fast} \
   CONFIG.PSU_MIO_17_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_17_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_17_POLARITY {Default} \
   CONFIG.PSU_MIO_17_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_17_SLEW {fast} \
   CONFIG.PSU_MIO_18_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_18_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_18_POLARITY {Default} \
   CONFIG.PSU_MIO_18_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_18_SLEW {fast} \
   CONFIG.PSU_MIO_19_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_19_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_19_POLARITY {Default} \
   CONFIG.PSU_MIO_19_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_19_SLEW {fast} \
   CONFIG.PSU_MIO_1_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_1_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_1_POLARITY {Default} \
   CONFIG.PSU_MIO_1_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_1_SLEW {fast} \
   CONFIG.PSU_MIO_20_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_20_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_20_POLARITY {Default} \
   CONFIG.PSU_MIO_20_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_20_SLEW {fast} \
   CONFIG.PSU_MIO_21_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_21_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_21_POLARITY {Default} \
   CONFIG.PSU_MIO_21_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_21_SLEW {fast} \
   CONFIG.PSU_MIO_22_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_22_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_22_POLARITY {Default} \
   CONFIG.PSU_MIO_22_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_22_SLEW {fast} \
   CONFIG.PSU_MIO_23_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_23_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_23_POLARITY {Default} \
   CONFIG.PSU_MIO_23_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_23_SLEW {fast} \
   CONFIG.PSU_MIO_24_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_24_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_24_POLARITY {Default} \
   CONFIG.PSU_MIO_24_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_24_SLEW {fast} \
   CONFIG.PSU_MIO_25_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_25_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_25_POLARITY {Default} \
   CONFIG.PSU_MIO_25_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_25_SLEW {fast} \
   CONFIG.PSU_MIO_26_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_26_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_26_POLARITY {Default} \
   CONFIG.PSU_MIO_26_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_26_SLEW {fast} \
   CONFIG.PSU_MIO_27_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_27_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_27_POLARITY {Default} \
   CONFIG.PSU_MIO_27_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_27_SLEW {fast} \
   CONFIG.PSU_MIO_28_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_28_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_28_POLARITY {Default} \
   CONFIG.PSU_MIO_28_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_28_SLEW {fast} \
   CONFIG.PSU_MIO_29_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_29_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_29_POLARITY {Default} \
   CONFIG.PSU_MIO_29_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_29_SLEW {fast} \
   CONFIG.PSU_MIO_2_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_2_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_2_POLARITY {Default} \
   CONFIG.PSU_MIO_2_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_2_SLEW {fast} \
   CONFIG.PSU_MIO_30_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_30_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_30_POLARITY {Default} \
   CONFIG.PSU_MIO_30_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_30_SLEW {fast} \
   CONFIG.PSU_MIO_31_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_31_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_31_POLARITY {Default} \
   CONFIG.PSU_MIO_31_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_31_SLEW {fast} \
   CONFIG.PSU_MIO_32_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_32_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_32_POLARITY {Default} \
   CONFIG.PSU_MIO_32_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_32_SLEW {fast} \
   CONFIG.PSU_MIO_33_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_33_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_33_POLARITY {Default} \
   CONFIG.PSU_MIO_33_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_33_SLEW {fast} \
   CONFIG.PSU_MIO_34_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_34_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_34_POLARITY {Default} \
   CONFIG.PSU_MIO_34_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_34_SLEW {fast} \
   CONFIG.PSU_MIO_35_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_35_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_35_POLARITY {Default} \
   CONFIG.PSU_MIO_35_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_35_SLEW {fast} \
   CONFIG.PSU_MIO_36_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_36_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_36_POLARITY {Default} \
   CONFIG.PSU_MIO_36_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_36_SLEW {fast} \
   CONFIG.PSU_MIO_37_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_37_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_37_POLARITY {Default} \
   CONFIG.PSU_MIO_37_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_37_SLEW {fast} \
   CONFIG.PSU_MIO_38_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_38_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_38_POLARITY {Default} \
   CONFIG.PSU_MIO_38_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_38_SLEW {fast} \
   CONFIG.PSU_MIO_39_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_39_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_39_POLARITY {Default} \
   CONFIG.PSU_MIO_39_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_39_SLEW {fast} \
   CONFIG.PSU_MIO_3_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_3_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_3_POLARITY {Default} \
   CONFIG.PSU_MIO_3_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_3_SLEW {fast} \
   CONFIG.PSU_MIO_40_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_40_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_40_POLARITY {Default} \
   CONFIG.PSU_MIO_40_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_40_SLEW {fast} \
   CONFIG.PSU_MIO_41_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_41_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_41_POLARITY {Default} \
   CONFIG.PSU_MIO_41_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_41_SLEW {fast} \
   CONFIG.PSU_MIO_42_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_42_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_42_POLARITY {Default} \
   CONFIG.PSU_MIO_42_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_42_SLEW {fast} \
   CONFIG.PSU_MIO_43_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_43_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_43_POLARITY {Default} \
   CONFIG.PSU_MIO_43_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_43_SLEW {fast} \
   CONFIG.PSU_MIO_44_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_44_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_44_POLARITY {Default} \
   CONFIG.PSU_MIO_44_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_44_SLEW {fast} \
   CONFIG.PSU_MIO_45_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_45_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_45_POLARITY {Default} \
   CONFIG.PSU_MIO_45_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_45_SLEW {fast} \
   CONFIG.PSU_MIO_46_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_46_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_46_POLARITY {Default} \
   CONFIG.PSU_MIO_46_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_46_SLEW {fast} \
   CONFIG.PSU_MIO_47_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_47_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_47_POLARITY {Default} \
   CONFIG.PSU_MIO_47_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_47_SLEW {fast} \
   CONFIG.PSU_MIO_48_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_48_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_48_POLARITY {Default} \
   CONFIG.PSU_MIO_48_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_48_SLEW {fast} \
   CONFIG.PSU_MIO_49_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_49_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_49_POLARITY {Default} \
   CONFIG.PSU_MIO_49_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_49_SLEW {fast} \
   CONFIG.PSU_MIO_4_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_4_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_4_POLARITY {Default} \
   CONFIG.PSU_MIO_4_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_4_SLEW {fast} \
   CONFIG.PSU_MIO_50_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_50_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_50_POLARITY {Default} \
   CONFIG.PSU_MIO_50_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_50_SLEW {fast} \
   CONFIG.PSU_MIO_51_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_51_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_51_POLARITY {Default} \
   CONFIG.PSU_MIO_51_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_51_SLEW {fast} \
   CONFIG.PSU_MIO_52_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_52_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_52_POLARITY {Default} \
   CONFIG.PSU_MIO_52_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_52_SLEW {fast} \
   CONFIG.PSU_MIO_53_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_53_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_53_POLARITY {Default} \
   CONFIG.PSU_MIO_53_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_53_SLEW {fast} \
   CONFIG.PSU_MIO_54_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_54_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_54_POLARITY {Default} \
   CONFIG.PSU_MIO_54_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_54_SLEW {fast} \
   CONFIG.PSU_MIO_55_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_55_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_55_POLARITY {Default} \
   CONFIG.PSU_MIO_55_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_55_SLEW {fast} \
   CONFIG.PSU_MIO_56_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_56_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_56_POLARITY {Default} \
   CONFIG.PSU_MIO_56_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_56_SLEW {fast} \
   CONFIG.PSU_MIO_57_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_57_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_57_POLARITY {Default} \
   CONFIG.PSU_MIO_57_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_57_SLEW {fast} \
   CONFIG.PSU_MIO_58_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_58_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_58_POLARITY {Default} \
   CONFIG.PSU_MIO_58_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_58_SLEW {fast} \
   CONFIG.PSU_MIO_59_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_59_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_59_POLARITY {Default} \
   CONFIG.PSU_MIO_59_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_59_SLEW {fast} \
   CONFIG.PSU_MIO_5_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_5_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_5_POLARITY {Default} \
   CONFIG.PSU_MIO_5_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_5_SLEW {fast} \
   CONFIG.PSU_MIO_60_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_60_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_60_POLARITY {Default} \
   CONFIG.PSU_MIO_60_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_60_SLEW {fast} \
   CONFIG.PSU_MIO_61_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_61_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_61_POLARITY {Default} \
   CONFIG.PSU_MIO_61_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_61_SLEW {fast} \
   CONFIG.PSU_MIO_62_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_62_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_62_POLARITY {Default} \
   CONFIG.PSU_MIO_62_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_62_SLEW {fast} \
   CONFIG.PSU_MIO_63_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_63_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_63_POLARITY {Default} \
   CONFIG.PSU_MIO_63_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_63_SLEW {fast} \
   CONFIG.PSU_MIO_64_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_64_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_64_POLARITY {Default} \
   CONFIG.PSU_MIO_64_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_64_SLEW {fast} \
   CONFIG.PSU_MIO_65_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_65_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_65_POLARITY {Default} \
   CONFIG.PSU_MIO_65_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_65_SLEW {fast} \
   CONFIG.PSU_MIO_66_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_66_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_66_POLARITY {Default} \
   CONFIG.PSU_MIO_66_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_66_SLEW {fast} \
   CONFIG.PSU_MIO_67_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_67_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_67_POLARITY {Default} \
   CONFIG.PSU_MIO_67_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_67_SLEW {fast} \
   CONFIG.PSU_MIO_68_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_68_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_68_POLARITY {Default} \
   CONFIG.PSU_MIO_68_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_68_SLEW {fast} \
   CONFIG.PSU_MIO_69_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_69_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_69_POLARITY {Default} \
   CONFIG.PSU_MIO_69_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_69_SLEW {fast} \
   CONFIG.PSU_MIO_6_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_6_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_6_POLARITY {Default} \
   CONFIG.PSU_MIO_6_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_6_SLEW {fast} \
   CONFIG.PSU_MIO_70_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_70_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_70_POLARITY {Default} \
   CONFIG.PSU_MIO_70_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_70_SLEW {fast} \
   CONFIG.PSU_MIO_71_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_71_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_71_POLARITY {Default} \
   CONFIG.PSU_MIO_71_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_71_SLEW {fast} \
   CONFIG.PSU_MIO_72_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_72_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_72_POLARITY {Default} \
   CONFIG.PSU_MIO_72_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_72_SLEW {fast} \
   CONFIG.PSU_MIO_73_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_73_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_73_POLARITY {Default} \
   CONFIG.PSU_MIO_73_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_73_SLEW {fast} \
   CONFIG.PSU_MIO_74_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_74_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_74_POLARITY {Default} \
   CONFIG.PSU_MIO_74_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_74_SLEW {fast} \
   CONFIG.PSU_MIO_75_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_75_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_75_POLARITY {Default} \
   CONFIG.PSU_MIO_75_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_75_SLEW {fast} \
   CONFIG.PSU_MIO_76_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_76_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_76_POLARITY {Default} \
   CONFIG.PSU_MIO_76_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_76_SLEW {fast} \
   CONFIG.PSU_MIO_77_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_77_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_77_POLARITY {Default} \
   CONFIG.PSU_MIO_77_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_77_SLEW {fast} \
   CONFIG.PSU_MIO_7_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_7_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_7_POLARITY {Default} \
   CONFIG.PSU_MIO_7_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_7_SLEW {fast} \
   CONFIG.PSU_MIO_8_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_8_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_8_POLARITY {Default} \
   CONFIG.PSU_MIO_8_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_8_SLEW {fast} \
   CONFIG.PSU_MIO_9_DRIVE_STRENGTH {12} \
   CONFIG.PSU_MIO_9_INPUT_TYPE {cmos} \
   CONFIG.PSU_MIO_9_POLARITY {Default} \
   CONFIG.PSU_MIO_9_PULLUPDOWN {pullup} \
   CONFIG.PSU_MIO_9_SLEW {fast} \
   CONFIG.PSU_MIO_TREE_PERIPHERALS {} \
   CONFIG.PSU_MIO_TREE_SIGNALS {} \
   CONFIG.PSU_PERIPHERAL_BOARD_PRESET {} \
   CONFIG.PSU_SD0_INTERNAL_BUS_WIDTH {8} \
   CONFIG.PSU_SD1_INTERNAL_BUS_WIDTH {8} \
   CONFIG.PSU_SMC_CYCLE_T0 {NA} \
   CONFIG.PSU_SMC_CYCLE_T1 {NA} \
   CONFIG.PSU_SMC_CYCLE_T2 {NA} \
   CONFIG.PSU_SMC_CYCLE_T3 {NA} \
   CONFIG.PSU_SMC_CYCLE_T4 {NA} \
   CONFIG.PSU_SMC_CYCLE_T5 {NA} \
   CONFIG.PSU_SMC_CYCLE_T6 {NA} \
   CONFIG.PSU_USB3__DUAL_CLOCK_ENABLE {0} \
   CONFIG.PSU_VALUE_SILVERSION {3} \
   CONFIG.PSU__ACPU0__POWER__ON {1} \
   CONFIG.PSU__ACPU1__POWER__ON {1} \
   CONFIG.PSU__ACPU2__POWER__ON {1} \
   CONFIG.PSU__ACPU3__POWER__ON {1} \
   CONFIG.PSU__ACTUAL__IP {1} \
   CONFIG.PSU__ACT_DDR_FREQ_MHZ {766.658997} \
   CONFIG.PSU__AFI0_COHERENCY {0} \
   CONFIG.PSU__AFI1_COHERENCY {0} \
   CONFIG.PSU__AUX_REF_CLK__FREQMHZ {33.333} \
   CONFIG.PSU__CAN0_LOOP_CAN1__ENABLE {0} \
   CONFIG.PSU__CAN0__GRP_CLK__ENABLE {0} \
   CONFIG.PSU__CAN0__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__CAN1__GRP_CLK__ENABLE {0} \
   CONFIG.PSU__CAN1__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__CRF_APB__ACPU_CTRL__ACT_FREQMHZ {1333.320068} \
   CONFIG.PSU__CRF_APB__ACPU_CTRL__DIVISOR0 {1} \
   CONFIG.PSU__CRF_APB__ACPU_CTRL__FREQMHZ {1333.333} \
   CONFIG.PSU__CRF_APB__ACPU_CTRL__SRCSEL {APLL} \
   CONFIG.PSU__CRF_APB__ACPU__FRAC_ENABLED {0} \
   CONFIG.PSU__CRF_APB__AFI0_REF_CTRL__ACT_FREQMHZ {667} \
   CONFIG.PSU__CRF_APB__AFI0_REF_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__AFI0_REF_CTRL__FREQMHZ {667} \
   CONFIG.PSU__CRF_APB__AFI0_REF_CTRL__SRCSEL {DPLL} \
   CONFIG.PSU__CRF_APB__AFI0_REF__ENABLE {0} \
   CONFIG.PSU__CRF_APB__AFI1_REF_CTRL__ACT_FREQMHZ {667} \
   CONFIG.PSU__CRF_APB__AFI1_REF_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__AFI1_REF_CTRL__FREQMHZ {667} \
   CONFIG.PSU__CRF_APB__AFI1_REF_CTRL__SRCSEL {DPLL} \
   CONFIG.PSU__CRF_APB__AFI1_REF__ENABLE {0} \
   CONFIG.PSU__CRF_APB__AFI2_REF_CTRL__ACT_FREQMHZ {667} \
   CONFIG.PSU__CRF_APB__AFI2_REF_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__AFI2_REF_CTRL__FREQMHZ {667} \
   CONFIG.PSU__CRF_APB__AFI2_REF_CTRL__SRCSEL {DPLL} \
   CONFIG.PSU__CRF_APB__AFI2_REF__ENABLE {0} \
   CONFIG.PSU__CRF_APB__AFI3_REF_CTRL__ACT_FREQMHZ {667} \
   CONFIG.PSU__CRF_APB__AFI3_REF_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__AFI3_REF_CTRL__FREQMHZ {667} \
   CONFIG.PSU__CRF_APB__AFI3_REF_CTRL__SRCSEL {DPLL} \
   CONFIG.PSU__CRF_APB__AFI3_REF__ENABLE {0} \
   CONFIG.PSU__CRF_APB__AFI4_REF_CTRL__ACT_FREQMHZ {667} \
   CONFIG.PSU__CRF_APB__AFI4_REF_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__AFI4_REF_CTRL__FREQMHZ {667} \
   CONFIG.PSU__CRF_APB__AFI4_REF_CTRL__SRCSEL {DPLL} \
   CONFIG.PSU__CRF_APB__AFI4_REF__ENABLE {0} \
   CONFIG.PSU__CRF_APB__AFI5_REF_CTRL__ACT_FREQMHZ {667} \
   CONFIG.PSU__CRF_APB__AFI5_REF_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__AFI5_REF_CTRL__FREQMHZ {667} \
   CONFIG.PSU__CRF_APB__AFI5_REF_CTRL__SRCSEL {DPLL} \
   CONFIG.PSU__CRF_APB__AFI5_REF__ENABLE {0} \
   CONFIG.PSU__CRF_APB__APLL_CTRL__DIV2 {1} \
   CONFIG.PSU__CRF_APB__APLL_CTRL__FBDIV {80} \
   CONFIG.PSU__CRF_APB__APLL_CTRL__FRACDATA {0.000000} \
   CONFIG.PSU__CRF_APB__APLL_CTRL__FRACFREQ {27.138} \
   CONFIG.PSU__CRF_APB__APLL_CTRL__SRCSEL {PSS_REF_CLK} \
   CONFIG.PSU__CRF_APB__APLL_FRAC_CFG__ENABLED {0} \
   CONFIG.PSU__CRF_APB__APLL_TO_LPD_CTRL__DIVISOR0 {3} \
   CONFIG.PSU__CRF_APB__APM_CTRL__ACT_FREQMHZ {1} \
   CONFIG.PSU__CRF_APB__APM_CTRL__DIVISOR0 {1} \
   CONFIG.PSU__CRF_APB__APM_CTRL__FREQMHZ {1} \
   CONFIG.PSU__CRF_APB__DBG_FPD_CTRL__ACT_FREQMHZ {249.997498} \
   CONFIG.PSU__CRF_APB__DBG_FPD_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__DBG_FPD_CTRL__FREQMHZ {250} \
   CONFIG.PSU__CRF_APB__DBG_FPD_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRF_APB__DBG_TRACE_CTRL__ACT_FREQMHZ {250} \
   CONFIG.PSU__CRF_APB__DBG_TRACE_CTRL__DIVISOR0 {5} \
   CONFIG.PSU__CRF_APB__DBG_TRACE_CTRL__FREQMHZ {250} \
   CONFIG.PSU__CRF_APB__DBG_TRACE_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRF_APB__DBG_TSTMP_CTRL__ACT_FREQMHZ {249.997498} \
   CONFIG.PSU__CRF_APB__DBG_TSTMP_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__DBG_TSTMP_CTRL__FREQMHZ {250} \
   CONFIG.PSU__CRF_APB__DBG_TSTMP_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRF_APB__DDR_CTRL__ACT_FREQMHZ {383.329498} \
   CONFIG.PSU__CRF_APB__DDR_CTRL__DIVISOR0 {3} \
   CONFIG.PSU__CRF_APB__DDR_CTRL__FREQMHZ {800} \
   CONFIG.PSU__CRF_APB__DDR_CTRL__SRCSEL {DPLL} \
   CONFIG.PSU__CRF_APB__DPDMA_REF_CTRL__ACT_FREQMHZ {574.994263} \
   CONFIG.PSU__CRF_APB__DPDMA_REF_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__DPDMA_REF_CTRL__FREQMHZ {600} \
   CONFIG.PSU__CRF_APB__DPDMA_REF_CTRL__SRCSEL {DPLL} \
   CONFIG.PSU__CRF_APB__DPLL_CTRL__DIV2 {1} \
   CONFIG.PSU__CRF_APB__DPLL_CTRL__FBDIV {69} \
   CONFIG.PSU__CRF_APB__DPLL_CTRL__FRACDATA {0.000000} \
   CONFIG.PSU__CRF_APB__DPLL_CTRL__FRACFREQ {27.138} \
   CONFIG.PSU__CRF_APB__DPLL_CTRL__SRCSEL {PSS_REF_CLK} \
   CONFIG.PSU__CRF_APB__DPLL_FRAC_CFG__ENABLED {0} \
   CONFIG.PSU__CRF_APB__DPLL_TO_LPD_CTRL__DIVISOR0 {3} \
   CONFIG.PSU__CRF_APB__DP_AUDIO_REF_CTRL__ACT_FREQMHZ {25} \
   CONFIG.PSU__CRF_APB__DP_AUDIO_REF_CTRL__DIVISOR0 {63} \
   CONFIG.PSU__CRF_APB__DP_AUDIO_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRF_APB__DP_AUDIO_REF_CTRL__FREQMHZ {25} \
   CONFIG.PSU__CRF_APB__DP_AUDIO_REF_CTRL__SRCSEL {VPLL} \
   CONFIG.PSU__CRF_APB__DP_AUDIO__FRAC_ENABLED {0} \
   CONFIG.PSU__CRF_APB__DP_STC_REF_CTRL__ACT_FREQMHZ {27} \
   CONFIG.PSU__CRF_APB__DP_STC_REF_CTRL__DIVISOR0 {6} \
   CONFIG.PSU__CRF_APB__DP_STC_REF_CTRL__DIVISOR1 {10} \
   CONFIG.PSU__CRF_APB__DP_STC_REF_CTRL__FREQMHZ {27} \
   CONFIG.PSU__CRF_APB__DP_STC_REF_CTRL__SRCSEL {VPLL} \
   CONFIG.PSU__CRF_APB__DP_VIDEO_REF_CTRL__ACT_FREQMHZ {320} \
   CONFIG.PSU__CRF_APB__DP_VIDEO_REF_CTRL__DIVISOR0 {5} \
   CONFIG.PSU__CRF_APB__DP_VIDEO_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRF_APB__DP_VIDEO_REF_CTRL__FREQMHZ {300} \
   CONFIG.PSU__CRF_APB__DP_VIDEO_REF_CTRL__SRCSEL {DPLL} \
   CONFIG.PSU__CRF_APB__DP_VIDEO__FRAC_ENABLED {0} \
   CONFIG.PSU__CRF_APB__GDMA_REF_CTRL__ACT_FREQMHZ {574.994263} \
   CONFIG.PSU__CRF_APB__GDMA_REF_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__GDMA_REF_CTRL__FREQMHZ {600} \
   CONFIG.PSU__CRF_APB__GDMA_REF_CTRL__SRCSEL {DPLL} \
   CONFIG.PSU__CRF_APB__GPU_REF_CTRL__ACT_FREQMHZ {0} \
   CONFIG.PSU__CRF_APB__GPU_REF_CTRL__DIVISOR0 {3} \
   CONFIG.PSU__CRF_APB__GPU_REF_CTRL__FREQMHZ {600} \
   CONFIG.PSU__CRF_APB__GPU_REF_CTRL__SRCSEL {DPLL} \
   CONFIG.PSU__CRF_APB__GTGREF0_REF_CTRL__ACT_FREQMHZ {-1} \
   CONFIG.PSU__CRF_APB__GTGREF0_REF_CTRL__DIVISOR0 {-1} \
   CONFIG.PSU__CRF_APB__GTGREF0_REF_CTRL__FREQMHZ {-1} \
   CONFIG.PSU__CRF_APB__GTGREF0_REF_CTRL__SRCSEL {NA} \
   CONFIG.PSU__CRF_APB__GTGREF0__ENABLE {NA} \
   CONFIG.PSU__CRF_APB__PCIE_REF_CTRL__ACT_FREQMHZ {250} \
   CONFIG.PSU__CRF_APB__PCIE_REF_CTRL__DIVISOR0 {6} \
   CONFIG.PSU__CRF_APB__PCIE_REF_CTRL__FREQMHZ {250} \
   CONFIG.PSU__CRF_APB__PCIE_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRF_APB__SATA_REF_CTRL__ACT_FREQMHZ {250} \
   CONFIG.PSU__CRF_APB__SATA_REF_CTRL__DIVISOR0 {5} \
   CONFIG.PSU__CRF_APB__SATA_REF_CTRL__FREQMHZ {250} \
   CONFIG.PSU__CRF_APB__SATA_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRF_APB__TOPSW_LSBUS_CTRL__ACT_FREQMHZ {99.999001} \
   CONFIG.PSU__CRF_APB__TOPSW_LSBUS_CTRL__DIVISOR0 {5} \
   CONFIG.PSU__CRF_APB__TOPSW_LSBUS_CTRL__FREQMHZ {100} \
   CONFIG.PSU__CRF_APB__TOPSW_LSBUS_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRF_APB__TOPSW_MAIN_CTRL__ACT_FREQMHZ {533.328003} \
   CONFIG.PSU__CRF_APB__TOPSW_MAIN_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRF_APB__TOPSW_MAIN_CTRL__FREQMHZ {533.333} \
   CONFIG.PSU__CRF_APB__TOPSW_MAIN_CTRL__SRCSEL {VPLL} \
   CONFIG.PSU__CRF_APB__VPLL_CTRL__DIV2 {1} \
   CONFIG.PSU__CRF_APB__VPLL_CTRL__FBDIV {64} \
   CONFIG.PSU__CRF_APB__VPLL_CTRL__FRACDATA {0.000000} \
   CONFIG.PSU__CRF_APB__VPLL_CTRL__FRACFREQ {27.138} \
   CONFIG.PSU__CRF_APB__VPLL_CTRL__SRCSEL {PSS_REF_CLK} \
   CONFIG.PSU__CRF_APB__VPLL_FRAC_CFG__ENABLED {0} \
   CONFIG.PSU__CRF_APB__VPLL_TO_LPD_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRL_APB__ADMA_REF_CTRL__ACT_FREQMHZ {533.328003} \
   CONFIG.PSU__CRL_APB__ADMA_REF_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRL_APB__ADMA_REF_CTRL__FREQMHZ {533.333} \
   CONFIG.PSU__CRL_APB__ADMA_REF_CTRL__SRCSEL {RPLL} \
   CONFIG.PSU__CRL_APB__AFI6_REF_CTRL__ACT_FREQMHZ {500} \
   CONFIG.PSU__CRL_APB__AFI6_REF_CTRL__DIVISOR0 {3} \
   CONFIG.PSU__CRL_APB__AFI6_REF_CTRL__FREQMHZ {500} \
   CONFIG.PSU__CRL_APB__AFI6_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__AFI6__ENABLE {0} \
   CONFIG.PSU__CRL_APB__AMS_REF_CTRL__ACT_FREQMHZ {49.999500} \
   CONFIG.PSU__CRL_APB__AMS_REF_CTRL__DIVISOR0 {20} \
   CONFIG.PSU__CRL_APB__AMS_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__AMS_REF_CTRL__FREQMHZ {50} \
   CONFIG.PSU__CRL_APB__AMS_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__CAN0_REF_CTRL__ACT_FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__CAN0_REF_CTRL__DIVISOR0 {15} \
   CONFIG.PSU__CRL_APB__CAN0_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__CAN0_REF_CTRL__FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__CAN0_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__CAN1_REF_CTRL__ACT_FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__CAN1_REF_CTRL__DIVISOR0 {15} \
   CONFIG.PSU__CRL_APB__CAN1_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__CAN1_REF_CTRL__FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__CAN1_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__CPU_R5_CTRL__ACT_FREQMHZ {533.328003} \
   CONFIG.PSU__CRL_APB__CPU_R5_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRL_APB__CPU_R5_CTRL__FREQMHZ {533.333} \
   CONFIG.PSU__CRL_APB__CPU_R5_CTRL__SRCSEL {RPLL} \
   CONFIG.PSU__CRL_APB__CSU_PLL_CTRL__ACT_FREQMHZ {180} \
   CONFIG.PSU__CRL_APB__CSU_PLL_CTRL__DIVISOR0 {3} \
   CONFIG.PSU__CRL_APB__CSU_PLL_CTRL__FREQMHZ {180} \
   CONFIG.PSU__CRL_APB__CSU_PLL_CTRL__SRCSEL {SysOsc} \
   CONFIG.PSU__CRL_APB__DBG_LPD_CTRL__ACT_FREQMHZ {249.997498} \
   CONFIG.PSU__CRL_APB__DBG_LPD_CTRL__DIVISOR0 {4} \
   CONFIG.PSU__CRL_APB__DBG_LPD_CTRL__FREQMHZ {250} \
   CONFIG.PSU__CRL_APB__DBG_LPD_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__DEBUG_R5_ATCLK_CTRL__ACT_FREQMHZ {1000} \
   CONFIG.PSU__CRL_APB__DEBUG_R5_ATCLK_CTRL__DIVISOR0 {6} \
   CONFIG.PSU__CRL_APB__DEBUG_R5_ATCLK_CTRL__FREQMHZ {1000} \
   CONFIG.PSU__CRL_APB__DEBUG_R5_ATCLK_CTRL__SRCSEL {RPLL} \
   CONFIG.PSU__CRL_APB__DLL_REF_CTRL__ACT_FREQMHZ {999.989990} \
   CONFIG.PSU__CRL_APB__DLL_REF_CTRL__FREQMHZ {1500} \
   CONFIG.PSU__CRL_APB__DLL_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__GEM0_REF_CTRL__ACT_FREQMHZ {125} \
   CONFIG.PSU__CRL_APB__GEM0_REF_CTRL__DIVISOR0 {12} \
   CONFIG.PSU__CRL_APB__GEM0_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__GEM0_REF_CTRL__FREQMHZ {125} \
   CONFIG.PSU__CRL_APB__GEM0_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__GEM1_REF_CTRL__ACT_FREQMHZ {125} \
   CONFIG.PSU__CRL_APB__GEM1_REF_CTRL__DIVISOR0 {12} \
   CONFIG.PSU__CRL_APB__GEM1_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__GEM1_REF_CTRL__FREQMHZ {125} \
   CONFIG.PSU__CRL_APB__GEM1_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__GEM2_REF_CTRL__ACT_FREQMHZ {125} \
   CONFIG.PSU__CRL_APB__GEM2_REF_CTRL__DIVISOR0 {12} \
   CONFIG.PSU__CRL_APB__GEM2_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__GEM2_REF_CTRL__FREQMHZ {125} \
   CONFIG.PSU__CRL_APB__GEM2_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__GEM3_REF_CTRL__ACT_FREQMHZ {125} \
   CONFIG.PSU__CRL_APB__GEM3_REF_CTRL__DIVISOR0 {12} \
   CONFIG.PSU__CRL_APB__GEM3_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__GEM3_REF_CTRL__FREQMHZ {125} \
   CONFIG.PSU__CRL_APB__GEM3_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__GEM_TSU_REF_CTRL__ACT_FREQMHZ {250} \
   CONFIG.PSU__CRL_APB__GEM_TSU_REF_CTRL__DIVISOR0 {4} \
   CONFIG.PSU__CRL_APB__GEM_TSU_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__GEM_TSU_REF_CTRL__FREQMHZ {250} \
   CONFIG.PSU__CRL_APB__GEM_TSU_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__I2C0_REF_CTRL__ACT_FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__I2C0_REF_CTRL__DIVISOR0 {15} \
   CONFIG.PSU__CRL_APB__I2C0_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__I2C0_REF_CTRL__FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__I2C0_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__I2C1_REF_CTRL__ACT_FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__I2C1_REF_CTRL__DIVISOR0 {15} \
   CONFIG.PSU__CRL_APB__I2C1_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__I2C1_REF_CTRL__FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__I2C1_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__IOPLL_CTRL__DIV2 {1} \
   CONFIG.PSU__CRL_APB__IOPLL_CTRL__FBDIV {60} \
   CONFIG.PSU__CRL_APB__IOPLL_CTRL__FRACDATA {0.000000} \
   CONFIG.PSU__CRL_APB__IOPLL_CTRL__FRACFREQ {27.138} \
   CONFIG.PSU__CRL_APB__IOPLL_CTRL__SRCSEL {PSS_REF_CLK} \
   CONFIG.PSU__CRL_APB__IOPLL_FRAC_CFG__ENABLED {0} \
   CONFIG.PSU__CRL_APB__IOPLL_TO_FPD_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRL_APB__IOU_SWITCH_CTRL__ACT_FREQMHZ {266.664001} \
   CONFIG.PSU__CRL_APB__IOU_SWITCH_CTRL__DIVISOR0 {4} \
   CONFIG.PSU__CRL_APB__IOU_SWITCH_CTRL__FREQMHZ {267} \
   CONFIG.PSU__CRL_APB__IOU_SWITCH_CTRL__SRCSEL {RPLL} \
   CONFIG.PSU__CRL_APB__LPD_LSBUS_CTRL__ACT_FREQMHZ {99.999001} \
   CONFIG.PSU__CRL_APB__LPD_LSBUS_CTRL__DIVISOR0 {10} \
   CONFIG.PSU__CRL_APB__LPD_LSBUS_CTRL__FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__LPD_LSBUS_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__LPD_SWITCH_CTRL__ACT_FREQMHZ {533.328003} \
   CONFIG.PSU__CRL_APB__LPD_SWITCH_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRL_APB__LPD_SWITCH_CTRL__FREQMHZ {533.333} \
   CONFIG.PSU__CRL_APB__LPD_SWITCH_CTRL__SRCSEL {RPLL} \
   CONFIG.PSU__CRL_APB__NAND_REF_CTRL__ACT_FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__NAND_REF_CTRL__DIVISOR0 {15} \
   CONFIG.PSU__CRL_APB__NAND_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__NAND_REF_CTRL__FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__NAND_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__OCM_MAIN_CTRL__ACT_FREQMHZ {500} \
   CONFIG.PSU__CRL_APB__OCM_MAIN_CTRL__DIVISOR0 {3} \
   CONFIG.PSU__CRL_APB__OCM_MAIN_CTRL__FREQMHZ {500} \
   CONFIG.PSU__CRL_APB__OCM_MAIN_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__PCAP_CTRL__ACT_FREQMHZ {199.998001} \
   CONFIG.PSU__CRL_APB__PCAP_CTRL__DIVISOR0 {5} \
   CONFIG.PSU__CRL_APB__PCAP_CTRL__FREQMHZ {200} \
   CONFIG.PSU__CRL_APB__PCAP_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__PL0_REF_CTRL__ACT_FREQMHZ {191.664749} \
   CONFIG.PSU__CRL_APB__PL0_REF_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRL_APB__PL0_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__PL0_REF_CTRL__FREQMHZ {192} \
   CONFIG.PSU__CRL_APB__PL0_REF_CTRL__SRCSEL {DPLL} \
   CONFIG.PSU__CRL_APB__PL1_REF_CTRL__ACT_FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__PL1_REF_CTRL__DIVISOR0 {4} \
   CONFIG.PSU__CRL_APB__PL1_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__PL1_REF_CTRL__FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__PL1_REF_CTRL__SRCSEL {RPLL} \
   CONFIG.PSU__CRL_APB__PL2_REF_CTRL__ACT_FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__PL2_REF_CTRL__DIVISOR0 {4} \
   CONFIG.PSU__CRL_APB__PL2_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__PL2_REF_CTRL__FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__PL2_REF_CTRL__SRCSEL {RPLL} \
   CONFIG.PSU__CRL_APB__PL3_REF_CTRL__ACT_FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__PL3_REF_CTRL__DIVISOR0 {4} \
   CONFIG.PSU__CRL_APB__PL3_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__PL3_REF_CTRL__FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__PL3_REF_CTRL__SRCSEL {RPLL} \
   CONFIG.PSU__CRL_APB__QSPI_REF_CTRL__ACT_FREQMHZ {300} \
   CONFIG.PSU__CRL_APB__QSPI_REF_CTRL__DIVISOR0 {5} \
   CONFIG.PSU__CRL_APB__QSPI_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__QSPI_REF_CTRL__FREQMHZ {300} \
   CONFIG.PSU__CRL_APB__QSPI_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__RPLL_CTRL__DIV2 {1} \
   CONFIG.PSU__CRL_APB__RPLL_CTRL__FBDIV {64} \
   CONFIG.PSU__CRL_APB__RPLL_CTRL__FRACDATA {0.000000} \
   CONFIG.PSU__CRL_APB__RPLL_CTRL__FRACFREQ {27.138} \
   CONFIG.PSU__CRL_APB__RPLL_CTRL__SRCSEL {PSS_REF_CLK} \
   CONFIG.PSU__CRL_APB__RPLL_FRAC_CFG__ENABLED {0} \
   CONFIG.PSU__CRL_APB__RPLL_TO_FPD_CTRL__DIVISOR0 {2} \
   CONFIG.PSU__CRL_APB__SDIO0_REF_CTRL__ACT_FREQMHZ {200} \
   CONFIG.PSU__CRL_APB__SDIO0_REF_CTRL__DIVISOR0 {7} \
   CONFIG.PSU__CRL_APB__SDIO0_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__SDIO0_REF_CTRL__FREQMHZ {200} \
   CONFIG.PSU__CRL_APB__SDIO0_REF_CTRL__SRCSEL {RPLL} \
   CONFIG.PSU__CRL_APB__SDIO1_REF_CTRL__ACT_FREQMHZ {200} \
   CONFIG.PSU__CRL_APB__SDIO1_REF_CTRL__DIVISOR0 {7} \
   CONFIG.PSU__CRL_APB__SDIO1_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__SDIO1_REF_CTRL__FREQMHZ {200} \
   CONFIG.PSU__CRL_APB__SDIO1_REF_CTRL__SRCSEL {RPLL} \
   CONFIG.PSU__CRL_APB__SPI0_REF_CTRL__ACT_FREQMHZ {214} \
   CONFIG.PSU__CRL_APB__SPI0_REF_CTRL__DIVISOR0 {7} \
   CONFIG.PSU__CRL_APB__SPI0_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__SPI0_REF_CTRL__FREQMHZ {200} \
   CONFIG.PSU__CRL_APB__SPI0_REF_CTRL__SRCSEL {RPLL} \
   CONFIG.PSU__CRL_APB__SPI1_REF_CTRL__ACT_FREQMHZ {214} \
   CONFIG.PSU__CRL_APB__SPI1_REF_CTRL__DIVISOR0 {7} \
   CONFIG.PSU__CRL_APB__SPI1_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__SPI1_REF_CTRL__FREQMHZ {200} \
   CONFIG.PSU__CRL_APB__SPI1_REF_CTRL__SRCSEL {RPLL} \
   CONFIG.PSU__CRL_APB__TIMESTAMP_REF_CTRL__ACT_FREQMHZ {33.333000} \
   CONFIG.PSU__CRL_APB__TIMESTAMP_REF_CTRL__DIVISOR0 {1} \
   CONFIG.PSU__CRL_APB__TIMESTAMP_REF_CTRL__FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__TIMESTAMP_REF_CTRL__SRCSEL {PSS_REF_CLK} \
   CONFIG.PSU__CRL_APB__UART0_REF_CTRL__ACT_FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__UART0_REF_CTRL__DIVISOR0 {15} \
   CONFIG.PSU__CRL_APB__UART0_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__UART0_REF_CTRL__FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__UART0_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__UART1_REF_CTRL__ACT_FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__UART1_REF_CTRL__DIVISOR0 {15} \
   CONFIG.PSU__CRL_APB__UART1_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__UART1_REF_CTRL__FREQMHZ {100} \
   CONFIG.PSU__CRL_APB__UART1_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__USB0_BUS_REF_CTRL__ACT_FREQMHZ {250} \
   CONFIG.PSU__CRL_APB__USB0_BUS_REF_CTRL__DIVISOR0 {6} \
   CONFIG.PSU__CRL_APB__USB0_BUS_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__USB0_BUS_REF_CTRL__FREQMHZ {250} \
   CONFIG.PSU__CRL_APB__USB0_BUS_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__USB1_BUS_REF_CTRL__ACT_FREQMHZ {250} \
   CONFIG.PSU__CRL_APB__USB1_BUS_REF_CTRL__DIVISOR0 {6} \
   CONFIG.PSU__CRL_APB__USB1_BUS_REF_CTRL__DIVISOR1 {1} \
   CONFIG.PSU__CRL_APB__USB1_BUS_REF_CTRL__FREQMHZ {250} \
   CONFIG.PSU__CRL_APB__USB1_BUS_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__USB3_DUAL_REF_CTRL__ACT_FREQMHZ {20} \
   CONFIG.PSU__CRL_APB__USB3_DUAL_REF_CTRL__DIVISOR0 {5} \
   CONFIG.PSU__CRL_APB__USB3_DUAL_REF_CTRL__DIVISOR1 {15} \
   CONFIG.PSU__CRL_APB__USB3_DUAL_REF_CTRL__FREQMHZ {20} \
   CONFIG.PSU__CRL_APB__USB3_DUAL_REF_CTRL__SRCSEL {IOPLL} \
   CONFIG.PSU__CRL_APB__USB3__ENABLE {0} \
   CONFIG.PSU__CSUPMU__PERIPHERAL__VALID {0} \
   CONFIG.PSU__CSU_COHERENCY {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_0__ENABLE {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_0__ERASE_BBRAM {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_10__ENABLE {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_10__ERASE_BBRAM {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_11__ENABLE {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_11__ERASE_BBRAM {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_12__ENABLE {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_12__ERASE_BBRAM {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_1__ENABLE {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_1__ERASE_BBRAM {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_2__ENABLE {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_2__ERASE_BBRAM {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_3__ENABLE {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_3__ERASE_BBRAM {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_4__ENABLE {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_4__ERASE_BBRAM {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_5__ENABLE {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_5__ERASE_BBRAM {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_6__ENABLE {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_6__ERASE_BBRAM {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_7__ENABLE {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_7__ERASE_BBRAM {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_8__ENABLE {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_8__ERASE_BBRAM {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_9__ENABLE {0} \
   CONFIG.PSU__CSU__CSU_TAMPER_9__ERASE_BBRAM {0} \
   CONFIG.PSU__CSU__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__DDRC__ADDR_MIRROR {0} \
   CONFIG.PSU__DDRC__AL {0} \
   CONFIG.PSU__DDRC__BANK_ADDR_COUNT {2} \
   CONFIG.PSU__DDRC__BG_ADDR_COUNT {2} \
   CONFIG.PSU__DDRC__BRC_MAPPING {ROW_BANK_COL} \
   CONFIG.PSU__DDRC__BUS_WIDTH {64 Bit} \
   CONFIG.PSU__DDRC__CL {10} \
   CONFIG.PSU__DDRC__CLOCK_STOP_EN {0} \
   CONFIG.PSU__DDRC__COL_ADDR_COUNT {10} \
   CONFIG.PSU__DDRC__COMPONENTS {Components} \
   CONFIG.PSU__DDRC__CWL {9} \
   CONFIG.PSU__DDRC__DDR3L_T_REF_RANGE {NA} \
   CONFIG.PSU__DDRC__DDR3_T_REF_RANGE {NA} \
   CONFIG.PSU__DDRC__DDR4_ADDR_MAPPING {1} \
   CONFIG.PSU__DDRC__DDR4_CAL_MODE_ENABLE {0} \
   CONFIG.PSU__DDRC__DDR4_CRC_CONTROL {0} \
   CONFIG.PSU__DDRC__DDR4_MAXPWR_SAVING_EN {0} \
   CONFIG.PSU__DDRC__DDR4_T_REF_MODE {0} \
   CONFIG.PSU__DDRC__DDR4_T_REF_RANGE {Normal (0-85)} \
   CONFIG.PSU__DDRC__DEEP_PWR_DOWN_EN {0} \
   CONFIG.PSU__DDRC__DEVICE_CAPACITY {2048 MBits} \
   CONFIG.PSU__DDRC__DIMM_ADDR_MIRROR {0} \
   CONFIG.PSU__DDRC__DM_DBI {DM_NO_DBI} \
   CONFIG.PSU__DDRC__DQMAP_0_3 {0} \
   CONFIG.PSU__DDRC__DQMAP_12_15 {0} \
   CONFIG.PSU__DDRC__DQMAP_16_19 {0} \
   CONFIG.PSU__DDRC__DQMAP_20_23 {0} \
   CONFIG.PSU__DDRC__DQMAP_24_27 {0} \
   CONFIG.PSU__DDRC__DQMAP_28_31 {0} \
   CONFIG.PSU__DDRC__DQMAP_32_35 {0} \
   CONFIG.PSU__DDRC__DQMAP_36_39 {0} \
   CONFIG.PSU__DDRC__DQMAP_40_43 {0} \
   CONFIG.PSU__DDRC__DQMAP_44_47 {0} \
   CONFIG.PSU__DDRC__DQMAP_48_51 {0} \
   CONFIG.PSU__DDRC__DQMAP_4_7 {0} \
   CONFIG.PSU__DDRC__DQMAP_52_55 {0} \
   CONFIG.PSU__DDRC__DQMAP_56_59 {0} \
   CONFIG.PSU__DDRC__DQMAP_60_63 {0} \
   CONFIG.PSU__DDRC__DQMAP_64_67 {0} \
   CONFIG.PSU__DDRC__DQMAP_68_71 {0} \
   CONFIG.PSU__DDRC__DQMAP_8_11 {0} \
   CONFIG.PSU__DDRC__DRAM_WIDTH {8 Bits} \
   CONFIG.PSU__DDRC__ECC {Disabled} \
   CONFIG.PSU__DDRC__ECC_SCRUB {0} \
   CONFIG.PSU__DDRC__ENABLE {1} \
   CONFIG.PSU__DDRC__ENABLE_2T_TIMING {0} \
   CONFIG.PSU__DDRC__ENABLE_DP_SWITCH {0} \
   CONFIG.PSU__DDRC__ENABLE_LP4_HAS_ECC_COMP {0} \
   CONFIG.PSU__DDRC__ENABLE_LP4_SLOWBOOT {0} \
   CONFIG.PSU__DDRC__EN_2ND_CLK {0} \
   CONFIG.PSU__DDRC__FGRM {1X} \
   CONFIG.PSU__DDRC__FREQ_MHZ {1} \
   CONFIG.PSU__DDRC__LPDDR3_DUALRANK_SDP {0} \
   CONFIG.PSU__DDRC__LPDDR3_T_REF_RANGE {NA} \
   CONFIG.PSU__DDRC__LPDDR4_T_REF_RANGE {NA} \
   CONFIG.PSU__DDRC__LP_ASR {manual normal} \
   CONFIG.PSU__DDRC__MEMORY_TYPE {DDR 4} \
   CONFIG.PSU__DDRC__PARITY_ENABLE {0} \
   CONFIG.PSU__DDRC__PER_BANK_REFRESH {0} \
   CONFIG.PSU__DDRC__PHY_DBI_MODE {0} \
   CONFIG.PSU__DDRC__PLL_BYPASS {0} \
   CONFIG.PSU__DDRC__PWR_DOWN_EN {0} \
   CONFIG.PSU__DDRC__RANK_ADDR_COUNT {0} \
   CONFIG.PSU__DDRC__RD_DQS_CENTER {0} \
   CONFIG.PSU__DDRC__ROW_ADDR_COUNT {14} \
   CONFIG.PSU__DDRC__SB_TARGET {10-10-10} \
   CONFIG.PSU__DDRC__SELF_REF_ABORT {0} \
   CONFIG.PSU__DDRC__SPEED_BIN {DDR4_1600J} \
   CONFIG.PSU__DDRC__STATIC_RD_MODE {0} \
   CONFIG.PSU__DDRC__TRAIN_DATA_EYE {1} \
   CONFIG.PSU__DDRC__TRAIN_READ_GATE {1} \
   CONFIG.PSU__DDRC__TRAIN_WRITE_LEVEL {1} \
   CONFIG.PSU__DDRC__T_FAW {35} \
   CONFIG.PSU__DDRC__T_RAS_MIN {35} \
   CONFIG.PSU__DDRC__T_RC {47.5} \
   CONFIG.PSU__DDRC__T_RCD {10} \
   CONFIG.PSU__DDRC__T_RP {10} \
   CONFIG.PSU__DDRC__VENDOR_PART {OTHERS} \
   CONFIG.PSU__DDRC__VIDEO_BUFFER_SIZE {0} \
   CONFIG.PSU__DDRC__VREF {1} \
   CONFIG.PSU__DDR_HIGH_ADDRESS_GUI_ENABLE {0} \
   CONFIG.PSU__DDR_QOS_ENABLE {0} \
   CONFIG.PSU__DDR_QOS_FIX_HP0_RDQOS {} \
   CONFIG.PSU__DDR_QOS_FIX_HP0_WRQOS {} \
   CONFIG.PSU__DDR_QOS_FIX_HP1_RDQOS {} \
   CONFIG.PSU__DDR_QOS_FIX_HP1_WRQOS {} \
   CONFIG.PSU__DDR_QOS_FIX_HP2_RDQOS {} \
   CONFIG.PSU__DDR_QOS_FIX_HP2_WRQOS {} \
   CONFIG.PSU__DDR_QOS_FIX_HP3_RDQOS {} \
   CONFIG.PSU__DDR_QOS_FIX_HP3_WRQOS {} \
   CONFIG.PSU__DDR_QOS_HP0_RDQOS {} \
   CONFIG.PSU__DDR_QOS_HP0_WRQOS {} \
   CONFIG.PSU__DDR_QOS_HP1_RDQOS {} \
   CONFIG.PSU__DDR_QOS_HP1_WRQOS {} \
   CONFIG.PSU__DDR_QOS_HP2_RDQOS {} \
   CONFIG.PSU__DDR_QOS_HP2_WRQOS {} \
   CONFIG.PSU__DDR_QOS_HP3_RDQOS {} \
   CONFIG.PSU__DDR_QOS_HP3_WRQOS {} \
   CONFIG.PSU__DDR_QOS_RD_HPR_THRSHLD {} \
   CONFIG.PSU__DDR_QOS_RD_LPR_THRSHLD {} \
   CONFIG.PSU__DDR_QOS_WR_THRSHLD {} \
   CONFIG.PSU__DDR_SW_REFRESH_ENABLED {1} \
   CONFIG.PSU__DDR__INTERFACE__FREQMHZ {400.000} \
   CONFIG.PSU__DEVICE_TYPE {RFSOC} \
   CONFIG.PSU__DISPLAYPORT__LANE0__ENABLE {0} \
   CONFIG.PSU__DISPLAYPORT__LANE1__ENABLE {0} \
   CONFIG.PSU__DISPLAYPORT__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__DLL__ISUSED {0} \
   CONFIG.PSU__DPAUX__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__ENABLE__DDR__REFRESH__SIGNALS {0} \
   CONFIG.PSU__ENET0__FIFO__ENABLE {0} \
   CONFIG.PSU__ENET0__GRP_MDIO__ENABLE {0} \
   CONFIG.PSU__ENET0__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__ENET0__PTP__ENABLE {0} \
   CONFIG.PSU__ENET0__TSU__ENABLE {0} \
   CONFIG.PSU__ENET1__FIFO__ENABLE {0} \
   CONFIG.PSU__ENET1__GRP_MDIO__ENABLE {0} \
   CONFIG.PSU__ENET1__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__ENET1__PTP__ENABLE {0} \
   CONFIG.PSU__ENET1__TSU__ENABLE {0} \
   CONFIG.PSU__ENET2__FIFO__ENABLE {0} \
   CONFIG.PSU__ENET2__GRP_MDIO__ENABLE {0} \
   CONFIG.PSU__ENET2__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__ENET2__PTP__ENABLE {0} \
   CONFIG.PSU__ENET2__TSU__ENABLE {0} \
   CONFIG.PSU__ENET3__FIFO__ENABLE {0} \
   CONFIG.PSU__ENET3__GRP_MDIO__ENABLE {0} \
   CONFIG.PSU__ENET3__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__ENET3__PTP__ENABLE {0} \
   CONFIG.PSU__ENET3__TSU__ENABLE {0} \
   CONFIG.PSU__EN_AXI_STATUS_PORTS {0} \
   CONFIG.PSU__EN_EMIO_TRACE {0} \
   CONFIG.PSU__EP__IP {0} \
   CONFIG.PSU__EXPAND__CORESIGHT {0} \
   CONFIG.PSU__EXPAND__FPD_SLAVES {0} \
   CONFIG.PSU__EXPAND__GIC {0} \
   CONFIG.PSU__EXPAND__LOWER_LPS_SLAVES {0} \
   CONFIG.PSU__EXPAND__UPPER_LPS_SLAVES {0} \
   CONFIG.PSU__FPDMASTERS_COHERENCY {0} \
   CONFIG.PSU__FPD_SLCR__WDT1__ACT_FREQMHZ {100} \
   CONFIG.PSU__FPD_SLCR__WDT1__FREQMHZ {100} \
   CONFIG.PSU__FPD_SLCR__WDT_CLK_SEL__SELECT {APB} \
   CONFIG.PSU__FPGA_PL0_ENABLE {1} \
   CONFIG.PSU__FPGA_PL1_ENABLE {0} \
   CONFIG.PSU__FPGA_PL2_ENABLE {0} \
   CONFIG.PSU__FPGA_PL3_ENABLE {0} \
   CONFIG.PSU__FP__POWER__ON {1} \
   CONFIG.PSU__FTM__CTI_IN_0 {0} \
   CONFIG.PSU__FTM__CTI_IN_1 {0} \
   CONFIG.PSU__FTM__CTI_IN_2 {0} \
   CONFIG.PSU__FTM__CTI_IN_3 {0} \
   CONFIG.PSU__FTM__CTI_OUT_0 {0} \
   CONFIG.PSU__FTM__CTI_OUT_1 {0} \
   CONFIG.PSU__FTM__CTI_OUT_2 {0} \
   CONFIG.PSU__FTM__CTI_OUT_3 {0} \
   CONFIG.PSU__FTM__GPI {0} \
   CONFIG.PSU__FTM__GPO {0} \
   CONFIG.PSU__GEM0_COHERENCY {0} \
   CONFIG.PSU__GEM0_ROUTE_THROUGH_FPD {0} \
   CONFIG.PSU__GEM1_COHERENCY {0} \
   CONFIG.PSU__GEM1_ROUTE_THROUGH_FPD {0} \
   CONFIG.PSU__GEM2_COHERENCY {0} \
   CONFIG.PSU__GEM2_ROUTE_THROUGH_FPD {0} \
   CONFIG.PSU__GEM3_COHERENCY {0} \
   CONFIG.PSU__GEM3_ROUTE_THROUGH_FPD {0} \
   CONFIG.PSU__GEM__TSU__ENABLE {0} \
   CONFIG.PSU__GEN_IPI_0__MASTER {APU} \
   CONFIG.PSU__GEN_IPI_10__MASTER {NONE} \
   CONFIG.PSU__GEN_IPI_1__MASTER {RPU0} \
   CONFIG.PSU__GEN_IPI_2__MASTER {RPU1} \
   CONFIG.PSU__GEN_IPI_3__MASTER {PMU} \
   CONFIG.PSU__GEN_IPI_4__MASTER {PMU} \
   CONFIG.PSU__GEN_IPI_5__MASTER {PMU} \
   CONFIG.PSU__GEN_IPI_6__MASTER {PMU} \
   CONFIG.PSU__GEN_IPI_7__MASTER {NONE} \
   CONFIG.PSU__GEN_IPI_8__MASTER {NONE} \
   CONFIG.PSU__GEN_IPI_9__MASTER {NONE} \
   CONFIG.PSU__GPIO0_MIO__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__GPIO1_MIO__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__GPIO2_MIO__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__GPIO_EMIO_WIDTH {1} \
   CONFIG.PSU__GPIO_EMIO__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__GPIO_EMIO__PERIPHERAL__IO {<Select>} \
   CONFIG.PSU__GPIO_EMIO__WIDTH {[94:0]} \
   CONFIG.PSU__GPU_PP0__POWER__ON {0} \
   CONFIG.PSU__GPU_PP1__POWER__ON {0} \
   CONFIG.PSU__GT_REF_CLK__FREQMHZ {33.333} \
   CONFIG.PSU__GT__PRE_EMPH_LVL_4 {} \
   CONFIG.PSU__GT__VLT_SWNG_LVL_4 {} \
   CONFIG.PSU__HIGH_ADDRESS__ENABLE {0} \
   CONFIG.PSU__HPM0_FPD__NUM_READ_THREADS {4} \
   CONFIG.PSU__HPM0_FPD__NUM_WRITE_THREADS {4} \
   CONFIG.PSU__HPM0_LPD__NUM_READ_THREADS {4} \
   CONFIG.PSU__HPM0_LPD__NUM_WRITE_THREADS {4} \
   CONFIG.PSU__HPM1_FPD__NUM_READ_THREADS {4} \
   CONFIG.PSU__HPM1_FPD__NUM_WRITE_THREADS {4} \
   CONFIG.PSU__I2C0_LOOP_I2C1__ENABLE {0} \
   CONFIG.PSU__I2C0__GRP_INT__ENABLE {0} \
   CONFIG.PSU__I2C0__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__I2C1__GRP_INT__ENABLE {0} \
   CONFIG.PSU__I2C1__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__IOU_SLCR__IOU_TTC_APB_CLK__TTC0_SEL {APB} \
   CONFIG.PSU__IOU_SLCR__IOU_TTC_APB_CLK__TTC1_SEL {APB} \
   CONFIG.PSU__IOU_SLCR__IOU_TTC_APB_CLK__TTC2_SEL {APB} \
   CONFIG.PSU__IOU_SLCR__IOU_TTC_APB_CLK__TTC3_SEL {APB} \
   CONFIG.PSU__IOU_SLCR__TTC0__ACT_FREQMHZ {100} \
   CONFIG.PSU__IOU_SLCR__TTC0__FREQMHZ {100} \
   CONFIG.PSU__IOU_SLCR__TTC1__ACT_FREQMHZ {100} \
   CONFIG.PSU__IOU_SLCR__TTC1__FREQMHZ {100} \
   CONFIG.PSU__IOU_SLCR__TTC2__ACT_FREQMHZ {100} \
   CONFIG.PSU__IOU_SLCR__TTC2__FREQMHZ {100} \
   CONFIG.PSU__IOU_SLCR__TTC3__ACT_FREQMHZ {100} \
   CONFIG.PSU__IOU_SLCR__TTC3__FREQMHZ {100} \
   CONFIG.PSU__IOU_SLCR__WDT0__ACT_FREQMHZ {100} \
   CONFIG.PSU__IOU_SLCR__WDT0__FREQMHZ {100} \
   CONFIG.PSU__IOU_SLCR__WDT_CLK_SEL__SELECT {APB} \
   CONFIG.PSU__IRQ_P2F_ADMA_CHAN__INT {0} \
   CONFIG.PSU__IRQ_P2F_AIB_AXI__INT {0} \
   CONFIG.PSU__IRQ_P2F_AMS__INT {0} \
   CONFIG.PSU__IRQ_P2F_APM_FPD__INT {0} \
   CONFIG.PSU__IRQ_P2F_APU_COMM__INT {0} \
   CONFIG.PSU__IRQ_P2F_APU_CPUMNT__INT {0} \
   CONFIG.PSU__IRQ_P2F_APU_CTI__INT {0} \
   CONFIG.PSU__IRQ_P2F_APU_EXTERR__INT {0} \
   CONFIG.PSU__IRQ_P2F_APU_IPI__INT {0} \
   CONFIG.PSU__IRQ_P2F_APU_L2ERR__INT {0} \
   CONFIG.PSU__IRQ_P2F_APU_PMU__INT {0} \
   CONFIG.PSU__IRQ_P2F_APU_REGS__INT {0} \
   CONFIG.PSU__IRQ_P2F_ATB_LPD__INT {0} \
   CONFIG.PSU__IRQ_P2F_CAN0__INT {0} \
   CONFIG.PSU__IRQ_P2F_CAN1__INT {0} \
   CONFIG.PSU__IRQ_P2F_CLKMON__INT {0} \
   CONFIG.PSU__IRQ_P2F_CSUPMU_WDT__INT {0} \
   CONFIG.PSU__IRQ_P2F_CSU_DMA__INT {0} \
   CONFIG.PSU__IRQ_P2F_CSU__INT {0} \
   CONFIG.PSU__IRQ_P2F_DDR_SS__INT {0} \
   CONFIG.PSU__IRQ_P2F_DPDMA__INT {0} \
   CONFIG.PSU__IRQ_P2F_DPORT__INT {0} \
   CONFIG.PSU__IRQ_P2F_EFUSE__INT {0} \
   CONFIG.PSU__IRQ_P2F_ENT0_WAKEUP__INT {0} \
   CONFIG.PSU__IRQ_P2F_ENT0__INT {0} \
   CONFIG.PSU__IRQ_P2F_ENT1_WAKEUP__INT {0} \
   CONFIG.PSU__IRQ_P2F_ENT1__INT {0} \
   CONFIG.PSU__IRQ_P2F_ENT2_WAKEUP__INT {0} \
   CONFIG.PSU__IRQ_P2F_ENT2__INT {0} \
   CONFIG.PSU__IRQ_P2F_ENT3_WAKEUP__INT {0} \
   CONFIG.PSU__IRQ_P2F_ENT3__INT {0} \
   CONFIG.PSU__IRQ_P2F_FPD_APB__INT {0} \
   CONFIG.PSU__IRQ_P2F_FPD_ATB_ERR__INT {0} \
   CONFIG.PSU__IRQ_P2F_FP_WDT__INT {0} \
   CONFIG.PSU__IRQ_P2F_GDMA_CHAN__INT {0} \
   CONFIG.PSU__IRQ_P2F_GPIO__INT {0} \
   CONFIG.PSU__IRQ_P2F_GPU__INT {0} \
   CONFIG.PSU__IRQ_P2F_I2C0__INT {0} \
   CONFIG.PSU__IRQ_P2F_I2C1__INT {0} \
   CONFIG.PSU__IRQ_P2F_LPD_APB__INT {0} \
   CONFIG.PSU__IRQ_P2F_LPD_APM__INT {0} \
   CONFIG.PSU__IRQ_P2F_LP_WDT__INT {0} \
   CONFIG.PSU__IRQ_P2F_NAND__INT {0} \
   CONFIG.PSU__IRQ_P2F_OCM_ERR__INT {0} \
   CONFIG.PSU__IRQ_P2F_PCIE_DMA__INT {0} \
   CONFIG.PSU__IRQ_P2F_PCIE_LEGACY__INT {0} \
   CONFIG.PSU__IRQ_P2F_PCIE_MSC__INT {0} \
   CONFIG.PSU__IRQ_P2F_PCIE_MSI__INT {0} \
   CONFIG.PSU__IRQ_P2F_PL_IPI__INT {0} \
   CONFIG.PSU__IRQ_P2F_QSPI__INT {0} \
   CONFIG.PSU__IRQ_P2F_R5_CORE0_ECC_ERR__INT {0} \
   CONFIG.PSU__IRQ_P2F_R5_CORE1_ECC_ERR__INT {0} \
   CONFIG.PSU__IRQ_P2F_RPU_IPI__INT {0} \
   CONFIG.PSU__IRQ_P2F_RPU_PERMON__INT {0} \
   CONFIG.PSU__IRQ_P2F_RTC_ALARM__INT {0} \
   CONFIG.PSU__IRQ_P2F_RTC_SECONDS__INT {0} \
   CONFIG.PSU__IRQ_P2F_SATA__INT {0} \
   CONFIG.PSU__IRQ_P2F_SDIO0_WAKE__INT {0} \
   CONFIG.PSU__IRQ_P2F_SDIO0__INT {0} \
   CONFIG.PSU__IRQ_P2F_SDIO1_WAKE__INT {0} \
   CONFIG.PSU__IRQ_P2F_SDIO1__INT {0} \
   CONFIG.PSU__IRQ_P2F_SPI0__INT {0} \
   CONFIG.PSU__IRQ_P2F_SPI1__INT {0} \
   CONFIG.PSU__IRQ_P2F_TTC0__INT0 {0} \
   CONFIG.PSU__IRQ_P2F_TTC0__INT1 {0} \
   CONFIG.PSU__IRQ_P2F_TTC0__INT2 {0} \
   CONFIG.PSU__IRQ_P2F_TTC1__INT0 {0} \
   CONFIG.PSU__IRQ_P2F_TTC1__INT1 {0} \
   CONFIG.PSU__IRQ_P2F_TTC1__INT2 {0} \
   CONFIG.PSU__IRQ_P2F_TTC2__INT0 {0} \
   CONFIG.PSU__IRQ_P2F_TTC2__INT1 {0} \
   CONFIG.PSU__IRQ_P2F_TTC2__INT2 {0} \
   CONFIG.PSU__IRQ_P2F_TTC3__INT0 {0} \
   CONFIG.PSU__IRQ_P2F_TTC3__INT1 {0} \
   CONFIG.PSU__IRQ_P2F_TTC3__INT2 {0} \
   CONFIG.PSU__IRQ_P2F_UART0__INT {0} \
   CONFIG.PSU__IRQ_P2F_UART1__INT {0} \
   CONFIG.PSU__IRQ_P2F_USB3_ENDPOINT__INT0 {0} \
   CONFIG.PSU__IRQ_P2F_USB3_ENDPOINT__INT1 {0} \
   CONFIG.PSU__IRQ_P2F_USB3_OTG__INT0 {0} \
   CONFIG.PSU__IRQ_P2F_USB3_OTG__INT1 {0} \
   CONFIG.PSU__IRQ_P2F_USB3_PMU_WAKEUP__INT {0} \
   CONFIG.PSU__IRQ_P2F_XMPU_FPD__INT {0} \
   CONFIG.PSU__IRQ_P2F_XMPU_LPD__INT {0} \
   CONFIG.PSU__IRQ_P2F__INTF_FPD_SMMU__INT {0} \
   CONFIG.PSU__IRQ_P2F__INTF_PPD_CCI__INT {0} \
   CONFIG.PSU__L2_BANK0__POWER__ON {1} \
   CONFIG.PSU__LPDMA0_COHERENCY {0} \
   CONFIG.PSU__LPDMA1_COHERENCY {0} \
   CONFIG.PSU__LPDMA2_COHERENCY {0} \
   CONFIG.PSU__LPDMA3_COHERENCY {0} \
   CONFIG.PSU__LPDMA4_COHERENCY {0} \
   CONFIG.PSU__LPDMA5_COHERENCY {0} \
   CONFIG.PSU__LPDMA6_COHERENCY {0} \
   CONFIG.PSU__LPDMA7_COHERENCY {0} \
   CONFIG.PSU__LPD_SLCR__CSUPMU_WDT_CLK_SEL__SELECT {APB} \
   CONFIG.PSU__LPD_SLCR__CSUPMU__ACT_FREQMHZ {100} \
   CONFIG.PSU__LPD_SLCR__CSUPMU__FREQMHZ {100} \
   CONFIG.PSU__MAXIGP0__DATA_WIDTH {128} \
   CONFIG.PSU__MAXIGP1__DATA_WIDTH {128} \
   CONFIG.PSU__MAXIGP2__DATA_WIDTH {32} \
   CONFIG.PSU__M_AXI_GP0_SUPPORTS_NARROW_BURST {1} \
   CONFIG.PSU__M_AXI_GP1_SUPPORTS_NARROW_BURST {1} \
   CONFIG.PSU__M_AXI_GP2_SUPPORTS_NARROW_BURST {1} \
   CONFIG.PSU__NAND_COHERENCY {0} \
   CONFIG.PSU__NAND_ROUTE_THROUGH_FPD {0} \
   CONFIG.PSU__NAND__CHIP_ENABLE__ENABLE {0} \
   CONFIG.PSU__NAND__DATA_STROBE__ENABLE {0} \
   CONFIG.PSU__NAND__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__NAND__READY0_BUSY__ENABLE {0} \
   CONFIG.PSU__NAND__READY1_BUSY__ENABLE {0} \
   CONFIG.PSU__NAND__READY_BUSY__ENABLE {0} \
   CONFIG.PSU__NUM_FABRIC_RESETS {1} \
   CONFIG.PSU__OCM_BANK0__POWER__ON {1} \
   CONFIG.PSU__OCM_BANK1__POWER__ON {1} \
   CONFIG.PSU__OCM_BANK2__POWER__ON {1} \
   CONFIG.PSU__OCM_BANK3__POWER__ON {1} \
   CONFIG.PSU__OVERRIDE_HPX_QOS {0} \
   CONFIG.PSU__OVERRIDE__BASIC_CLOCK {0} \
   CONFIG.PSU__PCIE__ACS_VIOLAION {0} \
   CONFIG.PSU__PCIE__ACS_VIOLATION {0} \
   CONFIG.PSU__PCIE__AER_CAPABILITY {0} \
   CONFIG.PSU__PCIE__ATOMICOP_EGRESS_BLOCKED {0} \
   CONFIG.PSU__PCIE__BAR0_64BIT {0} \
   CONFIG.PSU__PCIE__BAR0_ENABLE {0} \
   CONFIG.PSU__PCIE__BAR0_PREFETCHABLE {0} \
   CONFIG.PSU__PCIE__BAR0_VAL {} \
   CONFIG.PSU__PCIE__BAR1_64BIT {0} \
   CONFIG.PSU__PCIE__BAR1_ENABLE {0} \
   CONFIG.PSU__PCIE__BAR1_PREFETCHABLE {0} \
   CONFIG.PSU__PCIE__BAR1_VAL {} \
   CONFIG.PSU__PCIE__BAR2_64BIT {0} \
   CONFIG.PSU__PCIE__BAR2_ENABLE {0} \
   CONFIG.PSU__PCIE__BAR2_PREFETCHABLE {0} \
   CONFIG.PSU__PCIE__BAR2_VAL {} \
   CONFIG.PSU__PCIE__BAR3_64BIT {0} \
   CONFIG.PSU__PCIE__BAR3_ENABLE {0} \
   CONFIG.PSU__PCIE__BAR3_PREFETCHABLE {0} \
   CONFIG.PSU__PCIE__BAR3_VAL {} \
   CONFIG.PSU__PCIE__BAR4_64BIT {0} \
   CONFIG.PSU__PCIE__BAR4_ENABLE {0} \
   CONFIG.PSU__PCIE__BAR4_PREFETCHABLE {0} \
   CONFIG.PSU__PCIE__BAR4_VAL {} \
   CONFIG.PSU__PCIE__BAR5_64BIT {0} \
   CONFIG.PSU__PCIE__BAR5_ENABLE {0} \
   CONFIG.PSU__PCIE__BAR5_PREFETCHABLE {0} \
   CONFIG.PSU__PCIE__BAR5_VAL {} \
   CONFIG.PSU__PCIE__CLASS_CODE_BASE {} \
   CONFIG.PSU__PCIE__CLASS_CODE_INTERFACE {} \
   CONFIG.PSU__PCIE__CLASS_CODE_SUB {} \
   CONFIG.PSU__PCIE__CLASS_CODE_VALUE {} \
   CONFIG.PSU__PCIE__COMPLETER_ABORT {0} \
   CONFIG.PSU__PCIE__COMPLTION_TIMEOUT {0} \
   CONFIG.PSU__PCIE__CORRECTABLE_INT_ERR {0} \
   CONFIG.PSU__PCIE__CRS_SW_VISIBILITY {0} \
   CONFIG.PSU__PCIE__DEVICE_ID {} \
   CONFIG.PSU__PCIE__ECRC_CHECK {0} \
   CONFIG.PSU__PCIE__ECRC_ERR {0} \
   CONFIG.PSU__PCIE__ECRC_GEN {0} \
   CONFIG.PSU__PCIE__EROM_ENABLE {0} \
   CONFIG.PSU__PCIE__EROM_VAL {} \
   CONFIG.PSU__PCIE__FLOW_CONTROL_ERR {0} \
   CONFIG.PSU__PCIE__FLOW_CONTROL_PROTOCOL_ERR {0} \
   CONFIG.PSU__PCIE__HEADER_LOG_OVERFLOW {0} \
   CONFIG.PSU__PCIE__INTX_GENERATION {0} \
   CONFIG.PSU__PCIE__LANE0__ENABLE {0} \
   CONFIG.PSU__PCIE__LANE1__ENABLE {0} \
   CONFIG.PSU__PCIE__LANE2__ENABLE {0} \
   CONFIG.PSU__PCIE__LANE3__ENABLE {0} \
   CONFIG.PSU__PCIE__MC_BLOCKED_TLP {0} \
   CONFIG.PSU__PCIE__MSIX_BAR_INDICATOR {} \
   CONFIG.PSU__PCIE__MSIX_CAPABILITY {0} \
   CONFIG.PSU__PCIE__MSIX_PBA_BAR_INDICATOR {} \
   CONFIG.PSU__PCIE__MSIX_PBA_OFFSET {0} \
   CONFIG.PSU__PCIE__MSIX_TABLE_OFFSET {0} \
   CONFIG.PSU__PCIE__MSIX_TABLE_SIZE {0} \
   CONFIG.PSU__PCIE__MSI_64BIT_ADDR_CAPABLE {0} \
   CONFIG.PSU__PCIE__MSI_CAPABILITY {0} \
   CONFIG.PSU__PCIE__MULTIHEADER {0} \
   CONFIG.PSU__PCIE__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__PCIE__PERIPHERAL__ENDPOINT_ENABLE {1} \
   CONFIG.PSU__PCIE__PERIPHERAL__ROOTPORT_ENABLE {0} \
   CONFIG.PSU__PCIE__PERM_ROOT_ERR_UPDATE {0} \
   CONFIG.PSU__PCIE__RECEIVER_ERR {0} \
   CONFIG.PSU__PCIE__RECEIVER_OVERFLOW {0} \
   CONFIG.PSU__PCIE__RESET__POLARITY {Active Low} \
   CONFIG.PSU__PCIE__REVISION_ID {} \
   CONFIG.PSU__PCIE__SUBSYSTEM_ID {} \
   CONFIG.PSU__PCIE__SUBSYSTEM_VENDOR_ID {} \
   CONFIG.PSU__PCIE__SURPRISE_DOWN {0} \
   CONFIG.PSU__PCIE__TLP_PREFIX_BLOCKED {0} \
   CONFIG.PSU__PCIE__UNCORRECTABL_INT_ERR {0} \
   CONFIG.PSU__PCIE__VENDOR_ID {} \
   CONFIG.PSU__PJTAG__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__PL_CLK0_BUF {TRUE} \
   CONFIG.PSU__PL_CLK1_BUF {FALSE} \
   CONFIG.PSU__PL_CLK2_BUF {FALSE} \
   CONFIG.PSU__PL_CLK3_BUF {FALSE} \
   CONFIG.PSU__PL__POWER__ON {1} \
   CONFIG.PSU__PMU_COHERENCY {0} \
   CONFIG.PSU__PMU__AIBACK__ENABLE {0} \
   CONFIG.PSU__PMU__EMIO_GPI__ENABLE {0} \
   CONFIG.PSU__PMU__EMIO_GPO__ENABLE {0} \
   CONFIG.PSU__PMU__GPI0__ENABLE {0} \
   CONFIG.PSU__PMU__GPI1__ENABLE {0} \
   CONFIG.PSU__PMU__GPI2__ENABLE {0} \
   CONFIG.PSU__PMU__GPI3__ENABLE {0} \
   CONFIG.PSU__PMU__GPI4__ENABLE {0} \
   CONFIG.PSU__PMU__GPI5__ENABLE {0} \
   CONFIG.PSU__PMU__GPO0__ENABLE {0} \
   CONFIG.PSU__PMU__GPO1__ENABLE {0} \
   CONFIG.PSU__PMU__GPO2__ENABLE {0} \
   CONFIG.PSU__PMU__GPO3__ENABLE {0} \
   CONFIG.PSU__PMU__GPO4__ENABLE {0} \
   CONFIG.PSU__PMU__GPO5__ENABLE {0} \
   CONFIG.PSU__PMU__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__PMU__PLERROR__ENABLE {0} \
   CONFIG.PSU__PRESET_APPLIED {0} \
   CONFIG.PSU__PROTECTION__DDR_SEGMENTS {NONE} \
   CONFIG.PSU__PROTECTION__DEBUG {0} \
   CONFIG.PSU__PROTECTION__ENABLE {0} \
   CONFIG.PSU__PROTECTION__FPD_SEGMENTS {SA:0xFD1A0000; SIZE:1280; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware |  SA:0xFD000000; SIZE:64; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware |  SA:0xFD010000; SIZE:64; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware |  SA:0xFD020000; SIZE:64; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware |  SA:0xFD030000; SIZE:64; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware |  SA:0xFD040000; SIZE:64; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware |  SA:0xFD050000; SIZE:64; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware |  SA:0xFD610000; SIZE:512; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware |  SA:0xFD5D0000; SIZE:64; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware | SA:0xFD1A0000 ; SIZE:1280; UNIT:KB; RegionTZ:Secure ; WrAllowed:Read/Write; subsystemId:Secure Subsystem} \
   CONFIG.PSU__PROTECTION__LOCK_UNUSED_SEGMENTS {0} \
   CONFIG.PSU__PROTECTION__LPD_SEGMENTS {SA:0xFF980000; SIZE:64; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware| SA:0xFF5E0000; SIZE:2560; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware| SA:0xFFCC0000; SIZE:64; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware| SA:0xFF180000; SIZE:768; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware| SA:0xFF410000; SIZE:640; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware| SA:0xFFA70000; SIZE:64; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware| SA:0xFF9A0000; SIZE:64; UNIT:KB; RegionTZ:Secure; WrAllowed:Read/Write; subsystemId:PMU Firmware|SA:0xFF5E0000 ; SIZE:2560; UNIT:KB; RegionTZ:Secure ; WrAllowed:Read/Write; subsystemId:Secure Subsystem|SA:0xFFCC0000 ; SIZE:64; UNIT:KB; RegionTZ:Secure ; WrAllowed:Read/Write; subsystemId:Secure Subsystem|SA:0xFF180000 ; SIZE:768; UNIT:KB; RegionTZ:Secure ; WrAllowed:Read/Write; subsystemId:Secure Subsystem|SA:0xFF9A0000 ; SIZE:64; UNIT:KB; RegionTZ:Secure ; WrAllowed:Read/Write; subsystemId:Secure Subsystem} \
   CONFIG.PSU__PROTECTION__MASTERS {USB1:NonSecure;0|USB0:NonSecure;0|S_AXI_LPD:NA;0|S_AXI_HPC1_FPD:NA;0|S_AXI_HPC0_FPD:NA;0|S_AXI_HP3_FPD:NA;1|S_AXI_HP2_FPD:NA;1|S_AXI_HP1_FPD:NA;1|S_AXI_HP0_FPD:NA;1|S_AXI_ACP:NA;1|S_AXI_ACE:NA;0|SD1:NonSecure;0|SD0:NonSecure;0|SATA1:NonSecure;0|SATA0:NonSecure;0|RPU1:Secure;1|RPU0:Secure;1|QSPI:NonSecure;0|PMU:NA;1|PCIe:NonSecure;0|NAND:NonSecure;0|LDMA:NonSecure;1|GPU:NonSecure;1|GEM3:NonSecure;0|GEM2:NonSecure;0|GEM1:NonSecure;0|GEM0:NonSecure;0|FDMA:NonSecure;1|DP:NonSecure;0|DAP:NA;1|Coresight:NA;1|CSU:NA;1|APU:NA;1} \
   CONFIG.PSU__PROTECTION__MASTERS_TZ {GEM0:NonSecure|SD1:NonSecure|GEM2:NonSecure|GEM1:NonSecure|GEM3:NonSecure|PCIe:NonSecure|DP:NonSecure|NAND:NonSecure|GPU:NonSecure|USB1:NonSecure|USB0:NonSecure|LDMA:NonSecure|FDMA:NonSecure|QSPI:NonSecure|SD0:NonSecure} \
   CONFIG.PSU__PROTECTION__OCM_SEGMENTS {NONE} \
   CONFIG.PSU__PROTECTION__PRESUBSYSTEMS {NONE} \
   CONFIG.PSU__PROTECTION__SLAVES { \
     LPD;USB3_1_XHCI;FE300000;FE3FFFFF;0|LPD;USB3_1;FF9E0000;FF9EFFFF;0|LPD;USB3_0_XHCI;FE200000;FE2FFFFF;0|LPD;USB3_0;FF9D0000;FF9DFFFF;0|LPD;UART1;FF010000;FF01FFFF;0|LPD;UART0;FF000000;FF00FFFF;0|LPD;TTC3;FF140000;FF14FFFF;0|LPD;TTC2;FF130000;FF13FFFF;0|LPD;TTC1;FF120000;FF12FFFF;0|LPD;TTC0;FF110000;FF11FFFF;0|FPD;SWDT1;FD4D0000;FD4DFFFF;0|LPD;SWDT0;FF150000;FF15FFFF;0|LPD;SPI1;FF050000;FF05FFFF;0|LPD;SPI0;FF040000;FF04FFFF;0|FPD;SMMU_REG;FD5F0000;FD5FFFFF;1|FPD;SMMU;FD800000;FDFFFFFF;1|FPD;SIOU;FD3D0000;FD3DFFFF;1|FPD;SERDES;FD400000;FD47FFFF;1|LPD;SD1;FF170000;FF17FFFF;0|LPD;SD0;FF160000;FF16FFFF;0|FPD;SATA;FD0C0000;FD0CFFFF;0|LPD;RTC;FFA60000;FFA6FFFF;1|LPD;RSA_CORE;FFCE0000;FFCEFFFF;1|LPD;RPU;FF9A0000;FF9AFFFF;1|LPD;R5_TCM_RAM_GLOBAL;FFE00000;FFE3FFFF;1|LPD;R5_1_Instruction_Cache;FFEC0000;FFECFFFF;1|LPD;R5_1_Data_Cache;FFED0000;FFEDFFFF;1|LPD;R5_1_BTCM_GLOBAL;FFEB0000;FFEBFFFF;1|LPD;R5_1_ATCM_GLOBAL;FFE90000;FFE9FFFF;1|LPD;R5_0_Instruction_Cache;FFE40000;FFE4FFFF;1|LPD;R5_0_Data_Cache;FFE50000;FFE5FFFF;1|LPD;R5_0_BTCM_GLOBAL;FFE20000;FFE2FFFF;1|LPD;R5_0_ATCM_GLOBAL;FFE00000;FFE0FFFF;1|LPD;QSPI_Linear_Address;C0000000;DFFFFFFF;1|LPD;QSPI;FF0F0000;FF0FFFFF;0|LPD;PMU_RAM;FFDC0000;FFDDFFFF;1|LPD;PMU_GLOBAL;FFD80000;FFDBFFFF;1|FPD;PCIE_MAIN;FD0E0000;FD0EFFFF;0|FPD;PCIE_LOW;E0000000;EFFFFFFF;0|FPD;PCIE_HIGH2;8000000000;BFFFFFFFFF;0|FPD;PCIE_HIGH1;600000000;7FFFFFFFF;0|FPD;PCIE_DMA;FD0F0000;FD0FFFFF;0|FPD;PCIE_ATTRIB;FD480000;FD48FFFF;0|LPD;OCM_XMPU_CFG;FFA70000;FFA7FFFF;1|LPD;OCM_SLCR;FF960000;FF96FFFF;1|OCM;OCM;FFFC0000;FFFFFFFF;1|LPD;NAND;FF100000;FF10FFFF;0|LPD;MBISTJTAG;FFCF0000;FFCFFFFF;1|LPD;LPD_XPPU_SINK;FF9C0000;FF9CFFFF;1|LPD;LPD_XPPU;FF980000;FF98FFFF;1|LPD;LPD_SLCR_SECURE;FF4B0000;FF4DFFFF;1|LPD;LPD_SLCR;FF410000;FF4AFFFF;1|LPD;LPD_GPV;FE100000;FE1FFFFF;1|LPD;LPD_DMA_7;FFAF0000;FFAFFFFF;1|LPD;LPD_DMA_6;FFAE0000;FFAEFFFF;1|LPD;LPD_DMA_5;FFAD0000;FFADFFFF;1|LPD;LPD_DMA_4;FFAC0000;FFACFFFF;1|LPD;LPD_DMA_3;FFAB0000;FFABFFFF;1|LPD;LPD_DMA_2;FFAA0000;FFAAFFFF;1|LPD;LPD_DMA_1;FFA90000;FFA9FFFF;1|LPD;LPD_DMA_0;FFA80000;FFA8FFFF;1|LPD;IPI_CTRL;FF380000;FF3FFFFF;1|LPD;IOU_SLCR;FF180000;FF23FFFF;1|LPD;IOU_SECURE_SLCR;FF240000;FF24FFFF;1|LPD;IOU_SCNTRS;FF260000;FF26FFFF;1|LPD;IOU_SCNTR;FF250000;FF25FFFF;1|LPD;IOU_GPV;FE000000;FE0FFFFF;1|LPD;I2C1;FF030000;FF03FFFF;0|LPD;I2C0;FF020000;FF02FFFF;0|FPD;GPU;FD4B0000;FD4BFFFF;0|LPD;GPIO;FF0A0000;FF0AFFFF;1|LPD;GEM3;FF0E0000;FF0EFFFF;0|LPD;GEM2;FF0D0000;FF0DFFFF;0|LPD;GEM1;FF0C0000;FF0CFFFF;0|LPD;GEM0;FF0B0000;FF0BFFFF;0|FPD;FPD_XMPU_SINK;FD4F0000;FD4FFFFF;1|FPD;FPD_XMPU_CFG;FD5D0000;FD5DFFFF;1|FPD;FPD_SLCR_SECURE;FD690000;FD6CFFFF;1|FPD;FPD_SLCR;FD610000;FD68FFFF;1|FPD;FPD_DMA_CH7;FD570000;FD57FFFF;1|FPD;FPD_DMA_CH6;FD560000;FD56FFFF;1|FPD;FPD_DMA_CH5;FD550000;FD55FFFF;1|FPD;FPD_DMA_CH4;FD540000;FD54FFFF;1|FPD;FPD_DMA_CH3;FD530000;FD53FFFF;1|FPD;FPD_DMA_CH2;FD520000;FD52FFFF;1|FPD;FPD_DMA_CH1;FD510000;FD51FFFF;1|FPD;FPD_DMA_CH0;FD500000;FD50FFFF;1|LPD;EFUSE;FFCC0000;FFCCFFFF;1|FPD;Display Port;FD4A0000;FD4AFFFF;0|FPD;DPDMA;FD4C0000;FD4CFFFF;0|FPD;DDR_XMPU5_CFG;FD050000;FD05FFFF;1|FPD;DDR_XMPU4_CFG;FD040000;FD04FFFF;1|FPD;DDR_XMPU3_CFG;FD030000;FD03FFFF;1|FPD;DDR_XMPU2_CFG;FD020000;FD02FFFF;1|FPD;DDR_XMPU1_CFG;FD010000;FD01FFFF;1|FPD;DDR_XMPU0_CFG;FD000000;FD00FFFF;1|FPD;DDR_QOS_CTRL;FD090000;FD09FFFF;1|FPD;DDR_PHY;FD080000;FD08FFFF;1|DDR;DDR_LOW;0;7FFFFFFF;1|DDR;DDR_HIGH;800000000;800000000;0|FPD;DDDR_CTRL;FD070000;FD070FFF;1|LPD;Coresight;FE800000;FEFFFFFF;1|LPD;CSU_DMA;FFC80000;FFC9FFFF;1|LPD;CSU;FFCA0000;FFCAFFFF;1|LPD;CRL_APB;FF5E0000;FF85FFFF;1|FPD;CRF_APB;FD1A0000;FD2DFFFF;1|FPD;CCI_REG;FD5E0000;FD5EFFFF;1|LPD;CAN1;FF070000;FF07FFFF;0|LPD;CAN0;FF060000;FF06FFFF;0|FPD;APU;FD5C0000;FD5CFFFF;1|LPD;APM_INTC_IOU;FFA20000;FFA2FFFF;1|LPD;APM_FPD_LPD;FFA30000;FFA3FFFF;1|FPD;APM_5;FD490000;FD49FFFF;1|FPD;APM_0;FD0B0000;FD0BFFFF;1|LPD;APM2;FFA10000;FFA1FFFF;1|LPD;APM1;FFA00000;FFA0FFFF;1|LPD;AMS;FFA50000;FFA5FFFF;1|FPD;AFI_5;FD3B0000;FD3BFFFF;1|FPD;AFI_4;FD3A0000;FD3AFFFF;1|FPD;AFI_3;FD390000;FD39FFFF;1|FPD;AFI_2;FD380000;FD38FFFF;1|FPD;AFI_1;FD370000;FD37FFFF;1|FPD;AFI_0;FD360000;FD36FFFF;1|LPD;AFIFM6;FF9B0000;FF9BFFFF;1|FPD;ACPU_GIC;F9010000;F907FFFF;1 \
   } \
   CONFIG.PSU__PROTECTION__SUBSYSTEMS {PMU Firmware:PMU|Secure Subsystem:} \
   CONFIG.PSU__PSS_ALT_REF_CLK__ENABLE {0} \
   CONFIG.PSU__PSS_ALT_REF_CLK__FREQMHZ {33.333} \
   CONFIG.PSU__PSS_REF_CLK__FREQMHZ {33.333} \
   CONFIG.PSU__QSPI_COHERENCY {0} \
   CONFIG.PSU__QSPI_ROUTE_THROUGH_FPD {0} \
   CONFIG.PSU__QSPI__GRP_FBCLK__ENABLE {0} \
   CONFIG.PSU__QSPI__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__REPORT__DBGLOG {0} \
   CONFIG.PSU__RPU_COHERENCY {0} \
   CONFIG.PSU__RPU__POWER__ON {1} \
   CONFIG.PSU__SATA__LANE0__ENABLE {0} \
   CONFIG.PSU__SATA__LANE1__ENABLE {0} \
   CONFIG.PSU__SATA__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__SAXIGP0__DATA_WIDTH {128} \
   CONFIG.PSU__SAXIGP1__DATA_WIDTH {128} \
   CONFIG.PSU__SAXIGP2__DATA_WIDTH {128} \
   CONFIG.PSU__SAXIGP3__DATA_WIDTH {128} \
   CONFIG.PSU__SAXIGP4__DATA_WIDTH {128} \
   CONFIG.PSU__SAXIGP5__DATA_WIDTH {128} \
   CONFIG.PSU__SAXIGP6__DATA_WIDTH {128} \
   CONFIG.PSU__SD0_COHERENCY {0} \
   CONFIG.PSU__SD0_ROUTE_THROUGH_FPD {0} \
   CONFIG.PSU__SD0__GRP_CD__ENABLE {0} \
   CONFIG.PSU__SD0__GRP_POW__ENABLE {0} \
   CONFIG.PSU__SD0__GRP_WP__ENABLE {0} \
   CONFIG.PSU__SD0__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__SD0__RESET__ENABLE {0} \
   CONFIG.PSU__SD1_COHERENCY {0} \
   CONFIG.PSU__SD1_ROUTE_THROUGH_FPD {0} \
   CONFIG.PSU__SD1__GRP_CD__ENABLE {0} \
   CONFIG.PSU__SD1__GRP_POW__ENABLE {0} \
   CONFIG.PSU__SD1__GRP_WP__ENABLE {0} \
   CONFIG.PSU__SD1__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__SD1__RESET__ENABLE {0} \
   CONFIG.PSU__SPI0_LOOP_SPI1__ENABLE {0} \
   CONFIG.PSU__SPI0__GRP_SS0__ENABLE {0} \
   CONFIG.PSU__SPI0__GRP_SS1__ENABLE {0} \
   CONFIG.PSU__SPI0__GRP_SS2__ENABLE {0} \
   CONFIG.PSU__SPI0__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__SPI1__GRP_SS0__ENABLE {0} \
   CONFIG.PSU__SPI1__GRP_SS1__ENABLE {0} \
   CONFIG.PSU__SPI1__GRP_SS2__ENABLE {0} \
   CONFIG.PSU__SPI1__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__SWDT0__CLOCK__ENABLE {0} \
   CONFIG.PSU__SWDT0__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__SWDT0__PERIPHERAL__IO {NA} \
   CONFIG.PSU__SWDT0__RESET__ENABLE {0} \
   CONFIG.PSU__SWDT1__CLOCK__ENABLE {0} \
   CONFIG.PSU__SWDT1__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__SWDT1__PERIPHERAL__IO {NA} \
   CONFIG.PSU__SWDT1__RESET__ENABLE {0} \
   CONFIG.PSU__TCM0A__POWER__ON {1} \
   CONFIG.PSU__TCM0B__POWER__ON {1} \
   CONFIG.PSU__TCM1A__POWER__ON {1} \
   CONFIG.PSU__TCM1B__POWER__ON {1} \
   CONFIG.PSU__TESTSCAN__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__TRACE_PIPELINE_WIDTH {8} \
   CONFIG.PSU__TRACE__INTERNAL_WIDTH {32} \
   CONFIG.PSU__TRACE__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__TRISTATE__INVERTED {1} \
   CONFIG.PSU__TSU__BUFG_PORT_PAIR {0} \
   CONFIG.PSU__TTC0__CLOCK__ENABLE {0} \
   CONFIG.PSU__TTC0__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__TTC0__PERIPHERAL__IO {NA} \
   CONFIG.PSU__TTC0__WAVEOUT__ENABLE {0} \
   CONFIG.PSU__TTC1__CLOCK__ENABLE {0} \
   CONFIG.PSU__TTC1__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__TTC1__PERIPHERAL__IO {NA} \
   CONFIG.PSU__TTC1__WAVEOUT__ENABLE {0} \
   CONFIG.PSU__TTC2__CLOCK__ENABLE {0} \
   CONFIG.PSU__TTC2__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__TTC2__PERIPHERAL__IO {NA} \
   CONFIG.PSU__TTC2__WAVEOUT__ENABLE {0} \
   CONFIG.PSU__TTC3__CLOCK__ENABLE {0} \
   CONFIG.PSU__TTC3__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__TTC3__PERIPHERAL__IO {NA} \
   CONFIG.PSU__TTC3__WAVEOUT__ENABLE {0} \
   CONFIG.PSU__UART0_LOOP_UART1__ENABLE {0} \
   CONFIG.PSU__UART0__MODEM__ENABLE {0} \
   CONFIG.PSU__UART0__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__UART1__MODEM__ENABLE {0} \
   CONFIG.PSU__UART1__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__USB0_COHERENCY {0} \
   CONFIG.PSU__USB0__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__USB0__RESET__ENABLE {0} \
   CONFIG.PSU__USB1_COHERENCY {0} \
   CONFIG.PSU__USB1__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__USB1__RESET__ENABLE {0} \
   CONFIG.PSU__USB2_0__EMIO__ENABLE {0} \
   CONFIG.PSU__USB2_1__EMIO__ENABLE {0} \
   CONFIG.PSU__USB3_0__EMIO__ENABLE {0} \
   CONFIG.PSU__USB3_0__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__USB3_1__EMIO__ENABLE {0} \
   CONFIG.PSU__USB3_1__PERIPHERAL__ENABLE {0} \
   CONFIG.PSU__USE_DIFF_RW_CLK_GP0 {0} \
   CONFIG.PSU__USE_DIFF_RW_CLK_GP1 {0} \
   CONFIG.PSU__USE_DIFF_RW_CLK_GP2 {0} \
   CONFIG.PSU__USE_DIFF_RW_CLK_GP3 {0} \
   CONFIG.PSU__USE_DIFF_RW_CLK_GP4 {0} \
   CONFIG.PSU__USE_DIFF_RW_CLK_GP5 {0} \
   CONFIG.PSU__USE_DIFF_RW_CLK_GP6 {0} \
   CONFIG.PSU__USE__ADMA {0} \
   CONFIG.PSU__USE__APU_LEGACY_INTERRUPT {0} \
   CONFIG.PSU__USE__AUDIO {0} \
   CONFIG.PSU__USE__CLK {0} \
   CONFIG.PSU__USE__CLK0 {0} \
   CONFIG.PSU__USE__CLK1 {0} \
   CONFIG.PSU__USE__CLK2 {0} \
   CONFIG.PSU__USE__CLK3 {0} \
   CONFIG.PSU__USE__CROSS_TRIGGER {0} \
   CONFIG.PSU__USE__DDR_INTF_REQUESTED {0} \
   CONFIG.PSU__USE__DEBUG__TEST {0} \
   CONFIG.PSU__USE__EVENT_RPU {0} \
   CONFIG.PSU__USE__FABRIC__RST {1} \
   CONFIG.PSU__USE__FTM {0} \
   CONFIG.PSU__USE__GDMA {0} \
   CONFIG.PSU__USE__IRQ {0} \
   CONFIG.PSU__USE__IRQ0 {1} \
   CONFIG.PSU__USE__IRQ1 {0} \
   CONFIG.PSU__USE__M_AXI_GP0 {1} \
   CONFIG.PSU__USE__M_AXI_GP1 {1} \
   CONFIG.PSU__USE__M_AXI_GP2 {1} \
   CONFIG.PSU__USE__PROC_EVENT_BUS {0} \
   CONFIG.PSU__USE__RPU_LEGACY_INTERRUPT {0} \
   CONFIG.PSU__USE__RST0 {0} \
   CONFIG.PSU__USE__RST1 {0} \
   CONFIG.PSU__USE__RST2 {0} \
   CONFIG.PSU__USE__RST3 {0} \
   CONFIG.PSU__USE__RTC {0} \
   CONFIG.PSU__USE__STM {0} \
   CONFIG.PSU__USE__S_AXI_ACE {0} \
   CONFIG.PSU__USE__S_AXI_ACP {1} \
   CONFIG.PSU__USE__S_AXI_GP0 {0} \
   CONFIG.PSU__USE__S_AXI_GP1 {0} \
   CONFIG.PSU__USE__S_AXI_GP2 {1} \
   CONFIG.PSU__USE__S_AXI_GP3 {1} \
   CONFIG.PSU__USE__S_AXI_GP4 {1} \
   CONFIG.PSU__USE__S_AXI_GP5 {1} \
   CONFIG.PSU__USE__S_AXI_GP6 {0} \
   CONFIG.PSU__USE__USB3_0_HUB {0} \
   CONFIG.PSU__USE__USB3_1_HUB {0} \
   CONFIG.PSU__USE__VIDEO {0} \
   CONFIG.PSU__VIDEO_REF_CLK__ENABLE {0} \
   CONFIG.PSU__VIDEO_REF_CLK__FREQMHZ {33.333} \
   CONFIG.QSPI_BOARD_INTERFACE {custom} \
   CONFIG.SATA_BOARD_INTERFACE {custom} \
   CONFIG.SD0_BOARD_INTERFACE {custom} \
   CONFIG.SD1_BOARD_INTERFACE {custom} \
   CONFIG.SPI0_BOARD_INTERFACE {custom} \
   CONFIG.SPI1_BOARD_INTERFACE {custom} \
   CONFIG.SUBPRESET2 {Custom} \
   CONFIG.SWDT0_BOARD_INTERFACE {custom} \
   CONFIG.SWDT1_BOARD_INTERFACE {custom} \
   CONFIG.TRACE_BOARD_INTERFACE {custom} \
   CONFIG.TTC0_BOARD_INTERFACE {custom} \
   CONFIG.TTC1_BOARD_INTERFACE {custom} \
   CONFIG.TTC2_BOARD_INTERFACE {custom} \
   CONFIG.TTC3_BOARD_INTERFACE {custom} \
   CONFIG.UART0_BOARD_INTERFACE {custom} \
   CONFIG.UART1_BOARD_INTERFACE {custom} \
   CONFIG.USB0_BOARD_INTERFACE {custom} \
   CONFIG.USB1_BOARD_INTERFACE {custom} \
 ] $zynq_ultra_ps_e_0

  # Create interface connections
  connect_bd_intf_net -intf_net AXI_Interconnect_grp_M04_AXI1 [get_bd_intf_pins axi_interconnect_0/M04_AXI] [get_bd_intf_pins usp_rf_data_converter_0/s_axi]
  connect_bd_intf_net -intf_net AXI_Interconnect_grp_M05_AXI1 [get_bd_intf_pins axi_intc_0/s_axi] [get_bd_intf_pins axi_interconnect_0/M05_AXI]
  connect_bd_intf_net -intf_net AXI_Interconnect_grp_M06_AXI1 [get_bd_intf_pins Readout_DMA_0/S_AXI_LITE] [get_bd_intf_pins axi_interconnect_0/M06_AXI]
  connect_bd_intf_net -intf_net PL_CLK_1 [get_bd_intf_ports PL_CLK] [get_bd_intf_pins util_ds_buf_0/CLK_IN_D]
  connect_bd_intf_net -intf_net Readout_DMA_0_M_AXI_S2MM [get_bd_intf_pins Readout_DMA_0/M_AXI_S2MM] [get_bd_intf_pins zynq_ultra_ps_e_0/S_AXI_HP0_FPD]
  connect_bd_intf_net -intf_net Readout_DMA_1_M_AXI_S2MM [get_bd_intf_pins Readout_DMA_1/M_AXI_S2MM] [get_bd_intf_pins zynq_ultra_ps_e_0/S_AXI_HP1_FPD]
  connect_bd_intf_net -intf_net Readout_DMA_1_M_AXI_SG [get_bd_intf_pins Readout_DMA_1/M_AXI_SG] [get_bd_intf_pins axi_smc_1/S01_AXI]
  connect_bd_intf_net -intf_net Readout_DMA_2_M_AXI_S2MM [get_bd_intf_pins Readout_DMA_2/M_AXI_S2MM] [get_bd_intf_pins zynq_ultra_ps_e_0/S_AXI_HP2_FPD]
  connect_bd_intf_net -intf_net Readout_DMA_2_M_AXI_SG [get_bd_intf_pins Readout_DMA_2/M_AXI_SG] [get_bd_intf_pins axi_smc_1/S02_AXI]
  connect_bd_intf_net -intf_net Readout_DMA_3_M_AXI_S2MM [get_bd_intf_pins Readout_DMA_3/M_AXI_S2MM] [get_bd_intf_pins zynq_ultra_ps_e_0/S_AXI_HP3_FPD]
  connect_bd_intf_net -intf_net Readout_DMA_3_M_AXI_SG [get_bd_intf_pins Readout_DMA_3/M_AXI_SG] [get_bd_intf_pins axi_smc_1/S03_AXI]
  connect_bd_intf_net -intf_net S00_AXI1_1 [get_bd_intf_pins Readout_DMA_0/M_AXI_SG] [get_bd_intf_pins axi_smc_1/S00_AXI]
  connect_bd_intf_net -intf_net S_AXI1_2 [get_bd_intf_pins DAC_00_10/S_AXI1] [get_bd_intf_pins axi_interconnect_0/M01_AXI]
  connect_bd_intf_net -intf_net S_AXI2_2 [get_bd_intf_pins DAC_00_10/S_AXI2] [get_bd_intf_pins axi_interconnect_0/M02_AXI]
  connect_bd_intf_net -intf_net S_AXI3_2 [get_bd_intf_pins DAC_00_10/S_AXI3] [get_bd_intf_pins axi_interconnect_0/M03_AXI]
  connect_bd_intf_net -intf_net S_AXI_2 [get_bd_intf_pins DAC_00_10/S_AXI] [get_bd_intf_pins axi_interconnect_0/M00_AXI]
  connect_bd_intf_net -intf_net adc0_clk_0_1 [get_bd_intf_ports adc0_clk_0] [get_bd_intf_pins usp_rf_data_converter_0/adc0_clk]
  connect_bd_intf_net -intf_net adc1_clk_0_1 [get_bd_intf_ports adc1_clk_0] [get_bd_intf_pins usp_rf_data_converter_0/adc1_clk]
  connect_bd_intf_net -intf_net adc2_clk_0_1 [get_bd_intf_ports adc2_clk_0] [get_bd_intf_pins usp_rf_data_converter_0/adc2_clk]
  connect_bd_intf_net -intf_net adc3_clk_0_1 [get_bd_intf_ports adc3_clk_0] [get_bd_intf_pins usp_rf_data_converter_0/adc3_clk]
  connect_bd_intf_net -intf_net axi_interconnect_0_M07_AXI [get_bd_intf_pins axi_interconnect_0/M07_AXI] [get_bd_intf_pins hier_splitter_dac_0/S_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M08_AXI [get_bd_intf_pins axi_interconnect_0/M08_AXI] [get_bd_intf_pins hier_splitter_dac_2/S_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M09_AXI [get_bd_intf_pins axi_interconnect_0/M09_AXI] [get_bd_intf_pins hier_splitter_dac_3/S_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M10_AXI [get_bd_intf_pins axi_interconnect_0/M10_AXI] [get_bd_intf_pins hier_splitter_dac_1/S_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M11_AXI [get_bd_intf_pins axi_interconnect_0/M11_AXI] [get_bd_intf_pins loopback_test_sel/S_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M12_AXI [get_bd_intf_pins axi_interconnect_0/M12_AXI] [get_bd_intf_pins start_fifo_cap/S_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M13_AXI [get_bd_intf_pins axi_interconnect_0/M13_AXI] [get_bd_intf_pins iir_coeff/S_AXI]
  connect_bd_intf_net -intf_net axi_smc_1_M00_AXI [get_bd_intf_pins axi_smc_1/M00_AXI] [get_bd_intf_pins zynq_ultra_ps_e_0/S_AXI_ACP_FPD]
  connect_bd_intf_net -intf_net axi_smc_M00_AXI [get_bd_intf_pins DAC_01_11/S_AXI] [get_bd_intf_pins axi_smc/M00_AXI]
  connect_bd_intf_net -intf_net axi_smc_M01_AXI [get_bd_intf_pins DAC_01_11/S_AXI1] [get_bd_intf_pins axi_smc/M01_AXI]
  connect_bd_intf_net -intf_net axi_smc_M02_AXI [get_bd_intf_pins DAC_01_11/S_AXI2] [get_bd_intf_pins axi_smc/M02_AXI]
  connect_bd_intf_net -intf_net axi_smc_M03_AXI [get_bd_intf_pins DAC_01_11/S_AXI3] [get_bd_intf_pins axi_smc/M03_AXI]
  connect_bd_intf_net -intf_net axi_smc_M04_AXI [get_bd_intf_pins DAC_02_12/S_AXI] [get_bd_intf_pins axi_smc/M04_AXI]
  connect_bd_intf_net -intf_net axi_smc_M05_AXI [get_bd_intf_pins DAC_02_12/S_AXI1] [get_bd_intf_pins axi_smc/M05_AXI]
  connect_bd_intf_net -intf_net axi_smc_M06_AXI [get_bd_intf_pins DAC_02_12/S_AXI2] [get_bd_intf_pins axi_smc/M06_AXI]
  connect_bd_intf_net -intf_net axi_smc_M07_AXI [get_bd_intf_pins DAC_02_12/S_AXI3] [get_bd_intf_pins axi_smc/M07_AXI]
  connect_bd_intf_net -intf_net axi_smc_M08_AXI [get_bd_intf_pins DAC_03_13/S_AXI] [get_bd_intf_pins axi_smc/M08_AXI]
  connect_bd_intf_net -intf_net axi_smc_M09_AXI [get_bd_intf_pins DAC_03_13/S_AXI1] [get_bd_intf_pins axi_smc/M09_AXI]
  connect_bd_intf_net -intf_net axi_smc_M10_AXI [get_bd_intf_pins DAC_03_13/S_AXI2] [get_bd_intf_pins axi_smc/M10_AXI]
  connect_bd_intf_net -intf_net axi_smc_M11_AXI [get_bd_intf_pins DAC_03_13/S_AXI3] [get_bd_intf_pins axi_smc/M11_AXI]
  connect_bd_intf_net -intf_net axi_smc_M12_AXI [get_bd_intf_pins Readout_DMA_1/S_AXI_LITE] [get_bd_intf_pins axi_smc/M12_AXI]
  connect_bd_intf_net -intf_net axi_smc_M13_AXI [get_bd_intf_pins Readout_DMA_2/S_AXI_LITE] [get_bd_intf_pins axi_smc/M13_AXI]
  connect_bd_intf_net -intf_net axi_smc_M14_AXI [get_bd_intf_pins Readout_DMA_3/S_AXI_LITE] [get_bd_intf_pins axi_smc/M14_AXI]
  connect_bd_intf_net -intf_net dac0_clk_0_1 [get_bd_intf_ports dac0_clk_0] [get_bd_intf_pins usp_rf_data_converter_0/dac0_clk]
  connect_bd_intf_net -intf_net dac1_clk_0_1 [get_bd_intf_ports dac1_clk_0] [get_bd_intf_pins usp_rf_data_converter_0/dac1_clk]
  connect_bd_intf_net -intf_net pl_sysref_0_1 [get_bd_intf_ports pl_sysref_0] [get_bd_intf_pins pl_sysref_0/pl_sysref]
  connect_bd_intf_net -intf_net sysref_in_0_1 [get_bd_intf_ports sysref_in_0] [get_bd_intf_pins usp_rf_data_converter_0/sysref_in]
  connect_bd_intf_net -intf_net usp_rf_data_converter_0_vout00 [get_bd_intf_ports vout00_0] [get_bd_intf_pins usp_rf_data_converter_0/vout00]
  connect_bd_intf_net -intf_net usp_rf_data_converter_0_vout01 [get_bd_intf_ports vout01_0] [get_bd_intf_pins usp_rf_data_converter_0/vout01]
  connect_bd_intf_net -intf_net usp_rf_data_converter_0_vout02 [get_bd_intf_ports vout02_0] [get_bd_intf_pins usp_rf_data_converter_0/vout02]
  connect_bd_intf_net -intf_net usp_rf_data_converter_0_vout03 [get_bd_intf_ports vout03_0] [get_bd_intf_pins usp_rf_data_converter_0/vout03]
  connect_bd_intf_net -intf_net usp_rf_data_converter_0_vout10 [get_bd_intf_ports vout10_0] [get_bd_intf_pins usp_rf_data_converter_0/vout10]
  connect_bd_intf_net -intf_net usp_rf_data_converter_0_vout11 [get_bd_intf_ports vout11_0] [get_bd_intf_pins usp_rf_data_converter_0/vout11]
  connect_bd_intf_net -intf_net usp_rf_data_converter_0_vout12 [get_bd_intf_ports vout12_0] [get_bd_intf_pins usp_rf_data_converter_0/vout12]
  connect_bd_intf_net -intf_net usp_rf_data_converter_0_vout13 [get_bd_intf_ports vout13_1] [get_bd_intf_pins usp_rf_data_converter_0/vout13]
  connect_bd_intf_net -intf_net vin0_01_0_1 [get_bd_intf_ports vin0_01_0] [get_bd_intf_pins usp_rf_data_converter_0/vin0_01]
  connect_bd_intf_net -intf_net vin0_23_0_1 [get_bd_intf_ports vin0_23_0] [get_bd_intf_pins usp_rf_data_converter_0/vin0_23]
  connect_bd_intf_net -intf_net vin1_01_0_1 [get_bd_intf_ports vin1_01_0] [get_bd_intf_pins usp_rf_data_converter_0/vin1_01]
  connect_bd_intf_net -intf_net vin1_23_0_1 [get_bd_intf_ports vin1_23_0] [get_bd_intf_pins usp_rf_data_converter_0/vin1_23]
  connect_bd_intf_net -intf_net vin2_01_0_1 [get_bd_intf_ports vin2_01_0] [get_bd_intf_pins usp_rf_data_converter_0/vin2_01]
  connect_bd_intf_net -intf_net vin2_23_0_1 [get_bd_intf_ports vin2_23_0] [get_bd_intf_pins usp_rf_data_converter_0/vin2_23]
  connect_bd_intf_net -intf_net vin3_01_0_1 [get_bd_intf_ports vin3_01_0] [get_bd_intf_pins usp_rf_data_converter_0/vin3_01]
  connect_bd_intf_net -intf_net vin3_23_0_1 [get_bd_intf_ports vin3_23_0] [get_bd_intf_pins usp_rf_data_converter_0/vin3_23]
  connect_bd_intf_net -intf_net zynq_ultra_ps_e_0_M_AXI_HPM0_FPD [get_bd_intf_pins axi_smc/S00_AXI] [get_bd_intf_pins zynq_ultra_ps_e_0/M_AXI_HPM0_FPD]
  connect_bd_intf_net -intf_net zynq_ultra_ps_e_0_M_AXI_HPM0_LPD [get_bd_intf_pins axi_interconnect_0/S01_AXI] [get_bd_intf_pins zynq_ultra_ps_e_0/M_AXI_HPM0_LPD]
  connect_bd_intf_net -intf_net zynq_ultra_ps_e_0_M_AXI_HPM1_FPD [get_bd_intf_pins axi_interconnect_0/S00_AXI] [get_bd_intf_pins zynq_ultra_ps_e_0/M_AXI_HPM1_FPD]

  # Create port connections
  connect_bd_net -net ADC_01_21_mux_data_out [get_bd_pins ADC_02_22_mux/data_out] [get_bd_pins Filters_Rotation_ADC_02_22/I] [get_bd_pins adc_ila_mux_0/data1]
  connect_bd_net -net ADC_01_21_mux_data_out1 [get_bd_pins ADC_02_22_mux/data_out1] [get_bd_pins Filters_Rotation_ADC_02_22/I_valid] [get_bd_pins adc_ila_mux_1/data1]
  connect_bd_net -net ADC_01_21_mux_data_out2 [get_bd_pins ADC_02_22_mux/data_out2] [get_bd_pins Filters_Rotation_ADC_02_22/Q_valid] [get_bd_pins adc_ila_mux_3/data1]
  connect_bd_net -net ADC_01_21_mux_data_out3 [get_bd_pins ADC_02_22_mux/data_out3] [get_bd_pins Filters_Rotation_ADC_02_22/Q] [get_bd_pins adc_ila_mux_2/data1]
  connect_bd_net -net ADC_10_30_mux_data_out [get_bd_pins ADC_10_30_mux/data_out] [get_bd_pins Filters_Rotation_ADC_10_30/I] [get_bd_pins adc_ila_mux_0/data4]
  connect_bd_net -net ADC_10_30_mux_data_out1 [get_bd_pins ADC_10_30_mux/data_out1] [get_bd_pins Filters_Rotation_ADC_10_30/I_valid] [get_bd_pins adc_ila_mux_1/data4]
  connect_bd_net -net ADC_10_30_mux_data_out2 [get_bd_pins ADC_10_30_mux/data_out2] [get_bd_pins Filters_Rotation_ADC_10_30/Q_valid] [get_bd_pins adc_ila_mux_3/data4]
  connect_bd_net -net ADC_10_30_mux_data_out3 [get_bd_pins ADC_10_30_mux/data_out3] [get_bd_pins Filters_Rotation_ADC_10_30/Q] [get_bd_pins adc_ila_mux_2/data4]
  connect_bd_net -net ADC_11_31_mux_data_out [get_bd_pins ADC_12_32_mux/data_out] [get_bd_pins Filters_Rotation_ADC_12_32/I] [get_bd_pins adc_ila_mux_0/data3]
  connect_bd_net -net ADC_11_31_mux_data_out1 [get_bd_pins ADC_12_32_mux/data_out1] [get_bd_pins Filters_Rotation_ADC_12_32/I_valid] [get_bd_pins adc_ila_mux_1/data3]
  connect_bd_net -net ADC_11_31_mux_data_out2 [get_bd_pins ADC_12_32_mux/data_out2] [get_bd_pins Filters_Rotation_ADC_12_32/Q_valid] [get_bd_pins adc_ila_mux_3/data3]
  connect_bd_net -net ADC_11_31_mux_data_out3 [get_bd_pins ADC_12_32_mux/data_out3] [get_bd_pins Filters_Rotation_ADC_12_32/Q] [get_bd_pins adc_ila_mux_2/data3]
  connect_bd_net -net DAC_02_12_D_out [get_bd_pins DAC_02_12/D_out] [get_bd_pins hier_trig_sel2/data2] [get_bd_pins hier_trig_sel6/data2]
  connect_bd_net -net DAC_03_13_D_out [get_bd_pins DAC_03_13/D_out] [get_bd_pins hier_trig_sel3/data2] [get_bd_pins hier_trig_sel7/data2] [get_bd_pins system_ila_1/probe63]
  connect_bd_net -net DAC_03_13_I1 [get_bd_pins DAC_03_13/I1] [get_bd_pins system_ila_1/probe72]
  connect_bd_net -net DAC_03_13_Iavg1 [get_bd_pins DAC_03_13/Iavg1] [get_bd_pins system_ila_1/probe73]
  connect_bd_net -net DAC_03_13_address [get_bd_pins DAC_03_13/address] [get_bd_pins system_ila_1/probe0]
  connect_bd_net -net DAC_03_13_address0 [get_bd_pins DAC_03_13/address0] [get_bd_pins system_ila_1/probe70]
  connect_bd_net -net DAC_03_13_amp_increment [get_bd_pins DAC_03_13/amp_increment] [get_bd_pins system_ila_1/probe68]
  connect_bd_net -net DAC_03_13_data_out [get_bd_pins DAC_03_13/data_out] [get_bd_pins system_ila_1/probe74]
  connect_bd_net -net DAC_03_13_data_out2 [get_bd_pins DAC_03_13/data_out2] [get_bd_pins system_ila_1/probe75]
  connect_bd_net -net DAC_03_13_data_out_I [get_bd_pins DAC_03_13/data_out_I] [get_bd_pins system_ila_1/probe65]
  connect_bd_net -net DAC_03_13_data_out_Q [get_bd_pins DAC_03_13/data_out_Q] [get_bd_pins system_ila_1/probe66]
  connect_bd_net -net DAC_03_13_doutb [get_bd_pins DAC_03_13/doutb] [get_bd_pins system_ila_1/probe61]
  connect_bd_net -net DAC_03_13_half_reg [get_bd_pins DAC_03_13/half_reg] [get_bd_pins system_ila_1/probe71]
  connect_bd_net -net DAC_03_13_mode_out [get_bd_pins DAC_03_13/mode_out] [get_bd_pins system_ila_1/probe69]
  connect_bd_net -net DAC_03_13_out1 [get_bd_pins DAC_03_13/out1] [get_bd_pins system_ila_1/probe76]
  connect_bd_net -net DAC_03_13_trigger [get_bd_pins DAC_03_13/trigger] [get_bd_pins system_ila_1/probe67]
  connect_bd_net -net DAC_12_D_out [get_bd_pins DAC_00_10/D_out] [get_bd_pins hier_trig_sel/data2] [get_bd_pins hier_trig_sel4/data2]
  connect_bd_net -net DAC_12_data_out [get_bd_pins DAC_00_10/bram_addr_out] [get_bd_pins hier_bram_addr_trigen_0/data0] [get_bd_pins hier_bram_addr_trigen_1/data2] [get_bd_pins hier_bram_addr_trigen_2/data2] [get_bd_pins hier_bram_addr_trigen_3/data2] [get_bd_pins system_ila_1/probe51]
  connect_bd_net -net DAC_12_trigger_out [get_bd_pins DAC_00_10/trigger_out] [get_bd_pins DAC_02_trigger/I2]
  connect_bd_net -net DAC_13_D_out [get_bd_pins DAC_01_11/D_out] [get_bd_pins hier_trig_sel1/data2] [get_bd_pins hier_trig_sel5/data2] [get_bd_pins system_ila_1/probe18]
  connect_bd_net -net DAC_13_Dout1 [get_bd_pins DAC_01_11/Dout1] [get_bd_pins trigger_gen1/rst]
  connect_bd_net -net DAC_13_bram_addr_out [get_bd_pins DAC_01_11/bram_addr_out] [get_bd_pins hier_bram_addr_trigen_0/data1] [get_bd_pins hier_bram_addr_trigen_1/data1] [get_bd_pins hier_bram_addr_trigen_2/data1] [get_bd_pins hier_bram_addr_trigen_3/data1]
  connect_bd_net -net DAC_14_bram_addr_out [get_bd_pins DAC_02_12/bram_addr_out] [get_bd_pins hier_bram_addr_trigen_0/data2] [get_bd_pins hier_bram_addr_trigen_1/data4] [get_bd_pins hier_bram_addr_trigen_2/data4] [get_bd_pins hier_bram_addr_trigen_3/data4]
  connect_bd_net -net DAC_15_bram_addr_out [get_bd_pins DAC_03_13/bram_addr_out] [get_bd_pins hier_bram_addr_trigen_0/data3] [get_bd_pins hier_bram_addr_trigen_1/data3] [get_bd_pins hier_bram_addr_trigen_2/data3] [get_bd_pins hier_bram_addr_trigen_3/data3]
  connect_bd_net -net Din1_2 [get_bd_pins ADC_10_30_mux/data7] [get_bd_pins usp_rf_data_converter_0/m11_axis_tdata]
  connect_bd_net -net Din1_3 [get_bd_pins ADC_12_32_mux/data7] [get_bd_pins usp_rf_data_converter_0/m13_axis_tdata]
  connect_bd_net -net Din1_4 [get_bd_pins ADC_10_30_mux/data8] [get_bd_pins usp_rf_data_converter_0/m31_axis_tdata]
  connect_bd_net -net Din1_5 [get_bd_pins ADC_12_32_mux/data8] [get_bd_pins usp_rf_data_converter_0/m33_axis_tdata]
  connect_bd_net -net Din_0_0_1 [get_bd_pins adc_ila_mux_0/Din_0] [get_bd_pins adc_ila_mux_1/Din_0] [get_bd_pins adc_ila_mux_10/Din_0] [get_bd_pins adc_ila_mux_11/Din_0] [get_bd_pins adc_ila_mux_12/Din_0] [get_bd_pins adc_ila_mux_13/Din_0] [get_bd_pins adc_ila_mux_14/Din_0] [get_bd_pins adc_ila_mux_15/Din_0] [get_bd_pins adc_ila_mux_16/Din_0] [get_bd_pins adc_ila_mux_17/Din_0] [get_bd_pins adc_ila_mux_18/Din_0] [get_bd_pins adc_ila_mux_19/Din_0] [get_bd_pins adc_ila_mux_2/Din_0] [get_bd_pins adc_ila_mux_20/Din_0] [get_bd_pins adc_ila_mux_21/Din_0] [get_bd_pins adc_ila_mux_22/Din_0] [get_bd_pins adc_ila_mux_23/Din_0] [get_bd_pins adc_ila_mux_24/Din_0] [get_bd_pins adc_ila_mux_25/Din_0] [get_bd_pins adc_ila_mux_26/Din_0] [get_bd_pins adc_ila_mux_27/Din_0] [get_bd_pins adc_ila_mux_28/Din_0] [get_bd_pins adc_ila_mux_29/Din_0] [get_bd_pins adc_ila_mux_3/Din_0] [get_bd_pins adc_ila_mux_30/Din_0] [get_bd_pins adc_ila_mux_31/Din_0] [get_bd_pins adc_ila_mux_32/Din_0] [get_bd_pins adc_ila_mux_33/Din_0] [get_bd_pins adc_ila_mux_34/Din_0] [get_bd_pins adc_ila_mux_35/Din_0] [get_bd_pins adc_ila_mux_36/Din_0] [get_bd_pins adc_ila_mux_37/Din_0] [get_bd_pins adc_ila_mux_38/Din_0] [get_bd_pins adc_ila_mux_39/Din_0] [get_bd_pins adc_ila_mux_4/Din_0] [get_bd_pins adc_ila_mux_40/Din_0] [get_bd_pins adc_ila_mux_41/Din_0] [get_bd_pins adc_ila_mux_42/Din_0] [get_bd_pins adc_ila_mux_43/Din_0] [get_bd_pins adc_ila_mux_44/Din_0] [get_bd_pins adc_ila_mux_45/Din_0] [get_bd_pins adc_ila_mux_46/Din_0] [get_bd_pins adc_ila_mux_5/Din_0] [get_bd_pins adc_ila_mux_6/Din_0] [get_bd_pins adc_ila_mux_7/Din_0] [get_bd_pins adc_ila_mux_8/Din_0] [get_bd_pins adc_ila_mux_9/Din_0] [get_bd_pins iir_coeff/din_sel_ila] [get_bd_pins system_ila_2/probe8]
  connect_bd_net -net Din_2 [get_bd_pins ADC_10_30_mux/data1] [get_bd_pins usp_rf_data_converter_0/m10_axis_tdata]
  connect_bd_net -net Din_3 [get_bd_pins ADC_12_32_mux/data1] [get_bd_pins usp_rf_data_converter_0/m12_axis_tdata]
  connect_bd_net -net Filters_Rotation_ADC_00_20_I_mul_out [get_bd_pins Filters_Rotation_ADC_00_20/I_mul_out] [get_bd_pins adc_ila_mux_24/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_I_mul_out1 [get_bd_pins Filters_Rotation_ADC_00_20/I_mul_out1] [get_bd_pins adc_ila_mux_27/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_O1 [get_bd_pins Filters_Rotation_ADC_00_20/O1] [get_bd_pins adc_ila_mux_37/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_O2 [get_bd_pins Filters_Rotation_ADC_00_20/O2] [get_bd_pins adc_ila_mux_38/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_cos_thetha [get_bd_pins Filters_Rotation_ADC_00_20/cos_thetha] [get_bd_pins adc_ila_mux_23/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_cos_thetha1 [get_bd_pins Filters_Rotation_ADC_00_20/cos_thetha1] [get_bd_pins adc_ila_mux_26/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_cos_thetha_valid_out [get_bd_pins Filters_Rotation_ADC_00_20/cos_thetha_valid_out] [get_bd_pins adc_ila_mux_25/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_cos_thetha_valid_out1 [get_bd_pins Filters_Rotation_ADC_00_20/cos_thetha_valid_out1] [get_bd_pins adc_ila_mux_28/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_data_out [get_bd_pins Filters_Rotation_ADC_00_20/data_out] [get_bd_pins adc_ila_mux_44/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_data_out1 [get_bd_pins Filters_Rotation_ADC_00_20/data_out1] [get_bd_pins adc_ila_mux_45/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_main_valid [get_bd_pins Filters_Rotation_ADC_00_20/main_valid] [get_bd_pins adc_ila_mux_39/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_mul_output [get_bd_pins Filters_Rotation_ADC_00_20/mul_output] [get_bd_pins adc_ila_mux_29/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_mul_output1 [get_bd_pins Filters_Rotation_ADC_00_20/mul_output1] [get_bd_pins adc_ila_mux_31/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_mul_output2 [get_bd_pins Filters_Rotation_ADC_00_20/mul_output2] [get_bd_pins adc_ila_mux_35/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_mul_output3 [get_bd_pins Filters_Rotation_ADC_00_20/mul_output3] [get_bd_pins adc_ila_mux_33/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_mul_output_valid [get_bd_pins Filters_Rotation_ADC_00_20/mul_output_valid] [get_bd_pins adc_ila_mux_30/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_mul_output_valid1 [get_bd_pins Filters_Rotation_ADC_00_20/mul_output_valid1] [get_bd_pins adc_ila_mux_32/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_mul_output_valid2 [get_bd_pins Filters_Rotation_ADC_00_20/mul_output_valid2] [get_bd_pins adc_ila_mux_36/data2]
  connect_bd_net -net Filters_Rotation_ADC_00_20_mul_output_valid3 [get_bd_pins Filters_Rotation_ADC_00_20/mul_output_valid3] [get_bd_pins adc_ila_mux_34/data2]
  connect_bd_net -net Filters_Rotation_ADC_02_22_data_out_0 [get_bd_pins Filters_Rotation_ADC_02_22/data_out_0] [get_bd_pins adc_ila_mux_5/data1]
  connect_bd_net -net Filters_Rotation_ADC_02_22_data_out_0_0 [get_bd_pins Filters_Rotation_ADC_02_22/data_out_0_0] [get_bd_pins adc_ila_mux_7/data1]
  connect_bd_net -net Filters_Rotation_ADC_02_22_data_out_1 [get_bd_pins Filters_Rotation_ADC_02_22/data_out_1] [get_bd_pins adc_ila_mux_6/data1]
  connect_bd_net -net Filters_Rotation_ADC_02_22_data_out_1_0 [get_bd_pins Filters_Rotation_ADC_02_22/data_out_1_0] [get_bd_pins adc_ila_mux_8/data1]
  connect_bd_net -net Filters_Rotation_ADC_02_22_data_out_2 [get_bd_pins Filters_Rotation_ADC_02_22/data_out_2] [get_bd_pins adc_ila_mux_14/data1]
  connect_bd_net -net Filters_Rotation_ADC_02_22_data_out_3 [get_bd_pins Filters_Rotation_ADC_02_22/data_out_3] [get_bd_pins adc_ila_mux_16/data1]
  connect_bd_net -net Filters_Rotation_ADC_02_22_data_out_4 [get_bd_pins Filters_Rotation_ADC_02_22/data_out_4] [get_bd_pins adc_ila_mux_15/data1]
  connect_bd_net -net Filters_Rotation_ADC_02_22_data_out_5 [get_bd_pins Filters_Rotation_ADC_02_22/data_out_5] [get_bd_pins adc_ila_mux_13/data1]
  connect_bd_net -net Filters_Rotation_ADC_02_22_filter_op_0 [get_bd_pins Filters_Rotation_ADC_02_22/filter_op_0] [get_bd_pins adc_ila_mux_9/data1]
  connect_bd_net -net Filters_Rotation_ADC_02_22_filter_op_0_0 [get_bd_pins Filters_Rotation_ADC_02_22/filter_op_0_0] [get_bd_pins adc_ila_mux_11/data1]
  connect_bd_net -net Filters_Rotation_ADC_02_22_op_valid_0 [get_bd_pins Filters_Rotation_ADC_02_22/op_valid_0] [get_bd_pins adc_ila_mux_10/data1]
  connect_bd_net -net Filters_Rotation_ADC_02_22_op_valid_0_0 [get_bd_pins Filters_Rotation_ADC_02_22/op_valid_0_0] [get_bd_pins Readout_DMA_1/adc_trigger_in] [get_bd_pins adc_ila_mux_12/data1]
  connect_bd_net -net Filters_Rotation_ADC_10_30_data_out_0 [get_bd_pins Filters_Rotation_ADC_10_30/data_out_0] [get_bd_pins adc_ila_mux_5/data4]
  connect_bd_net -net Filters_Rotation_ADC_10_30_data_out_0_0 [get_bd_pins Filters_Rotation_ADC_10_30/data_out_0_0] [get_bd_pins adc_ila_mux_7/data4]
  connect_bd_net -net Filters_Rotation_ADC_10_30_data_out_1 [get_bd_pins Filters_Rotation_ADC_10_30/data_out_1] [get_bd_pins adc_ila_mux_6/data4]
  connect_bd_net -net Filters_Rotation_ADC_10_30_data_out_1_0 [get_bd_pins Filters_Rotation_ADC_10_30/data_out_1_0] [get_bd_pins adc_ila_mux_8/data4]
  connect_bd_net -net Filters_Rotation_ADC_10_30_data_out_2 [get_bd_pins Filters_Rotation_ADC_10_30/data_out_2] [get_bd_pins adc_ila_mux_14/data4]
  connect_bd_net -net Filters_Rotation_ADC_10_30_data_out_3 [get_bd_pins Filters_Rotation_ADC_10_30/data_out_3] [get_bd_pins adc_ila_mux_16/data4]
  connect_bd_net -net Filters_Rotation_ADC_10_30_data_out_4 [get_bd_pins Filters_Rotation_ADC_10_30/data_out_4] [get_bd_pins adc_ila_mux_15/data4]
  connect_bd_net -net Filters_Rotation_ADC_10_30_data_out_5 [get_bd_pins Filters_Rotation_ADC_10_30/data_out_5] [get_bd_pins adc_ila_mux_13/data4]
  connect_bd_net -net Filters_Rotation_ADC_10_30_filter_op_0 [get_bd_pins Filters_Rotation_ADC_10_30/filter_op_0] [get_bd_pins adc_ila_mux_9/data4]
  connect_bd_net -net Filters_Rotation_ADC_10_30_filter_op_0_0 [get_bd_pins Filters_Rotation_ADC_10_30/filter_op_0_0] [get_bd_pins adc_ila_mux_11/data4]
  connect_bd_net -net Filters_Rotation_ADC_10_30_op_valid_0 [get_bd_pins Filters_Rotation_ADC_10_30/op_valid_0] [get_bd_pins adc_ila_mux_10/data4]
  connect_bd_net -net Filters_Rotation_ADC_10_30_op_valid_0_0 [get_bd_pins Filters_Rotation_ADC_10_30/op_valid_0_0] [get_bd_pins Readout_DMA_2/adc_trigger_in] [get_bd_pins adc_ila_mux_12/data4]
  connect_bd_net -net Filters_Rotation_ADC_12_32_data_out_0 [get_bd_pins Filters_Rotation_ADC_12_32/data_out_0] [get_bd_pins adc_ila_mux_5/data3]
  connect_bd_net -net Filters_Rotation_ADC_12_32_data_out_0_0 [get_bd_pins Filters_Rotation_ADC_12_32/data_out_0_0] [get_bd_pins adc_ila_mux_7/data3]
  connect_bd_net -net Filters_Rotation_ADC_12_32_data_out_1 [get_bd_pins Filters_Rotation_ADC_12_32/data_out_1] [get_bd_pins adc_ila_mux_6/data3]
  connect_bd_net -net Filters_Rotation_ADC_12_32_data_out_1_0 [get_bd_pins Filters_Rotation_ADC_12_32/data_out_1_0] [get_bd_pins adc_ila_mux_8/data3]
  connect_bd_net -net Filters_Rotation_ADC_12_32_data_out_2 [get_bd_pins Filters_Rotation_ADC_12_32/data_out_2] [get_bd_pins adc_ila_mux_14/data3]
  connect_bd_net -net Filters_Rotation_ADC_12_32_data_out_3 [get_bd_pins Filters_Rotation_ADC_12_32/data_out_3] [get_bd_pins adc_ila_mux_16/data3]
  connect_bd_net -net Filters_Rotation_ADC_12_32_data_out_4 [get_bd_pins Filters_Rotation_ADC_12_32/data_out_4] [get_bd_pins adc_ila_mux_15/data3]
  connect_bd_net -net Filters_Rotation_ADC_12_32_data_out_5 [get_bd_pins Filters_Rotation_ADC_12_32/data_out_5] [get_bd_pins adc_ila_mux_13/data3]
  connect_bd_net -net Filters_Rotation_ADC_12_32_filter_op_0 [get_bd_pins Filters_Rotation_ADC_12_32/filter_op_0] [get_bd_pins adc_ila_mux_9/data3]
  connect_bd_net -net Filters_Rotation_ADC_12_32_filter_op_0_0 [get_bd_pins Filters_Rotation_ADC_12_32/filter_op_0_0] [get_bd_pins adc_ila_mux_11/data3]
  connect_bd_net -net Filters_Rotation_ADC_12_32_op_valid_0 [get_bd_pins Filters_Rotation_ADC_12_32/op_valid_0] [get_bd_pins adc_ila_mux_10/data3]
  connect_bd_net -net Filters_Rotation_ADC_12_32_op_valid_0_0 [get_bd_pins Filters_Rotation_ADC_12_32/op_valid_0_0] [get_bd_pins Readout_DMA_3/adc_trigger_in] [get_bd_pins adc_ila_mux_12/data3]
  connect_bd_net -net In0_1 [get_bd_pins Filters_Rotation_ADC_02_22/Data_out_6] [get_bd_pins Readout_DMA_1/s_axis_tdata] [get_bd_pins adc_ila_mux_46/data1]
  connect_bd_net -net In2_1 [get_bd_pins Filters_Rotation_ADC_10_30/Data_out_6] [get_bd_pins Readout_DMA_2/s_axis_tdata] [get_bd_pins adc_ila_mux_46/data4]
  connect_bd_net -net In3_1 [get_bd_pins Filters_Rotation_ADC_12_32/Data_out_6] [get_bd_pins Readout_DMA_3/s_axis_tdata] [get_bd_pins adc_ila_mux_46/data3]
  connect_bd_net -net Readout_DMA_1_s2mm_introut [get_bd_pins Readout_DMA_1/s2mm_introut] [get_bd_pins xlconcat_2/In2]
  connect_bd_net -net Readout_DMA_2_s2mm_introut [get_bd_pins Readout_DMA_2/s2mm_introut] [get_bd_pins xlconcat_2/In3]
  connect_bd_net -net Readout_DMA_3_s2mm_introut [get_bd_pins Readout_DMA_3/s2mm_introut] [get_bd_pins xlconcat_2/In4]
  connect_bd_net -net Readout_DMA_m_axis_tdata [get_bd_pins Readout_DMA_0/m_axis_tdata] [get_bd_pins system_ila_1/probe53]
  connect_bd_net -net Readout_DMA_s2mm_introut [get_bd_pins Readout_DMA_0/s2mm_introut] [get_bd_pins xlconcat_2/In1]
  connect_bd_net -net adc_ila_mux_0_data_out [get_bd_pins adc_ila_mux_0/data_out] [get_bd_pins system_ila_1/probe1]
  connect_bd_net -net adc_ila_mux_10_data_out [get_bd_pins adc_ila_mux_10/data_out] [get_bd_pins system_ila_1/probe9]
  connect_bd_net -net adc_ila_mux_11_data_out [get_bd_pins adc_ila_mux_11/data_out] [get_bd_pins system_ila_1/probe13]
  connect_bd_net -net adc_ila_mux_12_data_out [get_bd_pins adc_ila_mux_12/data_out] [get_bd_pins system_ila_1/probe12]
  connect_bd_net -net adc_ila_mux_13_data_out [get_bd_pins adc_ila_mux_13/data_out] [get_bd_pins system_ila_1/probe14]
  connect_bd_net -net adc_ila_mux_14_data_out [get_bd_pins adc_ila_mux_14/data_out] [get_bd_pins system_ila_1/probe15]
  connect_bd_net -net adc_ila_mux_15_data_out [get_bd_pins adc_ila_mux_15/data_out] [get_bd_pins system_ila_1/probe16]
  connect_bd_net -net adc_ila_mux_16_data_out [get_bd_pins adc_ila_mux_16/data_out] [get_bd_pins system_ila_1/probe17]
  connect_bd_net -net adc_ila_mux_17_data_out [get_bd_pins adc_ila_mux_17/data_out] [get_bd_pins system_ila_1/probe19]
  connect_bd_net -net adc_ila_mux_18_data_out [get_bd_pins adc_ila_mux_18/data_out] [get_bd_pins system_ila_1/probe20]
  connect_bd_net -net adc_ila_mux_19_data_out [get_bd_pins adc_ila_mux_19/data_out] [get_bd_pins system_ila_1/probe21]
  connect_bd_net -net adc_ila_mux_1_data_out [get_bd_pins adc_ila_mux_1/data_out] [get_bd_pins system_ila_1/probe2]
  connect_bd_net -net adc_ila_mux_20_data_out [get_bd_pins adc_ila_mux_20/data_out] [get_bd_pins system_ila_1/probe22]
  connect_bd_net -net adc_ila_mux_21_data_out [get_bd_pins adc_ila_mux_21/data_out] [get_bd_pins system_ila_1/probe23]
  connect_bd_net -net adc_ila_mux_22_data_out [get_bd_pins adc_ila_mux_22/data_out] [get_bd_pins system_ila_1/probe24]
  connect_bd_net -net adc_ila_mux_23_data_out [get_bd_pins adc_ila_mux_23/data_out] [get_bd_pins system_ila_1/probe26]
  connect_bd_net -net adc_ila_mux_24_data_out [get_bd_pins adc_ila_mux_24/data_out] [get_bd_pins system_ila_1/probe27]
  connect_bd_net -net adc_ila_mux_25_data_out [get_bd_pins adc_ila_mux_25/data_out] [get_bd_pins system_ila_1/probe28]
  connect_bd_net -net adc_ila_mux_26_data_out [get_bd_pins adc_ila_mux_26/data_out] [get_bd_pins system_ila_1/probe29]
  connect_bd_net -net adc_ila_mux_27_data_out [get_bd_pins adc_ila_mux_27/data_out] [get_bd_pins system_ila_1/probe30]
  connect_bd_net -net adc_ila_mux_28_data_out [get_bd_pins adc_ila_mux_28/data_out] [get_bd_pins system_ila_1/probe31]
  connect_bd_net -net adc_ila_mux_29_data_out [get_bd_pins adc_ila_mux_29/data_out] [get_bd_pins system_ila_1/probe32]
  connect_bd_net -net adc_ila_mux_2_data_out [get_bd_pins adc_ila_mux_2/data_out] [get_bd_pins system_ila_1/probe3]
  connect_bd_net -net adc_ila_mux_30_data_out [get_bd_pins adc_ila_mux_30/data_out] [get_bd_pins system_ila_1/probe33]
  connect_bd_net -net adc_ila_mux_31_data_out [get_bd_pins adc_ila_mux_31/data_out] [get_bd_pins system_ila_1/probe34]
  connect_bd_net -net adc_ila_mux_32_data_out [get_bd_pins adc_ila_mux_32/data_out] [get_bd_pins system_ila_1/probe35]
  connect_bd_net -net adc_ila_mux_33_data_out [get_bd_pins adc_ila_mux_33/data_out] [get_bd_pins system_ila_1/probe36]
  connect_bd_net -net adc_ila_mux_34_data_out [get_bd_pins adc_ila_mux_34/data_out] [get_bd_pins system_ila_1/probe37]
  connect_bd_net -net adc_ila_mux_35_data_out [get_bd_pins adc_ila_mux_35/data_out] [get_bd_pins system_ila_1/probe39]
  connect_bd_net -net adc_ila_mux_36_data_out [get_bd_pins adc_ila_mux_36/data_out] [get_bd_pins system_ila_1/probe38]
  connect_bd_net -net adc_ila_mux_37_data_out [get_bd_pins adc_ila_mux_37/data_out] [get_bd_pins system_ila_1/probe40]
  connect_bd_net -net adc_ila_mux_38_data_out [get_bd_pins adc_ila_mux_38/data_out] [get_bd_pins system_ila_1/probe41]
  connect_bd_net -net adc_ila_mux_39_data_out [get_bd_pins adc_ila_mux_39/data_out] [get_bd_pins system_ila_1/probe42]
  connect_bd_net -net adc_ila_mux_3_data_out [get_bd_pins adc_ila_mux_3/data_out] [get_bd_pins system_ila_1/probe4]
  connect_bd_net -net adc_ila_mux_40_data_out [get_bd_pins adc_ila_mux_40/data_out] [get_bd_pins system_ila_1/probe43]
  connect_bd_net -net adc_ila_mux_41_data_out [get_bd_pins adc_ila_mux_41/data_out] [get_bd_pins system_ila_1/probe44]
  connect_bd_net -net adc_ila_mux_42_data_out [get_bd_pins adc_ila_mux_42/data_out] [get_bd_pins system_ila_1/probe45]
  connect_bd_net -net adc_ila_mux_43_data_out [get_bd_pins adc_ila_mux_43/data_out] [get_bd_pins system_ila_1/probe77]
  connect_bd_net -net adc_ila_mux_44_data_out [get_bd_pins adc_ila_mux_44/data_out] [get_bd_pins system_ila_1/probe78]
  connect_bd_net -net adc_ila_mux_45_data_out [get_bd_pins adc_ila_mux_45/data_out] [get_bd_pins system_ila_1/probe79]
  connect_bd_net -net adc_ila_mux_46_data_out [get_bd_pins adc_ila_mux_46/data_out] [get_bd_pins system_ila_1/probe80]
  connect_bd_net -net adc_ila_mux_4_data_out [get_bd_pins adc_ila_mux_4/data_out] [get_bd_pins system_ila_1/probe5]
  connect_bd_net -net adc_ila_mux_5_data_out [get_bd_pins adc_ila_mux_5/data_out] [get_bd_pins system_ila_1/probe6]
  connect_bd_net -net adc_ila_mux_6_data_out [get_bd_pins adc_ila_mux_6/data_out] [get_bd_pins system_ila_1/probe7]
  connect_bd_net -net adc_ila_mux_7_data_out [get_bd_pins adc_ila_mux_7/data_out] [get_bd_pins system_ila_1/probe10]
  connect_bd_net -net adc_ila_mux_8_data_out [get_bd_pins adc_ila_mux_8/data_out] [get_bd_pins system_ila_1/probe11]
  connect_bd_net -net adc_ila_mux_9_data_out [get_bd_pins adc_ila_mux_9/data_out] [get_bd_pins system_ila_1/probe8]
  connect_bd_net -net adc_trigger_0_t_last1 [get_bd_pins Readout_DMA_0/t_last] [get_bd_pins system_ila_1/probe85]
  connect_bd_net -net adc_trigger_0_t_valid [get_bd_pins Readout_DMA_0/out1] [get_bd_pins c_counter_binary_0/CE] [get_bd_pins system_ila_1/probe82]
  connect_bd_net -net adc_trigger_0_t_valid1 [get_bd_pins Readout_DMA_0/t_valid] [get_bd_pins system_ila_1/probe84]
  connect_bd_net -net and_gate_1_out1 [get_bd_pins Readout_DMA_0/out2] [get_bd_pins system_ila_1/probe81]
  connect_bd_net -net axi_intc_0_irq [get_bd_pins axi_intc_0/irq] [get_bd_pins xlconcat_0/In0]
  connect_bd_net -net clk_wiz_0_locked [get_bd_pins clk_wiz_0/locked] [get_bd_pins rst_ps8_0_96M/dcm_locked]
  connect_bd_net -net dac_addr_1 [get_bd_pins hier_bram_addr_trigen_1/data_out] [get_bd_pins trigger_gen1/dac_addr]
  connect_bd_net -net dac_addr_2 [get_bd_pins hier_bram_addr_trigen_2/data_out] [get_bd_pins trigger_gen2/dac_addr]
  connect_bd_net -net dac_addr_3 [get_bd_pins hier_bram_addr_trigen_3/data_out] [get_bd_pins system_ila_2/probe30] [get_bd_pins trigger_gen3/dac_addr]
  connect_bd_net -net data1_1 [get_bd_pins Filters_Rotation_ADC_02_22/thetha_cos] [get_bd_pins adc_ila_mux_17/data1]
  connect_bd_net -net data1_2 [get_bd_pins Filters_Rotation_ADC_02_22/thetha_sin] [get_bd_pins adc_ila_mux_18/data1]
  connect_bd_net -net data1_3 [get_bd_pins Filters_Rotation_ADC_02_22/thetha_valid_out] [get_bd_pins adc_ila_mux_19/data1]
  connect_bd_net -net data1_4 [get_bd_pins Filters_Rotation_ADC_02_22/I_out] [get_bd_pins adc_ila_mux_20/data1]
  connect_bd_net -net data1_5 [get_bd_pins Filters_Rotation_ADC_02_22/Q_out] [get_bd_pins adc_ila_mux_21/data1]
  connect_bd_net -net data1_6 [get_bd_pins Filters_Rotation_ADC_02_22/qubit_out] [get_bd_pins adc_ila_mux_22/data1]
  connect_bd_net -net data1_7 [get_bd_pins Filters_Rotation_ADC_02_22/cos_thetha] [get_bd_pins adc_ila_mux_23/data1]
  connect_bd_net -net data1_8 [get_bd_pins Filters_Rotation_ADC_02_22/I_mul_out] [get_bd_pins adc_ila_mux_24/data1]
  connect_bd_net -net data1_9 [get_bd_pins Filters_Rotation_ADC_02_22/cos_thetha_valid_out] [get_bd_pins adc_ila_mux_25/data1]
  connect_bd_net -net data1_10 [get_bd_pins Filters_Rotation_ADC_02_22/cos_thetha1] [get_bd_pins adc_ila_mux_26/data1]
  connect_bd_net -net data1_11 [get_bd_pins Filters_Rotation_ADC_02_22/I_mul_out1] [get_bd_pins adc_ila_mux_27/data1]
  connect_bd_net -net data1_12 [get_bd_pins Filters_Rotation_ADC_02_22/cos_thetha_valid_out1] [get_bd_pins adc_ila_mux_28/data1]
  connect_bd_net -net data1_13 [get_bd_pins Filters_Rotation_ADC_02_22/mul_output] [get_bd_pins adc_ila_mux_29/data1]
  connect_bd_net -net data1_14 [get_bd_pins Filters_Rotation_ADC_02_22/mul_output_valid] [get_bd_pins adc_ila_mux_30/data1]
  connect_bd_net -net data1_15 [get_bd_pins Filters_Rotation_ADC_02_22/mul_output1] [get_bd_pins adc_ila_mux_31/data1]
  connect_bd_net -net data1_16 [get_bd_pins Filters_Rotation_ADC_02_22/mul_output_valid1] [get_bd_pins adc_ila_mux_32/data1]
  connect_bd_net -net data1_17 [get_bd_pins Filters_Rotation_ADC_02_22/mul_output2] [get_bd_pins adc_ila_mux_33/data1]
  connect_bd_net -net data1_18 [get_bd_pins Filters_Rotation_ADC_02_22/mul_output_valid2] [get_bd_pins adc_ila_mux_34/data1]
  connect_bd_net -net data1_19 [get_bd_pins Filters_Rotation_ADC_02_22/mul_output3] [get_bd_pins adc_ila_mux_35/data1]
  connect_bd_net -net data1_20 [get_bd_pins Filters_Rotation_ADC_02_22/mul_output_valid3] [get_bd_pins adc_ila_mux_36/data1]
  connect_bd_net -net data1_21 [get_bd_pins Filters_Rotation_ADC_02_22/O1] [get_bd_pins adc_ila_mux_37/data1]
  connect_bd_net -net data1_22 [get_bd_pins Filters_Rotation_ADC_02_22/O2] [get_bd_pins adc_ila_mux_38/data1]
  connect_bd_net -net data1_23 [get_bd_pins Filters_Rotation_ADC_02_22/main_valid] [get_bd_pins adc_ila_mux_39/data1]
  connect_bd_net -net data1_24 [get_bd_pins Filters_Rotation_ADC_02_22/y] [get_bd_pins adc_ila_mux_40/data1]
  connect_bd_net -net data1_25 [get_bd_pins Filters_Rotation_ADC_02_22/y1] [get_bd_pins adc_ila_mux_41/data1]
  connect_bd_net -net data1_26 [get_bd_pins Filters_Rotation_ADC_02_22/y2] [get_bd_pins adc_ila_mux_42/data1]
  connect_bd_net -net data1_27 [get_bd_pins Filters_Rotation_ADC_02_22/y3] [get_bd_pins adc_ila_mux_43/data1]
  connect_bd_net -net data1_28 [get_bd_pins Filters_Rotation_ADC_02_22/data_out] [get_bd_pins adc_ila_mux_44/data1]
  connect_bd_net -net data1_29 [get_bd_pins Filters_Rotation_ADC_02_22/data_out1] [get_bd_pins adc_ila_mux_45/data1]
  connect_bd_net -net data2_1 [get_bd_pins Filters_Rotation_ADC_00_20/thetha_cos] [get_bd_pins adc_ila_mux_17/data2]
  connect_bd_net -net data2_2 [get_bd_pins Filters_Rotation_ADC_00_20/thetha_sin] [get_bd_pins adc_ila_mux_18/data2]
  connect_bd_net -net data2_3 [get_bd_pins Filters_Rotation_ADC_00_20/thetha_valid_out] [get_bd_pins adc_ila_mux_19/data2]
  connect_bd_net -net data2_4 [get_bd_pins Filters_Rotation_ADC_00_20/I_out] [get_bd_pins adc_ila_mux_20/data2]
  connect_bd_net -net data2_5 [get_bd_pins Filters_Rotation_ADC_00_20/Q_out] [get_bd_pins adc_ila_mux_21/data2]
  connect_bd_net -net data2_6 [get_bd_pins Filters_Rotation_ADC_00_20/qubit_out] [get_bd_pins adc_ila_mux_22/data2]
  connect_bd_net -net data2_7 [get_bd_pins Filters_Rotation_ADC_00_20/y] [get_bd_pins adc_ila_mux_40/data2]
  connect_bd_net -net data2_8 [get_bd_pins Filters_Rotation_ADC_00_20/y1] [get_bd_pins adc_ila_mux_41/data2]
  connect_bd_net -net data2_9 [get_bd_pins Filters_Rotation_ADC_00_20/y2] [get_bd_pins adc_ila_mux_42/data2]
  connect_bd_net -net data2_10 [get_bd_pins Filters_Rotation_ADC_00_20/y3] [get_bd_pins adc_ila_mux_43/data2]
  connect_bd_net -net data3_1 [get_bd_pins ADC_02_22_mux/data3] [get_bd_pins usp_rf_data_converter_0/m02_axis_tvalid]
  connect_bd_net -net data3_2 [get_bd_pins ADC_10_30_mux/data3] [get_bd_pins usp_rf_data_converter_0/m10_axis_tvalid]
  connect_bd_net -net data3_3 [get_bd_pins ADC_12_32_mux/data3] [get_bd_pins usp_rf_data_converter_0/m12_axis_tvalid]
  connect_bd_net -net data3_4 [get_bd_pins Filters_Rotation_ADC_12_32/thetha_cos] [get_bd_pins adc_ila_mux_17/data3]
  connect_bd_net -net data3_5 [get_bd_pins Filters_Rotation_ADC_12_32/thetha_sin] [get_bd_pins adc_ila_mux_18/data3]
  connect_bd_net -net data3_6 [get_bd_pins Filters_Rotation_ADC_12_32/thetha_valid_out] [get_bd_pins adc_ila_mux_19/data3]
  connect_bd_net -net data3_7 [get_bd_pins Filters_Rotation_ADC_12_32/I_out] [get_bd_pins adc_ila_mux_20/data3]
  connect_bd_net -net data3_8 [get_bd_pins Filters_Rotation_ADC_12_32/Q_out] [get_bd_pins adc_ila_mux_21/data3]
  connect_bd_net -net data3_9 [get_bd_pins Filters_Rotation_ADC_12_32/qubit_out] [get_bd_pins adc_ila_mux_22/data3]
  connect_bd_net -net data3_10 [get_bd_pins Filters_Rotation_ADC_12_32/cos_thetha] [get_bd_pins adc_ila_mux_23/data3]
  connect_bd_net -net data3_11 [get_bd_pins Filters_Rotation_ADC_12_32/I_mul_out] [get_bd_pins adc_ila_mux_24/data3]
  connect_bd_net -net data3_12 [get_bd_pins Filters_Rotation_ADC_12_32/cos_thetha_valid_out] [get_bd_pins adc_ila_mux_25/data3]
  connect_bd_net -net data3_13 [get_bd_pins Filters_Rotation_ADC_12_32/cos_thetha1] [get_bd_pins adc_ila_mux_26/data3]
  connect_bd_net -net data3_14 [get_bd_pins Filters_Rotation_ADC_12_32/I_mul_out1] [get_bd_pins adc_ila_mux_27/data3]
  connect_bd_net -net data3_15 [get_bd_pins Filters_Rotation_ADC_12_32/cos_thetha_valid_out1] [get_bd_pins adc_ila_mux_28/data3]
  connect_bd_net -net data3_16 [get_bd_pins Filters_Rotation_ADC_12_32/mul_output] [get_bd_pins adc_ila_mux_29/data3]
  connect_bd_net -net data3_17 [get_bd_pins Filters_Rotation_ADC_12_32/mul_output_valid] [get_bd_pins adc_ila_mux_30/data3]
  connect_bd_net -net data3_18 [get_bd_pins Filters_Rotation_ADC_12_32/mul_output1] [get_bd_pins adc_ila_mux_31/data3]
  connect_bd_net -net data3_19 [get_bd_pins Filters_Rotation_ADC_12_32/mul_output_valid1] [get_bd_pins adc_ila_mux_32/data3]
  connect_bd_net -net data3_20 [get_bd_pins Filters_Rotation_ADC_12_32/mul_output2] [get_bd_pins adc_ila_mux_33/data3]
  connect_bd_net -net data3_21 [get_bd_pins Filters_Rotation_ADC_12_32/mul_output_valid2] [get_bd_pins adc_ila_mux_34/data3]
  connect_bd_net -net data3_22 [get_bd_pins Filters_Rotation_ADC_12_32/mul_output3] [get_bd_pins adc_ila_mux_35/data3]
  connect_bd_net -net data3_23 [get_bd_pins Filters_Rotation_ADC_12_32/mul_output_valid3] [get_bd_pins adc_ila_mux_36/data3]
  connect_bd_net -net data3_24 [get_bd_pins Filters_Rotation_ADC_12_32/O1] [get_bd_pins adc_ila_mux_37/data3]
  connect_bd_net -net data3_25 [get_bd_pins Filters_Rotation_ADC_12_32/O2] [get_bd_pins adc_ila_mux_38/data3]
  connect_bd_net -net data3_26 [get_bd_pins Filters_Rotation_ADC_12_32/main_valid] [get_bd_pins adc_ila_mux_39/data3]
  connect_bd_net -net data3_27 [get_bd_pins Filters_Rotation_ADC_12_32/y] [get_bd_pins adc_ila_mux_40/data3]
  connect_bd_net -net data3_28 [get_bd_pins Filters_Rotation_ADC_12_32/y1] [get_bd_pins adc_ila_mux_41/data3]
  connect_bd_net -net data3_29 [get_bd_pins Filters_Rotation_ADC_12_32/y2] [get_bd_pins adc_ila_mux_42/data3]
  connect_bd_net -net data3_30 [get_bd_pins Filters_Rotation_ADC_12_32/y3] [get_bd_pins adc_ila_mux_43/data3]
  connect_bd_net -net data3_31 [get_bd_pins Filters_Rotation_ADC_12_32/data_out] [get_bd_pins adc_ila_mux_44/data3]
  connect_bd_net -net data3_32 [get_bd_pins Filters_Rotation_ADC_12_32/data_out1] [get_bd_pins adc_ila_mux_45/data3]
  connect_bd_net -net data4_1 [get_bd_pins ADC_02_22_mux/data4] [get_bd_pins usp_rf_data_converter_0/m22_axis_tvalid]
  connect_bd_net -net data4_2 [get_bd_pins ADC_10_30_mux/data4] [get_bd_pins usp_rf_data_converter_0/m30_axis_tvalid]
  connect_bd_net -net data4_3 [get_bd_pins ADC_12_32_mux/data4] [get_bd_pins usp_rf_data_converter_0/m32_axis_tvalid]
  connect_bd_net -net data4_4 [get_bd_pins Filters_Rotation_ADC_10_30/thetha_cos] [get_bd_pins adc_ila_mux_17/data4]
  connect_bd_net -net data4_5 [get_bd_pins Filters_Rotation_ADC_10_30/thetha_sin] [get_bd_pins adc_ila_mux_18/data4]
  connect_bd_net -net data4_6 [get_bd_pins Filters_Rotation_ADC_10_30/thetha_valid_out] [get_bd_pins adc_ila_mux_19/data4]
  connect_bd_net -net data4_7 [get_bd_pins Filters_Rotation_ADC_10_30/I_out] [get_bd_pins adc_ila_mux_20/data4]
  connect_bd_net -net data4_8 [get_bd_pins Filters_Rotation_ADC_10_30/Q_out] [get_bd_pins adc_ila_mux_21/data4]
  connect_bd_net -net data4_9 [get_bd_pins Filters_Rotation_ADC_10_30/qubit_out] [get_bd_pins adc_ila_mux_22/data4]
  connect_bd_net -net data4_10 [get_bd_pins Filters_Rotation_ADC_10_30/cos_thetha] [get_bd_pins adc_ila_mux_23/data4]
  connect_bd_net -net data4_11 [get_bd_pins Filters_Rotation_ADC_10_30/I_mul_out] [get_bd_pins adc_ila_mux_24/data4]
  connect_bd_net -net data4_12 [get_bd_pins Filters_Rotation_ADC_10_30/cos_thetha_valid_out] [get_bd_pins adc_ila_mux_25/data4]
  connect_bd_net -net data4_13 [get_bd_pins Filters_Rotation_ADC_10_30/cos_thetha1] [get_bd_pins adc_ila_mux_26/data4]
  connect_bd_net -net data4_14 [get_bd_pins Filters_Rotation_ADC_10_30/I_mul_out1] [get_bd_pins adc_ila_mux_27/data4]
  connect_bd_net -net data4_15 [get_bd_pins Filters_Rotation_ADC_10_30/cos_thetha_valid_out1] [get_bd_pins adc_ila_mux_28/data4]
  connect_bd_net -net data4_16 [get_bd_pins Filters_Rotation_ADC_10_30/mul_output] [get_bd_pins adc_ila_mux_29/data4]
  connect_bd_net -net data4_17 [get_bd_pins Filters_Rotation_ADC_10_30/mul_output_valid] [get_bd_pins adc_ila_mux_30/data4]
  connect_bd_net -net data4_18 [get_bd_pins Filters_Rotation_ADC_10_30/mul_output1] [get_bd_pins adc_ila_mux_31/data4]
  connect_bd_net -net data4_19 [get_bd_pins Filters_Rotation_ADC_10_30/mul_output_valid1] [get_bd_pins adc_ila_mux_32/data4]
  connect_bd_net -net data4_20 [get_bd_pins Filters_Rotation_ADC_10_30/mul_output2] [get_bd_pins adc_ila_mux_33/data4]
  connect_bd_net -net data4_21 [get_bd_pins Filters_Rotation_ADC_10_30/mul_output_valid2] [get_bd_pins adc_ila_mux_34/data4]
  connect_bd_net -net data4_22 [get_bd_pins Filters_Rotation_ADC_10_30/mul_output3] [get_bd_pins adc_ila_mux_35/data4]
  connect_bd_net -net data4_23 [get_bd_pins Filters_Rotation_ADC_10_30/mul_output_valid3] [get_bd_pins adc_ila_mux_36/data4]
  connect_bd_net -net data4_24 [get_bd_pins Filters_Rotation_ADC_10_30/O1] [get_bd_pins adc_ila_mux_37/data4]
  connect_bd_net -net data4_25 [get_bd_pins Filters_Rotation_ADC_10_30/O2] [get_bd_pins adc_ila_mux_38/data4]
  connect_bd_net -net data4_26 [get_bd_pins Filters_Rotation_ADC_10_30/main_valid] [get_bd_pins adc_ila_mux_39/data4]
  connect_bd_net -net data4_27 [get_bd_pins Filters_Rotation_ADC_10_30/y] [get_bd_pins adc_ila_mux_40/data4]
  connect_bd_net -net data4_28 [get_bd_pins Filters_Rotation_ADC_10_30/y1] [get_bd_pins adc_ila_mux_41/data4]
  connect_bd_net -net data4_29 [get_bd_pins Filters_Rotation_ADC_10_30/y2] [get_bd_pins adc_ila_mux_42/data4]
  connect_bd_net -net data4_30 [get_bd_pins Filters_Rotation_ADC_10_30/y3] [get_bd_pins adc_ila_mux_43/data4]
  connect_bd_net -net data4_31 [get_bd_pins Filters_Rotation_ADC_10_30/data_out] [get_bd_pins adc_ila_mux_44/data4]
  connect_bd_net -net data4_32 [get_bd_pins Filters_Rotation_ADC_10_30/data_out1] [get_bd_pins adc_ila_mux_45/data4]
  connect_bd_net -net data5_1 [get_bd_pins ADC_02_22_mux/data5] [get_bd_pins usp_rf_data_converter_0/m03_axis_tvalid]
  connect_bd_net -net data5_2 [get_bd_pins ADC_10_30_mux/data5] [get_bd_pins usp_rf_data_converter_0/m11_axis_tvalid]
  connect_bd_net -net data5_3 [get_bd_pins ADC_12_32_mux/data5] [get_bd_pins usp_rf_data_converter_0/m13_axis_tvalid]
  connect_bd_net -net data6_1 [get_bd_pins ADC_02_22_mux/data6] [get_bd_pins usp_rf_data_converter_0/m23_axis_tvalid]
  connect_bd_net -net data6_2 [get_bd_pins ADC_10_30_mux/data6] [get_bd_pins usp_rf_data_converter_0/m31_axis_tvalid]
  connect_bd_net -net data6_3 [get_bd_pins ADC_12_32_mux/data6] [get_bd_pins usp_rf_data_converter_0/m33_axis_tvalid]
  connect_bd_net -net ext_reset_in_0_1 [get_bd_ports ext_reset_in_0] [get_bd_pins rst_ps8_0_96M/ext_reset_in]
  connect_bd_net -net filter_bypass_1 [get_bd_pins Filters_Rotation_ADC_02_22/filter_bypass] [get_bd_pins iir_coeff/filter_bypass_sel_02_22]
  connect_bd_net -net filter_bypass_2 [get_bd_pins Filters_Rotation_ADC_10_30/filter_bypass] [get_bd_pins iir_coeff/filter_bypass_sel_10_30]
  connect_bd_net -net filter_bypass_3 [get_bd_pins Filters_Rotation_ADC_12_32/filter_bypass] [get_bd_pins iir_coeff/filter_bypass_sel_12_32]
  connect_bd_net -net filter_mav_Q_data_out_0 [get_bd_pins Filters_Rotation_ADC_00_20/firout_00_20_Q] [get_bd_pins adc_ila_mux_7/data2]
  connect_bd_net -net filter_mav_Q_op_valid_0 [get_bd_pins Filters_Rotation_ADC_00_20/firmavout_00_20_Qvalid] [get_bd_pins Readout_DMA_0/adc_trigger_in] [get_bd_pins adc_ila_mux_12/data2]
  connect_bd_net -net filter_mav_data_out_0 [get_bd_pins Filters_Rotation_ADC_00_20/firout_00_20_I] [get_bd_pins adc_ila_mux_5/data2]
  connect_bd_net -net filterstack_sel_1 [get_bd_pins Filters_Rotation_ADC_00_20/filterstack_sel] [get_bd_pins iir_coeff/order_00_20]
  connect_bd_net -net filterstack_sel_2 [get_bd_pins Filters_Rotation_ADC_02_22/filterstack_sel] [get_bd_pins iir_coeff/order_02_22]
  connect_bd_net -net filterstack_sel_3 [get_bd_pins Filters_Rotation_ADC_10_30/filterstack_sel] [get_bd_pins iir_coeff/order_10_30]
  connect_bd_net -net filterstack_sel_4 [get_bd_pins Filters_Rotation_ADC_12_32/filterstack_sel] [get_bd_pins iir_coeff/order_12_32]
  connect_bd_net -net fir_bypass_mux_I1_data_out [get_bd_pins Filters_Rotation_ADC_00_20/filteringout_00_20_Ivalid] [get_bd_pins adc_ila_mux_14/data2]
  connect_bd_net -net fir_bypass_mux_I_data_out [get_bd_pins Filters_Rotation_ADC_00_20/filteringout_00_20_I] [get_bd_pins adc_ila_mux_13/data2]
  connect_bd_net -net fir_bypass_mux_Q1_data_out [get_bd_pins Filters_Rotation_ADC_00_20/filteringout_00_20_Qvalid] [get_bd_pins adc_ila_mux_16/data2]
  connect_bd_net -net fir_bypass_mux_Q_data_out [get_bd_pins Filters_Rotation_ADC_00_20/filteringout_00_20_Q] [get_bd_pins adc_ila_mux_15/data2]
  connect_bd_net -net firmavout_00_20_Ivalid [get_bd_pins Filters_Rotation_ADC_00_20/firmavout_00_20_Ivalid] [get_bd_pins adc_ila_mux_10/data2]
  connect_bd_net -net firmavout_00_20_Q [get_bd_pins Filters_Rotation_ADC_00_20/firmavout_00_20_Q] [get_bd_pins adc_ila_mux_11/data2]
  connect_bd_net -net firout_00_20_Ivalid [get_bd_pins Filters_Rotation_ADC_00_20/firout_00_20_Ivalid] [get_bd_pins adc_ila_mux_6/data2]
  connect_bd_net -net firout_00_20_Qvalid [get_bd_pins Filters_Rotation_ADC_00_20/firout_00_20_Qvalid] [get_bd_pins adc_ila_mux_8/data2]
  connect_bd_net -net hier_adc_dac_latency_0_data_out [get_bd_pins hier_adc_dac_latency_0/data_out] [get_bd_pins trigger_gen0/adc_dac_latency]
  connect_bd_net -net hier_adc_dac_latency_1_data_out [get_bd_pins hier_adc_dac_latency_1/data_out] [get_bd_pins trigger_gen1/adc_dac_latency]
  connect_bd_net -net hier_adc_dac_latency_2_data_out [get_bd_pins hier_adc_dac_latency_2/data_out] [get_bd_pins trigger_gen2/adc_dac_latency]
  connect_bd_net -net hier_adc_dac_latency_3_data_out [get_bd_pins hier_adc_dac_latency_3/data_out] [get_bd_pins system_ila_2/probe32] [get_bd_pins trigger_gen3/adc_dac_latency]
  connect_bd_net -net hier_gaussian_width_0_data_out [get_bd_pins hier_gaussian_width_0/data_out] [get_bd_pins trigger_gen0/gaussian_width]
  connect_bd_net -net hier_gauusian_width_1_data_out [get_bd_pins hier_gauusian_width_1/data_out] [get_bd_pins trigger_gen1/gaussian_width]
  connect_bd_net -net hier_gauusian_width_2_data_out [get_bd_pins hier_gauusian_width_2/data_out] [get_bd_pins trigger_gen2/gaussian_width]
  connect_bd_net -net hier_gauusian_width_3_data_out [get_bd_pins hier_gauusian_width_3/data_out] [get_bd_pins system_ila_2/probe31] [get_bd_pins trigger_gen3/gaussian_width]
  connect_bd_net -net hier_splitter_dac1_Din [get_bd_pins DAC_02_12/Din] [get_bd_pins hier_splitter_dac_2/Din]
  connect_bd_net -net hier_splitter_dac1_M [get_bd_pins DAC_02_12/M] [get_bd_pins hier_splitter_dac_2/M]
  connect_bd_net -net hier_splitter_dac1_adc_dac_latency [get_bd_pins hier_adc_dac_latency_0/data2] [get_bd_pins hier_adc_dac_latency_1/data2] [get_bd_pins hier_adc_dac_latency_2/data2] [get_bd_pins hier_adc_dac_latency_3/data2] [get_bd_pins hier_splitter_dac_2/adc_dac_latency]
  connect_bd_net -net hier_splitter_dac1_b [get_bd_pins DAC_02_12/b] [get_bd_pins hier_splitter_dac_2/b]
  connect_bd_net -net hier_splitter_dac1_gaussian_width [get_bd_pins hier_gaussian_width_0/data2] [get_bd_pins hier_gauusian_width_1/data2] [get_bd_pins hier_gauusian_width_2/data2] [get_bd_pins hier_gauusian_width_3/data2] [get_bd_pins hier_splitter_dac_2/gaussian_width]
  connect_bd_net -net hier_splitter_dac1_ini_amp_del [get_bd_pins DAC_02_12/ini_amp_del] [get_bd_pins hier_splitter_dac_2/ini_amp_del]
  connect_bd_net -net hier_splitter_dac1_ite_per_mes [get_bd_pins DAC_02_12/ite_per_mes] [get_bd_pins hier_splitter_dac_2/ite_per_mes]
  connect_bd_net -net hier_splitter_dac1_ite_tot [get_bd_pins DAC_02_12/ite_tot] [get_bd_pins hier_splitter_dac_2/ite_tot]
  connect_bd_net -net hier_splitter_dac1_mode [get_bd_pins DAC_02_12/mode] [get_bd_pins hier_splitter_dac_2/mode]
  connect_bd_net -net hier_splitter_dac1_off_time [get_bd_pins DAC_02_12/off_time1] [get_bd_pins hier_splitter_dac_2/off_time]
  connect_bd_net -net hier_splitter_dac1_sel [get_bd_pins DAC_02_12/sel] [get_bd_pins hier_splitter_dac_2/sel]
  connect_bd_net -net hier_splitter_dac1_sleep_time [get_bd_pins DAC_02_12/sleep_time] [get_bd_pins hier_splitter_dac_2/sleep_time]
  connect_bd_net -net hier_splitter_dac1_step_size [get_bd_pins DAC_02_12/step_size] [get_bd_pins hier_splitter_dac_2/step_size]
  connect_bd_net -net hier_splitter_dac1_time_bwn_pulses [get_bd_pins DAC_02_12/time_bwn_pulses] [get_bd_pins hier_splitter_dac_2/time_bwn_pulses]
  connect_bd_net -net hier_splitter_dac1_trigger_delay [get_bd_pins hier_splitter_dac_2/trigger_delay] [get_bd_pins hier_trigger_delay_0/data2] [get_bd_pins hier_trigger_delay_1/data2] [get_bd_pins hier_trigger_delay_2/data2] [get_bd_pins hier_trigger_delay_3/data2]
  connect_bd_net -net hier_splitter_dac1_trigger_time [get_bd_pins DAC_02_12/trigger_time] [get_bd_pins hier_splitter_dac_2/trigger_time]
  connect_bd_net -net hier_splitter_dac1_trigger_width [get_bd_pins hier_splitter_dac_2/trigger_width] [get_bd_pins hier_trigger_width_0/data2] [get_bd_pins hier_trigger_width_1/data2] [get_bd_pins hier_trigger_width_2/data2] [get_bd_pins hier_trigger_width_3/data2]
  connect_bd_net -net hier_splitter_dac2_Din [get_bd_pins DAC_03_13/Din] [get_bd_pins hier_splitter_dac_3/Din]
  connect_bd_net -net hier_splitter_dac2_M [get_bd_pins DAC_03_13/M] [get_bd_pins hier_splitter_dac_3/M] [get_bd_pins system_ila_1/probe60]
  connect_bd_net -net hier_splitter_dac2_adc_dac_latency [get_bd_pins hier_adc_dac_latency_0/data3] [get_bd_pins hier_adc_dac_latency_1/data3] [get_bd_pins hier_adc_dac_latency_2/data3] [get_bd_pins hier_adc_dac_latency_3/data3] [get_bd_pins hier_splitter_dac_3/adc_dac_latency] [get_bd_pins system_ila_2/probe37]
  connect_bd_net -net hier_splitter_dac2_b [get_bd_pins DAC_03_13/b] [get_bd_pins hier_splitter_dac_3/b]
  connect_bd_net -net hier_splitter_dac2_doutb [get_bd_pins hier_splitter_dac_3/doutb] [get_bd_pins system_ila_1/probe59]
  connect_bd_net -net hier_splitter_dac2_gaussian_width [get_bd_pins hier_gaussian_width_0/data3] [get_bd_pins hier_gauusian_width_1/data3] [get_bd_pins hier_gauusian_width_2/data3] [get_bd_pins hier_gauusian_width_3/data3] [get_bd_pins hier_splitter_dac_3/gaussian_width] [get_bd_pins system_ila_2/probe36]
  connect_bd_net -net hier_splitter_dac2_ini_amp_del [get_bd_pins DAC_03_13/ini_amp_del] [get_bd_pins hier_splitter_dac_3/ini_amp_del]
  connect_bd_net -net hier_splitter_dac2_ite_per_mes [get_bd_pins DAC_03_13/ite_per_mes] [get_bd_pins hier_splitter_dac_3/ite_per_mes]
  connect_bd_net -net hier_splitter_dac2_ite_tot [get_bd_pins DAC_03_13/ite_tot] [get_bd_pins hier_splitter_dac_3/ite_tot]
  connect_bd_net -net hier_splitter_dac2_mode [get_bd_pins DAC_03_13/mode] [get_bd_pins hier_splitter_dac_3/mode]
  connect_bd_net -net hier_splitter_dac2_off_time [get_bd_pins DAC_03_13/off_time1] [get_bd_pins hier_splitter_dac_3/off_time]
  connect_bd_net -net hier_splitter_dac2_sel [get_bd_pins DAC_03_13/sel] [get_bd_pins hier_splitter_dac_3/sel]
  connect_bd_net -net hier_splitter_dac2_sleep_time [get_bd_pins DAC_03_13/sleep_time] [get_bd_pins hier_splitter_dac_3/sleep_time]
  connect_bd_net -net hier_splitter_dac2_step_size [get_bd_pins DAC_03_13/step_size] [get_bd_pins hier_splitter_dac_3/step_size] [get_bd_pins system_ila_1/probe64]
  connect_bd_net -net hier_splitter_dac2_time_bwn_pulses [get_bd_pins DAC_03_13/time_bwn_pulses] [get_bd_pins hier_splitter_dac_3/time_bwn_pulses]
  connect_bd_net -net hier_splitter_dac2_trigger_delay [get_bd_pins hier_splitter_dac_3/trigger_delay] [get_bd_pins hier_trigger_delay_0/data3] [get_bd_pins hier_trigger_delay_1/data3] [get_bd_pins hier_trigger_delay_2/data3] [get_bd_pins hier_trigger_delay_3/data3] [get_bd_pins system_ila_2/probe39]
  connect_bd_net -net hier_splitter_dac2_trigger_time [get_bd_pins DAC_03_13/trigger_time] [get_bd_pins hier_splitter_dac_3/trigger_time]
  connect_bd_net -net hier_splitter_dac2_trigger_width [get_bd_pins hier_splitter_dac_3/trigger_width] [get_bd_pins hier_trigger_width_0/data3] [get_bd_pins hier_trigger_width_1/data3] [get_bd_pins hier_trigger_width_2/data3] [get_bd_pins hier_trigger_width_3/data3] [get_bd_pins system_ila_2/probe38]
  connect_bd_net -net hier_splitter_dac3_Din [get_bd_pins DAC_01_11/Din] [get_bd_pins hier_splitter_dac_1/Din]
  connect_bd_net -net hier_splitter_dac3_M [get_bd_pins DAC_01_11/M] [get_bd_pins hier_splitter_dac_1/M]
  connect_bd_net -net hier_splitter_dac3_adc_dac_latency [get_bd_pins hier_adc_dac_latency_0/data1] [get_bd_pins hier_adc_dac_latency_1/data1] [get_bd_pins hier_adc_dac_latency_2/data1] [get_bd_pins hier_adc_dac_latency_3/data1] [get_bd_pins hier_splitter_dac_1/adc_dac_latency]
  connect_bd_net -net hier_splitter_dac3_b [get_bd_pins DAC_01_11/b] [get_bd_pins hier_splitter_dac_1/b]
  connect_bd_net -net hier_splitter_dac3_gaussian_width [get_bd_pins hier_gaussian_width_0/data1] [get_bd_pins hier_gauusian_width_1/data1] [get_bd_pins hier_gauusian_width_2/data1] [get_bd_pins hier_gauusian_width_3/data1] [get_bd_pins hier_splitter_dac_1/gaussian_width]
  connect_bd_net -net hier_splitter_dac3_ini_amp_del [get_bd_pins DAC_01_11/ini_amp_del] [get_bd_pins hier_splitter_dac_1/ini_amp_del]
  connect_bd_net -net hier_splitter_dac3_ite_per_mes [get_bd_pins DAC_01_11/ite_per_mes] [get_bd_pins hier_splitter_dac_1/ite_per_mes]
  connect_bd_net -net hier_splitter_dac3_ite_tot [get_bd_pins DAC_01_11/ite_tot] [get_bd_pins hier_splitter_dac_1/ite_tot]
  connect_bd_net -net hier_splitter_dac3_mode [get_bd_pins DAC_01_11/mode] [get_bd_pins hier_splitter_dac_1/mode]
  connect_bd_net -net hier_splitter_dac3_off_time [get_bd_pins DAC_01_11/off_time1] [get_bd_pins hier_splitter_dac_1/off_time]
  connect_bd_net -net hier_splitter_dac3_sel [get_bd_pins DAC_01_11/sel] [get_bd_pins hier_splitter_dac_1/sel]
  connect_bd_net -net hier_splitter_dac3_sleep_time [get_bd_pins DAC_01_11/sleep_time] [get_bd_pins hier_splitter_dac_1/sleep_time]
  connect_bd_net -net hier_splitter_dac3_step_size [get_bd_pins DAC_01_11/step_size] [get_bd_pins hier_splitter_dac_1/step_size]
  connect_bd_net -net hier_splitter_dac3_time_bwn_pulses [get_bd_pins DAC_01_11/time_bwn_pulses] [get_bd_pins hier_splitter_dac_1/time_bwn_pulses]
  connect_bd_net -net hier_splitter_dac3_trigger_delay [get_bd_pins hier_splitter_dac_1/trigger_delay] [get_bd_pins hier_trigger_delay_0/data1] [get_bd_pins hier_trigger_delay_1/data1] [get_bd_pins hier_trigger_delay_2/data1] [get_bd_pins hier_trigger_delay_3/data1]
  connect_bd_net -net hier_splitter_dac3_trigger_time [get_bd_pins DAC_01_11/trigger_time] [get_bd_pins hier_splitter_dac_1/trigger_time]
  connect_bd_net -net hier_splitter_dac3_trigger_width [get_bd_pins hier_splitter_dac_1/trigger_width] [get_bd_pins hier_trigger_width_0/data1] [get_bd_pins hier_trigger_width_1/data1] [get_bd_pins hier_trigger_width_2/data1] [get_bd_pins hier_trigger_width_3/data1]
  connect_bd_net -net hier_splitter_dac_0_quadrant [get_bd_pins Filters_Rotation_ADC_00_20/qubit_in] [get_bd_pins iir_coeff/quadrant_00_20] [get_bd_pins system_ila_2/probe15]
  connect_bd_net -net hier_splitter_dac_1_quadrant [get_bd_pins Filters_Rotation_ADC_02_22/qubit_in] [get_bd_pins iir_coeff/quadrant_02_22] [get_bd_pins system_ila_2/probe14]
  connect_bd_net -net hier_splitter_dac_2_quadrant [get_bd_pins Filters_Rotation_ADC_10_30/qubit_in] [get_bd_pins iir_coeff/quadrant_10_30] [get_bd_pins system_ila_2/probe13]
  connect_bd_net -net hier_splitter_dac_3_quadrant [get_bd_pins Filters_Rotation_ADC_12_32/qubit_in] [get_bd_pins iir_coeff/quadrant_12_32] [get_bd_pins system_ila_2/probe12]
  connect_bd_net -net hier_splitter_dac_doutb [get_bd_pins hier_splitter_dac_0/doutb] [get_bd_pins splitter_dac_trigen_0/bram_data] [get_bd_pins splitter_trig_0/bram_data] [get_bd_pins system_ila_2/probe6] [get_bd_pins xlslice_0/Din] [get_bd_pins xlslice_1/Din]
  connect_bd_net -net hier_trig_sel1_data_out [get_bd_pins hier_trig_sel1/data_out] [get_bd_pins usp_rf_data_converter_0/s01_axis_tdata]
  connect_bd_net -net hier_trig_sel2_data_out [get_bd_pins hier_trig_sel2/data_out] [get_bd_pins usp_rf_data_converter_0/s02_axis_tdata]
  connect_bd_net -net hier_trig_sel3_data_out [get_bd_pins hier_trig_sel3/data_out] [get_bd_pins usp_rf_data_converter_0/s03_axis_tdata]
  connect_bd_net -net hier_trig_sel4_data_out [get_bd_pins hier_trig_sel4/data_out] [get_bd_pins usp_rf_data_converter_0/s10_axis_tdata]
  connect_bd_net -net hier_trig_sel5_data_out [get_bd_pins hier_trig_sel5/data_out] [get_bd_pins usp_rf_data_converter_0/s11_axis_tdata]
  connect_bd_net -net hier_trig_sel6_data_out [get_bd_pins hier_trig_sel6/data_out] [get_bd_pins usp_rf_data_converter_0/s12_axis_tdata]
  connect_bd_net -net hier_trig_sel7_data_out [get_bd_pins hier_trig_sel7/data_out] [get_bd_pins usp_rf_data_converter_0/s13_axis_tdata]
  connect_bd_net -net hier_trigger_delay_0_data_out [get_bd_pins hier_trigger_delay_0/data_out] [get_bd_pins trigger_gen0/trigger_delay]
  connect_bd_net -net hier_trigger_delay_1_data_out [get_bd_pins hier_trigger_delay_1/data_out] [get_bd_pins trigger_gen1/trigger_delay]
  connect_bd_net -net hier_trigger_delay_2_data_out [get_bd_pins hier_trigger_delay_2/data_out] [get_bd_pins trigger_gen2/trigger_delay]
  connect_bd_net -net hier_trigger_delay_3_data_out [get_bd_pins hier_trigger_delay_3/data_out] [get_bd_pins system_ila_2/probe34] [get_bd_pins trigger_gen3/trigger_delay]
  connect_bd_net -net hier_trigger_width_0_data_out [get_bd_pins hier_trigger_width_0/data_out] [get_bd_pins trigger_gen0/trigger_width]
  connect_bd_net -net hier_trigger_width_1_data_out [get_bd_pins hier_trigger_width_1/data_out] [get_bd_pins trigger_gen1/trigger_width]
  connect_bd_net -net hier_trigger_width_2_data_out [get_bd_pins hier_trigger_width_2/data_out] [get_bd_pins trigger_gen2/trigger_width]
  connect_bd_net -net hier_trigger_width_3_data_out [get_bd_pins hier_trigger_width_3/data_out] [get_bd_pins system_ila_2/probe33] [get_bd_pins trigger_gen3/trigger_width]
  connect_bd_net -net iir_coeff_Dout [get_bd_pins iir_coeff/Dout] [get_bd_pins system_ila_2/probe17]
  connect_bd_net -net iir_coeff_douta [get_bd_pins iir_coeff/douta] [get_bd_pins system_ila_2/probe16]
  connect_bd_net -net loopback_test_sel_gpio_io_o [get_bd_pins loopback_test_sel/gpio_io_o] [get_bd_pins param_mux_0/sel]
  connect_bd_net -net merger_2_0_Data_out [get_bd_pins Filters_Rotation_ADC_00_20/Data_out_6] [get_bd_pins Readout_DMA_0/s_axis_tdata] [get_bd_pins adc_ila_mux_46/data2]
  connect_bd_net -net mvng_avg_fil_0_filter_op [get_bd_pins Filters_Rotation_ADC_00_20/firmavout_00_20_I] [get_bd_pins adc_ila_mux_9/data2]
  connect_bd_net -net param_mux_0_data_out [get_bd_pins Filters_Rotation_ADC_00_20/a] [get_bd_pins adc_ila_mux_4/data2] [get_bd_pins param_mux_0/data_out] [get_bd_pins trigger_valid_I_channel/a]
  connect_bd_net -net param_mux_1_data_out [get_bd_pins hier_bram_addr_trigen_0/data_out] [get_bd_pins trigger_gen0/dac_addr]
  connect_bd_net -net param_mux_1_data_out1 [get_bd_pins ADC_00_20_mux/Q_valid_00_20_mux] [get_bd_pins Filters_Rotation_ADC_00_20/Q] [get_bd_pins adc_ila_mux_2/data2]
  connect_bd_net -net param_mux_2_data_out [get_bd_pins ADC_00_20_mux/I_00_20_mux] [get_bd_pins Filters_Rotation_ADC_00_20/I] [get_bd_pins adc_ila_mux_0/data2]
  connect_bd_net -net param_mux_2_data_out1 [get_bd_pins hier_trig_sel/data_out] [get_bd_pins system_ila_1/probe49] [get_bd_pins usp_rf_data_converter_0/s00_axis_tdata]
  connect_bd_net -net param_mux_3_data_out [get_bd_pins ADC_00_20_mux/I_valid_00_20_mux] [get_bd_pins Filters_Rotation_ADC_00_20/I_valid] [get_bd_pins adc_ila_mux_1/data2]
  connect_bd_net -net param_mux_4_data_out [get_bd_pins ADC_00_20_mux/Q_00_20_mux] [get_bd_pins Filters_Rotation_ADC_00_20/Q_valid] [get_bd_pins adc_ila_mux_3/data2]
  connect_bd_net -net pl_sysref_0_user_sysref_adc_1 [get_bd_pins pl_sysref_0/user_sysref_adc_1] [get_bd_pins usp_rf_data_converter_0/user_sysref_adc]
  connect_bd_net -net pl_sysref_0_user_sysref_dac [get_bd_pins pl_sysref_0/user_sysref_dac] [get_bd_pins usp_rf_data_converter_0/user_sysref_dac]
  connect_bd_net -net rotation_bypass_1 [get_bd_pins Filters_Rotation_ADC_10_30/rotation_bypass] [get_bd_pins iir_coeff/rotation_bypass_10_30]
  connect_bd_net -net rotation_bypass_2 [get_bd_pins Filters_Rotation_ADC_02_22/rotation_bypass] [get_bd_pins iir_coeff/rotation_bypass_02_22]
  connect_bd_net -net rotation_bypass_3 [get_bd_pins Filters_Rotation_ADC_12_32/rotation_bypass] [get_bd_pins iir_coeff/rotation_bypass_12_32]
  connect_bd_net -net rst [get_bd_pins DAC_00_10/Dout1] [get_bd_pins trigger_gen0/rst]
  connect_bd_net -net rst_1 [get_bd_pins DAC_02_12/Dout1] [get_bd_pins trigger_gen2/rst]
  connect_bd_net -net rst_2 [get_bd_pins DAC_03_13/Dout1] [get_bd_pins trigger_gen3/rst]
  connect_bd_net -net rst_ps8_0_96M_interconnect_aresetn [get_bd_pins axi_interconnect_0/ARESETN] [get_bd_pins rst_ps8_0_96M/interconnect_aresetn]
  connect_bd_net -net rst_ps8_0_96M_peripheral_aresetn [get_bd_pins DAC_00_10/s_axi_aresetn] [get_bd_pins DAC_01_11/s_axi_aresetn] [get_bd_pins DAC_02_12/s_axi_aresetn] [get_bd_pins DAC_03_13/s_axi_aresetn] [get_bd_pins Readout_DMA_0/axi_resetn] [get_bd_pins Readout_DMA_1/axi_resetn] [get_bd_pins Readout_DMA_2/axi_resetn] [get_bd_pins Readout_DMA_3/axi_resetn] [get_bd_pins axi_intc_0/s_axi_aresetn] [get_bd_pins axi_interconnect_0/M00_ARESETN] [get_bd_pins axi_interconnect_0/M01_ARESETN] [get_bd_pins axi_interconnect_0/M02_ARESETN] [get_bd_pins axi_interconnect_0/M03_ARESETN] [get_bd_pins axi_interconnect_0/M04_ARESETN] [get_bd_pins axi_interconnect_0/M05_ARESETN] [get_bd_pins axi_interconnect_0/M06_ARESETN] [get_bd_pins axi_interconnect_0/M07_ARESETN] [get_bd_pins axi_interconnect_0/M08_ARESETN] [get_bd_pins axi_interconnect_0/M09_ARESETN] [get_bd_pins axi_interconnect_0/M10_ARESETN] [get_bd_pins axi_interconnect_0/M11_ARESETN] [get_bd_pins axi_interconnect_0/M12_ARESETN] [get_bd_pins axi_interconnect_0/M13_ARESETN] [get_bd_pins axi_interconnect_0/S00_ARESETN] [get_bd_pins axi_interconnect_0/S01_ARESETN] [get_bd_pins axi_smc/aresetn] [get_bd_pins axi_smc_1/aresetn] [get_bd_pins hier_splitter_dac_0/s_axi_aresetn] [get_bd_pins hier_splitter_dac_1/s_axi_aresetn] [get_bd_pins hier_splitter_dac_2/s_axi_aresetn] [get_bd_pins hier_splitter_dac_3/s_axi_aresetn] [get_bd_pins iir_coeff/s_axi_aresetn] [get_bd_pins loopback_test_sel/s_axi_aresetn] [get_bd_pins rst_ps8_0_96M/peripheral_aresetn] [get_bd_pins start_fifo_cap/s_axi_aresetn] [get_bd_pins usp_rf_data_converter_0/m0_axis_aresetn] [get_bd_pins usp_rf_data_converter_0/m1_axis_aresetn] [get_bd_pins usp_rf_data_converter_0/m2_axis_aresetn] [get_bd_pins usp_rf_data_converter_0/m3_axis_aresetn] [get_bd_pins usp_rf_data_converter_0/s0_axis_aresetn] [get_bd_pins usp_rf_data_converter_0/s1_axis_aresetn] [get_bd_pins usp_rf_data_converter_0/s_axi_aresetn]
  connect_bd_net -net sel1_1 [get_bd_pins hier_trig_sel1/sel1] [get_bd_pins splitter_trig_0/trig_sel1] [get_bd_pins system_ila_2/probe23]
  connect_bd_net -net sel1_2 [get_bd_pins hier_trig_sel2/sel1] [get_bd_pins splitter_trig_0/trig_sel2] [get_bd_pins system_ila_2/probe24]
  connect_bd_net -net sel1_3 [get_bd_pins hier_trig_sel3/sel1] [get_bd_pins splitter_trig_0/trig_sel3] [get_bd_pins system_ila_2/probe25]
  connect_bd_net -net sel_0 [get_bd_pins Filters_Rotation_ADC_00_20/filter_bypass] [get_bd_pins iir_coeff/filter_bypass_sel_00_20] [get_bd_pins system_ila_2/probe1]
  connect_bd_net -net sel_1_1 [get_bd_pins ADC_02_22_mux/sel_1] [get_bd_pins iir_coeff/sel_adc_02_22_mux]
  connect_bd_net -net sel_1_2 [get_bd_pins ADC_10_30_mux/sel_1] [get_bd_pins iir_coeff/sel_adc_10_30_mux]
  connect_bd_net -net sel_1_3 [get_bd_pins ADC_12_32_mux/sel_1] [get_bd_pins iir_coeff/sel_adc_12_32_mux]
  connect_bd_net -net splitter_4bit_0_data_out0 [get_bd_pins Readout_DMA_0/b] [get_bd_pins splitter_4bit_0/data_out0]
  connect_bd_net -net splitter_4bit_0_data_out1 [get_bd_pins Readout_DMA_1/b] [get_bd_pins splitter_4bit_0/data_out1]
  connect_bd_net -net splitter_4bit_0_data_out2 [get_bd_pins Readout_DMA_2/b] [get_bd_pins splitter_4bit_0/data_out2]
  connect_bd_net -net splitter_4bit_0_data_out3 [get_bd_pins Readout_DMA_3/b] [get_bd_pins splitter_4bit_0/data_out3]
  connect_bd_net -net splitter_adc_dac_0_dac_addr_sel_trigen_0 [get_bd_pins hier_adc_dac_latency_0/Din_0] [get_bd_pins hier_bram_addr_trigen_0/Din_0] [get_bd_pins hier_gaussian_width_0/Din_0] [get_bd_pins hier_trigger_delay_0/Din_0] [get_bd_pins hier_trigger_width_0/Din_0] [get_bd_pins splitter_dac_trigen_0/dac_addr_sel_trigen_0] [get_bd_pins system_ila_2/probe7]
  connect_bd_net -net splitter_adc_dac_0_dac_addr_sel_trigen_1 [get_bd_pins hier_adc_dac_latency_1/Din_0] [get_bd_pins hier_bram_addr_trigen_1/Din_0] [get_bd_pins hier_gauusian_width_1/Din_0] [get_bd_pins hier_trigger_delay_1/Din_0] [get_bd_pins hier_trigger_width_1/Din_0] [get_bd_pins splitter_dac_trigen_0/dac_addr_sel_trigen_1]
  connect_bd_net -net splitter_adc_dac_0_dac_addr_sel_trigen_2 [get_bd_pins hier_adc_dac_latency_2/Din_0] [get_bd_pins hier_bram_addr_trigen_2/Din_0] [get_bd_pins hier_gauusian_width_2/Din_0] [get_bd_pins hier_trigger_delay_2/Din_0] [get_bd_pins hier_trigger_width_2/Din_0] [get_bd_pins splitter_dac_trigen_0/dac_addr_sel_trigen_2]
  connect_bd_net -net splitter_adc_dac_0_dac_addr_sel_trigen_3 [get_bd_pins hier_adc_dac_latency_3/Din_0] [get_bd_pins hier_bram_addr_trigen_3/Din_0] [get_bd_pins hier_gauusian_width_3/Din_0] [get_bd_pins hier_trigger_delay_3/Din_0] [get_bd_pins hier_trigger_width_3/Din_0] [get_bd_pins splitter_dac_trigen_0/dac_addr_sel_trigen_3] [get_bd_pins system_ila_2/probe35]
  connect_bd_net -net splitter_adc_dac_0_rotation_bypass_00_20 [get_bd_pins Filters_Rotation_ADC_00_20/rotation_bypass] [get_bd_pins iir_coeff/rotation_bypass_00_20] [get_bd_pins system_ila_2/probe4]
  connect_bd_net -net splitter_adc_dac_0_sel_adc_00_20_mux [get_bd_pins ADC_00_20_mux/sel_1] [get_bd_pins iir_coeff/sel_adc_00_20_mux] [get_bd_pins system_ila_2/probe3]
  connect_bd_net -net splitter_coeff_0_coeff_a2b_ADC_0020 [get_bd_pins Filters_Rotation_ADC_00_20/coeff_a2b_0] [get_bd_pins iir_coeff/coeff_a2b_ADC_0020] [get_bd_pins system_ila_2/probe20]
  connect_bd_net -net splitter_coeff_0_coeff_a2b_ADC_0222 [get_bd_pins Filters_Rotation_ADC_02_22/coeff_a2b_3] [get_bd_pins iir_coeff/coeff_a2b_ADC_0222]
  connect_bd_net -net splitter_coeff_0_coeff_a2b_ADC_1030 [get_bd_pins Filters_Rotation_ADC_10_30/coeff_a2b_2] [get_bd_pins iir_coeff/coeff_a2b_ADC_1030]
  connect_bd_net -net splitter_coeff_0_coeff_a2b_ADC_1232 [get_bd_pins Filters_Rotation_ADC_12_32/coeff_a2b_1] [get_bd_pins iir_coeff/coeff_a2b_ADC_1232]
  connect_bd_net -net splitter_coeff_0_coeff_a3b_ADC_0020 [get_bd_pins Filters_Rotation_ADC_00_20/coeff_a3b_0] [get_bd_pins iir_coeff/coeff_a3b_ADC_0020] [get_bd_pins system_ila_2/probe21]
  connect_bd_net -net splitter_coeff_0_coeff_a3b_ADC_0222 [get_bd_pins Filters_Rotation_ADC_02_22/coeff_a3b_3] [get_bd_pins iir_coeff/coeff_a3b_ADC_0222]
  connect_bd_net -net splitter_coeff_0_coeff_a3b_ADC_1030 [get_bd_pins Filters_Rotation_ADC_10_30/coeff_a3b_2] [get_bd_pins iir_coeff/coeff_a3b_ADC_1030]
  connect_bd_net -net splitter_coeff_0_coeff_a3b_ADC_1232 [get_bd_pins Filters_Rotation_ADC_12_32/coeff_a3b_1] [get_bd_pins iir_coeff/coeff_a3b_ADC_1232]
  connect_bd_net -net splitter_coeff_0_coeff_a4_ADC_0020 [get_bd_pins Filters_Rotation_ADC_00_20/coeff_a4_0] [get_bd_pins iir_coeff/coeff_a4_ADC_0020] [get_bd_pins system_ila_2/probe22]
  connect_bd_net -net splitter_coeff_0_coeff_a4_ADC_0222 [get_bd_pins Filters_Rotation_ADC_02_22/coeff_a4_3] [get_bd_pins iir_coeff/coeff_a4_ADC_0222]
  connect_bd_net -net splitter_coeff_0_coeff_a4_ADC_1030 [get_bd_pins Filters_Rotation_ADC_10_30/coeff_a4_2] [get_bd_pins iir_coeff/coeff_a4_ADC_1030]
  connect_bd_net -net splitter_coeff_0_coeff_a4_ADC_1232 [get_bd_pins Filters_Rotation_ADC_12_32/coeff_a4_1] [get_bd_pins iir_coeff/coeff_a4_ADC_1232]
  connect_bd_net -net splitter_coeff_0_coeff_ab_ADC_0020 [get_bd_pins Filters_Rotation_ADC_00_20/coeff_ab_0] [get_bd_pins iir_coeff/coeff_ab_ADC_0020] [get_bd_pins system_ila_2/probe19]
  connect_bd_net -net splitter_coeff_0_coeff_ab_ADC_0222 [get_bd_pins Filters_Rotation_ADC_02_22/coeff_ab_3] [get_bd_pins iir_coeff/coeff_ab_ADC_0222]
  connect_bd_net -net splitter_coeff_0_coeff_ab_ADC_1030 [get_bd_pins Filters_Rotation_ADC_10_30/coeff_ab_2] [get_bd_pins iir_coeff/coeff_ab_ADC_1030]
  connect_bd_net -net splitter_coeff_0_coeff_ab_ADC_1232 [get_bd_pins Filters_Rotation_ADC_12_32/coeff_ab_1] [get_bd_pins iir_coeff/coeff_ab_ADC_1232]
  connect_bd_net -net splitter_coeff_0_coeff_b_ADC_0020 [get_bd_pins Filters_Rotation_ADC_00_20/coeff_b_0] [get_bd_pins iir_coeff/coeff_b_ADC_0020] [get_bd_pins system_ila_2/probe18]
  connect_bd_net -net splitter_coeff_0_coeff_b_ADC_0222 [get_bd_pins Filters_Rotation_ADC_02_22/coeff_b_3] [get_bd_pins iir_coeff/coeff_b_ADC_0222]
  connect_bd_net -net splitter_coeff_0_coeff_b_ADC_1030 [get_bd_pins Filters_Rotation_ADC_10_30/coeff_b_2] [get_bd_pins iir_coeff/coeff_b_ADC_1030]
  connect_bd_net -net splitter_coeff_0_coeff_b_ADC_1232 [get_bd_pins Filters_Rotation_ADC_12_32/coeff_b_1] [get_bd_pins iir_coeff/coeff_b_ADC_1232]
  connect_bd_net -net splitter_dac_0_Din [get_bd_pins DAC_00_10/Din] [get_bd_pins hier_splitter_dac_0/Din]
  connect_bd_net -net splitter_dac_0_M [get_bd_pins DAC_00_10/M] [get_bd_pins hier_splitter_dac_0/M]
  connect_bd_net -net splitter_dac_0_adc_dac_latency [get_bd_pins hier_adc_dac_latency_0/data0] [get_bd_pins hier_adc_dac_latency_1/data0] [get_bd_pins hier_adc_dac_latency_2/data0] [get_bd_pins hier_adc_dac_latency_3/data0] [get_bd_pins hier_splitter_dac_0/adc_dac_latency]
  connect_bd_net -net splitter_dac_0_b [get_bd_pins DAC_00_10/b] [get_bd_pins hier_splitter_dac_0/b]
  connect_bd_net -net splitter_dac_0_gaussian_width [get_bd_pins hier_gaussian_width_0/data0] [get_bd_pins hier_gauusian_width_1/data0] [get_bd_pins hier_gauusian_width_2/data0] [get_bd_pins hier_gauusian_width_3/data0] [get_bd_pins hier_splitter_dac_0/gaussian_width]
  connect_bd_net -net splitter_dac_0_ini_amp_del [get_bd_pins DAC_00_10/ini_amp_del] [get_bd_pins hier_splitter_dac_0/ini_amp_del]
  connect_bd_net -net splitter_dac_0_ite_per_mes [get_bd_pins DAC_00_10/ite_per_mes] [get_bd_pins hier_splitter_dac_0/ite_per_mes]
  connect_bd_net -net splitter_dac_0_ite_tot [get_bd_pins DAC_00_10/ite_tot] [get_bd_pins hier_splitter_dac_0/ite_tot]
  connect_bd_net -net splitter_dac_0_mode [get_bd_pins DAC_00_10/mode] [get_bd_pins hier_splitter_dac_0/mode]
  connect_bd_net -net splitter_dac_0_off_time [get_bd_pins DAC_00_10/off_time1] [get_bd_pins hier_splitter_dac_0/off_time]
  connect_bd_net -net splitter_dac_0_sel [get_bd_pins DAC_00_10/sel] [get_bd_pins hier_splitter_dac_0/sel]
  connect_bd_net -net splitter_dac_0_sleep_time [get_bd_pins DAC_00_10/sleep_time] [get_bd_pins hier_splitter_dac_0/sleep_time]
  connect_bd_net -net splitter_dac_0_step_size [get_bd_pins DAC_00_10/step_size] [get_bd_pins hier_splitter_dac_0/step_size]
  connect_bd_net -net splitter_dac_0_time_bwn_pulses [get_bd_pins DAC_00_10/time_bwn_pulses] [get_bd_pins hier_splitter_dac_0/time_bwn_pulses]
  connect_bd_net -net splitter_dac_0_trigger_delay [get_bd_pins hier_splitter_dac_0/trigger_delay] [get_bd_pins hier_trigger_delay_0/data0] [get_bd_pins hier_trigger_delay_1/data0] [get_bd_pins hier_trigger_delay_2/data0] [get_bd_pins hier_trigger_delay_3/data0]
  connect_bd_net -net splitter_dac_0_trigger_time [get_bd_pins DAC_00_10/trigger_time] [get_bd_pins hier_splitter_dac_0/trigger_time]
  connect_bd_net -net splitter_dac_0_trigger_width [get_bd_pins hier_splitter_dac_0/trigger_width] [get_bd_pins hier_trigger_width_0/data0] [get_bd_pins hier_trigger_width_1/data0] [get_bd_pins hier_trigger_width_2/data0] [get_bd_pins hier_trigger_width_3/data0]
  connect_bd_net -net splitter_trig_0_trig_sel0 [get_bd_pins hier_trig_sel/sel1] [get_bd_pins splitter_trig_0/trig_sel0] [get_bd_pins system_ila_2/probe0]
  connect_bd_net -net splitter_trig_0_trig_sel4 [get_bd_pins hier_trig_sel4/sel1] [get_bd_pins splitter_trig_0/trig_sel4] [get_bd_pins system_ila_2/probe26]
  connect_bd_net -net splitter_trig_0_trig_sel5 [get_bd_pins hier_trig_sel5/sel1] [get_bd_pins splitter_trig_0/trig_sel5] [get_bd_pins system_ila_2/probe27]
  connect_bd_net -net splitter_trig_0_trig_sel6 [get_bd_pins hier_trig_sel6/sel1] [get_bd_pins splitter_trig_0/trig_sel6] [get_bd_pins system_ila_2/probe28]
  connect_bd_net -net splitter_trig_0_trig_sel7 [get_bd_pins hier_trig_sel7/sel1] [get_bd_pins splitter_trig_0/trig_sel7] [get_bd_pins system_ila_2/probe29]
  connect_bd_net -net start_fifo_cap_gpio_io_o [get_bd_pins splitter_4bit_0/data_in] [get_bd_pins start_fifo_cap/gpio_io_o]
  connect_bd_net -net thetha_0_1 [get_bd_pins Filters_Rotation_ADC_02_22/thetha_0] [get_bd_pins iir_coeff/theta_02_22] [get_bd_pins system_ila_2/probe10]
  connect_bd_net -net thetha_1_1 [get_bd_pins Filters_Rotation_ADC_10_30/thetha_1] [get_bd_pins iir_coeff/theta_10_30] [get_bd_pins system_ila_2/probe11]
  connect_bd_net -net thetha_2_1 [get_bd_pins Filters_Rotation_ADC_00_20/thetha_2] [get_bd_pins iir_coeff/theta_00_20] [get_bd_pins system_ila_2/probe9]
  connect_bd_net -net thetha_3_1 [get_bd_pins Filters_Rotation_ADC_12_32/thetha_3] [get_bd_pins iir_coeff/theta_12_32] [get_bd_pins system_ila_2/probe5]
  connect_bd_net -net trigger_gen2_trigger_new [get_bd_pins Filters_Rotation_ADC_10_30/a] [get_bd_pins adc_ila_mux_4/data4] [get_bd_pins hier_trig_sel2/readout_pulse_in] [get_bd_pins hier_trig_sel6/readout_pulse_in] [get_bd_pins system_ila_1/probe86] [get_bd_pins trigger_gen2/trigger_new]
  connect_bd_net -net trigger_gen3_trigger_new [get_bd_pins Filters_Rotation_ADC_12_32/a] [get_bd_pins adc_ila_mux_4/data3] [get_bd_pins hier_trig_sel3/readout_pulse_in] [get_bd_pins hier_trig_sel7/readout_pulse_in] [get_bd_pins system_ila_1/probe83] [get_bd_pins trigger_gen3/trigger_new]
  connect_bd_net -net trigger_gen_pkg_0_trigger_new [get_bd_pins hier_trig_sel/readout_pulse_in] [get_bd_pins hier_trig_sel4/readout_pulse_in] [get_bd_pins param_mux_0/data1] [get_bd_pins param_mux_0/data2] [get_bd_pins system_ila_1/probe52] [get_bd_pins trigger_gen0/trigger_new]
  connect_bd_net -net trigger_gen_pkg_1_trigger_new [get_bd_pins Filters_Rotation_ADC_02_22/a] [get_bd_pins adc_ila_mux_4/data1] [get_bd_pins hier_trig_sel1/readout_pulse_in] [get_bd_pins hier_trig_sel5/readout_pulse_in] [get_bd_pins trigger_gen1/trigger_new]
  connect_bd_net -net trigger_valid_I_channel_out1 [get_bd_pins system_ila_2/probe2] [get_bd_pins trigger_valid_I_channel/out1]
  connect_bd_net -net usp_rf_data_converter_0_clk_dac1 [get_bd_pins DAC_00_10/clk] [get_bd_pins DAC_01_11/clk] [get_bd_pins DAC_02_12/clk] [get_bd_pins DAC_02_trigger/clk] [get_bd_pins DAC_03_13/clk] [get_bd_pins Filters_Rotation_ADC_00_20/clk] [get_bd_pins Filters_Rotation_ADC_02_22/clk] [get_bd_pins Filters_Rotation_ADC_10_30/clk] [get_bd_pins Filters_Rotation_ADC_12_32/clk] [get_bd_pins Readout_DMA_0/s_axi_lite_aclk] [get_bd_pins Readout_DMA_1/s_axi_lite_aclk] [get_bd_pins Readout_DMA_2/s_axi_lite_aclk] [get_bd_pins Readout_DMA_3/s_axi_lite_aclk] [get_bd_pins axi_intc_0/s_axi_aclk] [get_bd_pins axi_interconnect_0/ACLK] [get_bd_pins axi_interconnect_0/M00_ACLK] [get_bd_pins axi_interconnect_0/M01_ACLK] [get_bd_pins axi_interconnect_0/M02_ACLK] [get_bd_pins axi_interconnect_0/M03_ACLK] [get_bd_pins axi_interconnect_0/M04_ACLK] [get_bd_pins axi_interconnect_0/M05_ACLK] [get_bd_pins axi_interconnect_0/M06_ACLK] [get_bd_pins axi_interconnect_0/M07_ACLK] [get_bd_pins axi_interconnect_0/M08_ACLK] [get_bd_pins axi_interconnect_0/M09_ACLK] [get_bd_pins axi_interconnect_0/M10_ACLK] [get_bd_pins axi_interconnect_0/M11_ACLK] [get_bd_pins axi_interconnect_0/M12_ACLK] [get_bd_pins axi_interconnect_0/M13_ACLK] [get_bd_pins axi_interconnect_0/S00_ACLK] [get_bd_pins axi_interconnect_0/S01_ACLK] [get_bd_pins axi_smc/aclk] [get_bd_pins axi_smc_1/aclk] [get_bd_pins c_counter_binary_0/CLK] [get_bd_pins clk_wiz_0/clk_out1] [get_bd_pins hier_splitter_dac_0/clkb] [get_bd_pins hier_splitter_dac_1/clkb] [get_bd_pins hier_splitter_dac_2/clkb] [get_bd_pins hier_splitter_dac_3/clkb] [get_bd_pins iir_coeff/clk] [get_bd_pins loopback_test_sel/s_axi_aclk] [get_bd_pins pl_sysref_0/pl_clk_adc] [get_bd_pins pl_sysref_0/pl_clk_buf] [get_bd_pins pl_sysref_0/pl_clk_dac] [get_bd_pins rst_ps8_0_96M/slowest_sync_clk] [get_bd_pins splitter_dac_trigen_0/clk] [get_bd_pins splitter_trig_0/clk] [get_bd_pins start_fifo_cap/s_axi_aclk] [get_bd_pins system_ila_1/clk] [get_bd_pins system_ila_2/clk] [get_bd_pins trigger_gen0/s_axi_aclk] [get_bd_pins trigger_gen1/clk] [get_bd_pins trigger_gen2/clk] [get_bd_pins trigger_gen3/clk] [get_bd_pins usp_rf_data_converter_0/m0_axis_aclk] [get_bd_pins usp_rf_data_converter_0/m1_axis_aclk] [get_bd_pins usp_rf_data_converter_0/m2_axis_aclk] [get_bd_pins usp_rf_data_converter_0/m3_axis_aclk] [get_bd_pins usp_rf_data_converter_0/s0_axis_aclk] [get_bd_pins usp_rf_data_converter_0/s1_axis_aclk] [get_bd_pins usp_rf_data_converter_0/s_axi_aclk] [get_bd_pins zynq_ultra_ps_e_0/maxihpm0_fpd_aclk] [get_bd_pins zynq_ultra_ps_e_0/maxihpm0_lpd_aclk] [get_bd_pins zynq_ultra_ps_e_0/maxihpm1_fpd_aclk] [get_bd_pins zynq_ultra_ps_e_0/saxiacp_fpd_aclk] [get_bd_pins zynq_ultra_ps_e_0/saxihp0_fpd_aclk] [get_bd_pins zynq_ultra_ps_e_0/saxihp1_fpd_aclk] [get_bd_pins zynq_ultra_ps_e_0/saxihp2_fpd_aclk] [get_bd_pins zynq_ultra_ps_e_0/saxihp3_fpd_aclk]
  connect_bd_net -net usp_rf_data_converter_0_irq [get_bd_pins usp_rf_data_converter_0/irq] [get_bd_pins xlconcat_2/In0]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tdata [get_bd_pins ADC_00_20_mux/data1] [get_bd_pins system_ila_1/probe25] [get_bd_pins usp_rf_data_converter_0/m00_axis_tdata]
  connect_bd_net -net usp_rf_data_converter_0_m00_axis_tvalid [get_bd_pins ADC_00_20_mux/data3] [get_bd_pins trigger_valid_I_channel/b] [get_bd_pins usp_rf_data_converter_0/m00_axis_tvalid]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tdata [get_bd_pins ADC_00_20_mux/data7] [get_bd_pins system_ila_1/probe46] [get_bd_pins usp_rf_data_converter_0/m01_axis_tdata]
  connect_bd_net -net usp_rf_data_converter_0_m01_axis_tvalid [get_bd_pins ADC_00_20_mux/data5] [get_bd_pins usp_rf_data_converter_0/m01_axis_tvalid]
  connect_bd_net -net usp_rf_data_converter_0_m02_axis_tdata [get_bd_pins ADC_02_22_mux/data1] [get_bd_pins system_ila_1/probe47] [get_bd_pins usp_rf_data_converter_0/m02_axis_tdata]
  connect_bd_net -net usp_rf_data_converter_0_m03_axis_tdata [get_bd_pins ADC_02_22_mux/data7] [get_bd_pins system_ila_1/probe48] [get_bd_pins usp_rf_data_converter_0/m03_axis_tdata]
  connect_bd_net -net usp_rf_data_converter_0_m20_axis_tdata [get_bd_pins ADC_00_20_mux/data2] [get_bd_pins system_ila_1/probe50] [get_bd_pins usp_rf_data_converter_0/m20_axis_tdata]
  connect_bd_net -net usp_rf_data_converter_0_m20_axis_tvalid [get_bd_pins ADC_00_20_mux/data4] [get_bd_pins usp_rf_data_converter_0/m20_axis_tvalid]
  connect_bd_net -net usp_rf_data_converter_0_m21_axis_tdata [get_bd_pins ADC_00_20_mux/data8] [get_bd_pins system_ila_1/probe54] [get_bd_pins usp_rf_data_converter_0/m21_axis_tdata]
  connect_bd_net -net usp_rf_data_converter_0_m21_axis_tvalid [get_bd_pins ADC_00_20_mux/data6] [get_bd_pins usp_rf_data_converter_0/m21_axis_tvalid]
  connect_bd_net -net usp_rf_data_converter_0_m22_axis_tdata [get_bd_pins ADC_02_22_mux/data2] [get_bd_pins system_ila_1/probe55] [get_bd_pins usp_rf_data_converter_0/m22_axis_tdata]
  connect_bd_net -net usp_rf_data_converter_0_m23_axis_tdata [get_bd_pins ADC_02_22_mux/data8] [get_bd_pins system_ila_1/probe56] [get_bd_pins usp_rf_data_converter_0/m23_axis_tdata]
  connect_bd_net -net usp_rf_data_converter_0_m30_axis_tdata [get_bd_pins ADC_10_30_mux/data2] [get_bd_pins system_ila_1/probe57] [get_bd_pins usp_rf_data_converter_0/m30_axis_tdata]
  connect_bd_net -net usp_rf_data_converter_0_m32_axis_tdata [get_bd_pins ADC_12_32_mux/data2] [get_bd_pins system_ila_1/probe58] [get_bd_pins usp_rf_data_converter_0/m32_axis_tdata]
  connect_bd_net -net util_ds_buf_0_IBUF_OUT [get_bd_pins clk_wiz_0/clk_in1] [get_bd_pins util_ds_buf_0/IBUF_OUT]
  connect_bd_net -net xlconcat_0_dout [get_bd_pins xlconcat_0/dout] [get_bd_pins zynq_ultra_ps_e_0/pl_ps_irq0]
  connect_bd_net -net xlconcat_2_dout [get_bd_pins axi_intc_0/intr] [get_bd_pins xlconcat_2/dout]
  connect_bd_net -net xlconstant_6_dout [get_bd_pins usp_rf_data_converter_0/s00_axis_tvalid] [get_bd_pins usp_rf_data_converter_0/s01_axis_tvalid] [get_bd_pins usp_rf_data_converter_0/s02_axis_tvalid] [get_bd_pins usp_rf_data_converter_0/s03_axis_tvalid] [get_bd_pins usp_rf_data_converter_0/s10_axis_tvalid] [get_bd_pins usp_rf_data_converter_0/s11_axis_tvalid] [get_bd_pins usp_rf_data_converter_0/s12_axis_tvalid] [get_bd_pins usp_rf_data_converter_0/s13_axis_tvalid] [get_bd_pins xlconstant_6/dout]
  connect_bd_net -net xlslice_0_Dout [get_bd_pins hier_splitter_dac_0/update] [get_bd_pins hier_splitter_dac_1/update] [get_bd_pins hier_splitter_dac_2/update] [get_bd_pins hier_splitter_dac_3/update] [get_bd_pins splitter_dac_trigen_0/update] [get_bd_pins splitter_trig_0/update] [get_bd_pins system_ila_1/probe62] [get_bd_pins xlslice_0/Dout]
  connect_bd_net -net xlslice_1_Dout [get_bd_pins DAC_00_10/rst] [get_bd_pins DAC_01_11/rst] [get_bd_pins DAC_02_12/rst] [get_bd_pins DAC_03_13/rst] [get_bd_pins xlslice_1/Dout]

  # Create address segments
  assign_bd_address -offset 0xB0000000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_00_10/Block_Mem_I_LSB/axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0xB0100000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_00_10/Block_Mem_I_MSB/axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0xA0000000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_01_11/Block_Mem_I_LSB/axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0xA0100000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_01_11/Block_Mem_I_MSB/axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0xA0080000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_02_12/Block_Mem_I_LSB/axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0xA0082000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_02_12/Block_Mem_I_MSB/axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0xA0088000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_03_13/Block_Mem_I_LSB/axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0xA008A000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_03_13/Block_Mem_I_MSB/axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0xB00D0000 -range 0x00001000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs hier_splitter_dac_0/axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0xB00F0000 -range 0x00001000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs hier_splitter_dac_2/axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0xB0180000 -range 0x00001000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs hier_splitter_dac_3/axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0xB0190000 -range 0x00001000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs hier_splitter_dac_1/axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0x80000000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs iir_coeff/axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0xB0200000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_00_10/Block_Mem_Q_LSB/axi_bram_ctrl_1/S_AXI/Mem0] -force
  assign_bd_address -offset 0xB0300000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_00_10/Block_Mem_Q_MSB/axi_bram_ctrl_1/S_AXI/Mem0] -force
  assign_bd_address -offset 0xA0200000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_01_11/Block_Mem_Q_LSB/axi_bram_ctrl_1/S_AXI/Mem0] -force
  assign_bd_address -offset 0xA0300000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_01_11/Block_Mem_Q_MSB/axi_bram_ctrl_1/S_AXI/Mem0] -force
  assign_bd_address -offset 0xA0084000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_02_12/Block_Mem_Q_LSB/axi_bram_ctrl_1/S_AXI/Mem0] -force
  assign_bd_address -offset 0xA0086000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_02_12/Block_Mem_Q_MSB/axi_bram_ctrl_1/S_AXI/Mem0] -force
  assign_bd_address -offset 0xA008C000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_03_13/Block_Mem_Q_LSB/axi_bram_ctrl_1/S_AXI/Mem0] -force
  assign_bd_address -offset 0xA008E000 -range 0x00002000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs DAC_03_13/Block_Mem_Q_MSB/axi_bram_ctrl_1/S_AXI/Mem0] -force
  assign_bd_address -offset 0xB00C0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs Readout_DMA_0/axi_dma_0/S_AXI_LITE/Reg] -force
  assign_bd_address -offset 0xA0010000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs Readout_DMA_1/axi_dma_0/S_AXI_LITE/Reg] -force
  assign_bd_address -offset 0xA0020000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs Readout_DMA_2/axi_dma_0/S_AXI_LITE/Reg] -force
  assign_bd_address -offset 0xA0030000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs Readout_DMA_3/axi_dma_0/S_AXI_LITE/Reg] -force
  assign_bd_address -offset 0xB00E0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs axi_intc_0/S_AXI/Reg] -force
  assign_bd_address -offset 0xB01A0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs loopback_test_sel/S_AXI/Reg] -force
  assign_bd_address -offset 0xB01B0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs start_fifo_cap/S_AXI/Reg] -force
  assign_bd_address -offset 0xB0080000 -range 0x00040000 -target_address_space [get_bd_addr_spaces zynq_ultra_ps_e_0/Data] [get_bd_addr_segs usp_rf_data_converter_0/s_axi/Reg] -force
  assign_bd_address -offset 0x00000000 -range 0x20000000 -target_address_space [get_bd_addr_spaces Readout_DMA_0/axi_dma_0/Data_SG] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIACP/ACP_DDR_LOW] -force
  assign_bd_address -offset 0x00000000 -range 0x20000000 -target_address_space [get_bd_addr_spaces Readout_DMA_0/axi_dma_0/Data_S2MM] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIGP2/HP0_DDR_LOW] -force
  assign_bd_address -offset 0x00000000 -range 0x80000000 -target_address_space [get_bd_addr_spaces Readout_DMA_1/axi_dma_0/Data_SG] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIACP/ACP_DDR_LOW] -force
  assign_bd_address -offset 0x00000000 -range 0x80000000 -target_address_space [get_bd_addr_spaces Readout_DMA_1/axi_dma_0/Data_S2MM] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIGP3/HP1_DDR_LOW] -force
  assign_bd_address -offset 0x00000000 -range 0x20000000 -target_address_space [get_bd_addr_spaces Readout_DMA_2/axi_dma_0/Data_SG] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIACP/ACP_DDR_LOW] -force
  assign_bd_address -offset 0x00000000 -range 0x20000000 -target_address_space [get_bd_addr_spaces Readout_DMA_2/axi_dma_0/Data_S2MM] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIGP4/HP2_DDR_LOW] -force
  assign_bd_address -offset 0x00000000 -range 0x80000000 -target_address_space [get_bd_addr_spaces Readout_DMA_3/axi_dma_0/Data_SG] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIACP/ACP_DDR_LOW] -force
  assign_bd_address -offset 0x00000000 -range 0x80000000 -target_address_space [get_bd_addr_spaces Readout_DMA_3/axi_dma_0/Data_S2MM] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIGP5/HP3_DDR_LOW] -force

  # Exclude Address Segments
  exclude_bd_addr_seg -offset 0xFF000000 -range 0x01000000 -target_address_space [get_bd_addr_spaces Readout_DMA_0/axi_dma_0/Data_S2MM] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIGP2/HP0_LPS_OCM]
  exclude_bd_addr_seg -offset 0xFF000000 -range 0x01000000 -target_address_space [get_bd_addr_spaces Readout_DMA_0/axi_dma_0/Data_SG] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIACP/ACP_LPS_OCM]
  exclude_bd_addr_seg -offset 0xB00C0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_1/axi_dma_0/Data_S2MM] [get_bd_addr_segs Readout_DMA_0/axi_dma_0/S_AXI_LITE/Reg]
  exclude_bd_addr_seg -offset 0xB00E0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_1/axi_dma_0/Data_S2MM] [get_bd_addr_segs axi_intc_0/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB01A0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_1/axi_dma_0/Data_S2MM] [get_bd_addr_segs loopback_test_sel/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB01B0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_1/axi_dma_0/Data_S2MM] [get_bd_addr_segs start_fifo_cap/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB0080000 -range 0x00040000 -target_address_space [get_bd_addr_spaces Readout_DMA_1/axi_dma_0/Data_S2MM] [get_bd_addr_segs usp_rf_data_converter_0/s_axi/Reg]
  exclude_bd_addr_seg -offset 0xFF000000 -range 0x01000000 -target_address_space [get_bd_addr_spaces Readout_DMA_1/axi_dma_0/Data_S2MM] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIGP3/HP1_LPS_OCM]
  exclude_bd_addr_seg -offset 0xB00E0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_1/axi_dma_0/Data_SG] [get_bd_addr_segs axi_intc_0/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB01A0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_1/axi_dma_0/Data_SG] [get_bd_addr_segs loopback_test_sel/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB01B0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_1/axi_dma_0/Data_SG] [get_bd_addr_segs start_fifo_cap/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB0080000 -range 0x00040000 -target_address_space [get_bd_addr_spaces Readout_DMA_1/axi_dma_0/Data_SG] [get_bd_addr_segs usp_rf_data_converter_0/s_axi/Reg]
  exclude_bd_addr_seg -offset 0xFF000000 -range 0x01000000 -target_address_space [get_bd_addr_spaces Readout_DMA_1/axi_dma_0/Data_SG] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIACP/ACP_LPS_OCM]
  exclude_bd_addr_seg -offset 0xB00E0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_2/axi_dma_0/Data_S2MM] [get_bd_addr_segs axi_intc_0/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB01A0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_2/axi_dma_0/Data_S2MM] [get_bd_addr_segs loopback_test_sel/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB01B0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_2/axi_dma_0/Data_S2MM] [get_bd_addr_segs start_fifo_cap/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB0080000 -range 0x00040000 -target_address_space [get_bd_addr_spaces Readout_DMA_2/axi_dma_0/Data_S2MM] [get_bd_addr_segs usp_rf_data_converter_0/s_axi/Reg]
  exclude_bd_addr_seg -offset 0xFF000000 -range 0x01000000 -target_address_space [get_bd_addr_spaces Readout_DMA_2/axi_dma_0/Data_S2MM] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIGP4/HP2_LPS_OCM]
  exclude_bd_addr_seg -offset 0xB00C0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_2/axi_dma_0/Data_SG] [get_bd_addr_segs Readout_DMA_0/axi_dma_0/S_AXI_LITE/Reg]
  exclude_bd_addr_seg -offset 0xB00E0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_2/axi_dma_0/Data_SG] [get_bd_addr_segs axi_intc_0/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB01A0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_2/axi_dma_0/Data_SG] [get_bd_addr_segs loopback_test_sel/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB01B0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_2/axi_dma_0/Data_SG] [get_bd_addr_segs start_fifo_cap/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB0080000 -range 0x00040000 -target_address_space [get_bd_addr_spaces Readout_DMA_2/axi_dma_0/Data_SG] [get_bd_addr_segs usp_rf_data_converter_0/s_axi/Reg]
  exclude_bd_addr_seg -offset 0xFF000000 -range 0x01000000 -target_address_space [get_bd_addr_spaces Readout_DMA_2/axi_dma_0/Data_SG] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIACP/ACP_LPS_OCM]
  exclude_bd_addr_seg -offset 0xB00C0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_3/axi_dma_0/Data_S2MM] [get_bd_addr_segs Readout_DMA_0/axi_dma_0/S_AXI_LITE/Reg]
  exclude_bd_addr_seg -offset 0xB00E0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_3/axi_dma_0/Data_S2MM] [get_bd_addr_segs axi_intc_0/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB01A0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_3/axi_dma_0/Data_S2MM] [get_bd_addr_segs loopback_test_sel/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB01B0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_3/axi_dma_0/Data_S2MM] [get_bd_addr_segs start_fifo_cap/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB0080000 -range 0x00040000 -target_address_space [get_bd_addr_spaces Readout_DMA_3/axi_dma_0/Data_S2MM] [get_bd_addr_segs usp_rf_data_converter_0/s_axi/Reg]
  exclude_bd_addr_seg -offset 0xFF000000 -range 0x01000000 -target_address_space [get_bd_addr_spaces Readout_DMA_3/axi_dma_0/Data_S2MM] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIGP5/HP3_LPS_OCM]
  exclude_bd_addr_seg -offset 0xB00C0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_3/axi_dma_0/Data_SG] [get_bd_addr_segs Readout_DMA_0/axi_dma_0/S_AXI_LITE/Reg]
  exclude_bd_addr_seg -offset 0xB00E0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_3/axi_dma_0/Data_SG] [get_bd_addr_segs axi_intc_0/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB01A0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_3/axi_dma_0/Data_SG] [get_bd_addr_segs loopback_test_sel/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB01B0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces Readout_DMA_3/axi_dma_0/Data_SG] [get_bd_addr_segs start_fifo_cap/S_AXI/Reg]
  exclude_bd_addr_seg -offset 0xB0080000 -range 0x00040000 -target_address_space [get_bd_addr_spaces Readout_DMA_3/axi_dma_0/Data_SG] [get_bd_addr_segs usp_rf_data_converter_0/s_axi/Reg]
  exclude_bd_addr_seg -offset 0xFF000000 -range 0x01000000 -target_address_space [get_bd_addr_spaces Readout_DMA_3/axi_dma_0/Data_SG] [get_bd_addr_segs zynq_ultra_ps_e_0/SAXIACP/ACP_LPS_OCM]


  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
}
# End of create_root_design()


##################################################################
# MAIN FLOW
##################################################################

create_root_design ""


